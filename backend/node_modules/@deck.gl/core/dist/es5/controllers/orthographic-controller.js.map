{"version":3,"sources":["../../../src/controllers/orthographic-controller.js"],"names":["MOVEMENT_SPEED","MIN_ZOOM","MAX_ZOOM","OrthographicState","width","height","offset","zoom","startPanPosition","startPanOffset","startRotatePosition","startRotateOffset","_interactiveState","pos","_viewportProps","_getUpdatedState","delta","Vector2","subtract","deltaScaleX","deltaScaleY","scale","newZoom","add","newProps","Object","assign","ViewState","OrthographicController","props","invertPan","Controller"],"mappings":"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","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\n\nimport {Vector2, clamp} from 'math.gl';\n\n// TODO: not sure whether we should have these constants\n// as part of viewport props\nconst MOVEMENT_SPEED = 10; // per keyboard click\nconst MIN_ZOOM = 0.1;\nconst MAX_ZOOM = 10;\n\nclass OrthographicState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    offset, // Offset to the origin\n    zoom, // Zoom level of the view\n\n    /** Interaction states */\n    startPanPosition,\n    startPanOffset,\n    startRotatePosition,\n    startRotateOffset\n  }) {\n    super({\n      width,\n      height,\n      offset,\n      zoom\n    });\n    this._interactiveState = {\n      startPanPosition,\n      startPanOffset,\n      startRotatePosition,\n      startRotateOffset\n    };\n  }\n\n  /* Public API */\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const {offset} = this._viewportProps;\n    return this._getUpdatedState({\n      startPanPosition: pos,\n      startPanOffset: offset\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos}) {\n    const {startPanPosition, startPanOffset} = this._interactiveState;\n    const delta = new Vector2(pos).subtract(startPanPosition);\n    return this._getUpdatedState({\n      offset: new Vector2(startPanOffset).subtract(delta)\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null,\n      startPanOffset: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this;\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    return this;\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this;\n  }\n\n  /**\n   * Zoom\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({scale}) {\n    const {zoom} = this._viewportProps;\n    const newZoom = clamp(zoom * scale, MIN_ZOOM, MAX_ZOOM);\n    return this._getUpdatedState({\n      zoom: newZoom\n    });\n  }\n\n  moveLeft() {\n    const {offset} = this._viewportProps;\n    const delta = [MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveRight() {\n    const {offset} = this._viewportProps;\n    const delta = [-MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveUp() {\n    const {offset} = this._viewportProps;\n    const delta = [0, MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveDown() {\n    const {offset} = this._viewportProps;\n    const delta = [0, -MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new OrthographicState(\n      Object.assign({}, this._viewportProps, this._interactiveState, newProps)\n    );\n  }\n}\n\nexport default class OrthographicController extends Controller {\n  constructor(props) {\n    super(OrthographicState, props);\n    this.invertPan = true;\n  }\n}\n"],"file":"orthographic-controller.js"}