{"version":3,"sources":["../../../../../src/experimental/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["fp64ifyMatrix4","fp64Utils","IDENTITY_MATRIX","PIXEL_SIZE","DEFAULT_CHANGE_FLAGS","dataChanged","viewportChanged","cellSizeChanged","GPUGridAggregator","countsData","maxCountData","pixelIndex","length","index","cellCount","cellWeight","totalCount","totalWeight","maxCellWieght","cellWeights","cellCounts","push","gl","opts","id","shaderCache","state","_hasGPUSupport","FEATURES","BLEND_EQUATION_MINMAX","COLOR_ATTACHMENT_RGBA32F","TEXTURE_FILTER_LINEAR_FLOAT","_setupGPUResources","positions","positions64xyLow","weights","changeFlags","cellSize","viewport","width","height","countsBuffer","maxCountBuffer","gridTransformMatrix","projectPoints","useGPU","fp64","_setState","transformMatrix","pixelProjectionMatrix","aggregationParams","_updateGridSize","_runAggregationOnGPU","log","warn","_runAggregationOnCPU","gridAggregationFramebuffer","readPixelsToBuffer","buffer","type","GL","FLOAT","allAggregrationFramebuffer","countsTexture","texture","maxCountTexture","Model","vs","AGGREGATE_TO_GRID_VS_FP64","AGGREGATE_TO_GRID_VS","fs","AGGREGATE_TO_GRID_FS","modules","vertexCount","drawMode","POINTS","AGGREGATE_ALL_VS_FP64","AGGREGATE_ALL_FS","isInstanced","instanceCount","attributes","position","Buffer","size","data","Float32Array","projectedPositions","projectFlat","x","y","numCol","numRow","windowSize","gridAggregationModel","allAggregationModel","uProjectionMatrixFP64","gridSize","bind","clear","COLOR_BUFFER_BIT","draw","parameters","clearColor","clearDepth","blend","depthTest","blendEquation","FUNC_ADD","blendFunc","ONE","moduleSettings","uniforms","uProjectionMatrix","unbind","MAX","uSampler","ELEMENTCOUNT","counts","pos","_projectPositions","fill","maxWeight","gridPos","weight","Number","isFinite","colId","Math","floor","rowId","i","maxCountBufferData","subData","_updateModels","_renderAggregateData","_getAggregateData","updateObject","Object","assign","setupFramebuffer","delete","_getAggregationModel","_getAllAggregationModel","positionsBuffer","positions64xyLowBuffer","weightsBuffer","aggregationModelAttributes","createPos64xyLow","_setupModels","setVertexCount","setAttributes","setInstanceCount","framebufferSize","resize","ceil","Texture2D","format","RGBA32F","border","mipmaps","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","dataFormat","RGBA","fb","Framebuffer","attachments","COLOR_ATTACHMENT0"],"mappings":"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","sourcesContent":["import GL from 'luma.gl/constants';\nimport {Buffer, Model, Framebuffer, Texture2D, FEATURES, hasFeatures, isWebGL2} from 'luma.gl';\nimport {log} from '@deck.gl/core';\nimport assert from 'assert';\nimport {fp64 as fp64Utils} from 'luma.gl';\nimport {worldToPixels} from 'viewport-mercator-project';\nconst {fp64ifyMatrix4} = fp64Utils;\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nconst PIXEL_SIZE = 4; // RGBA32F\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_VS_FP64 from './aggregate-to-grid-vs-64.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS_FP64 from './aggregate-all-vs-64.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\n\nconst DEFAULT_CHANGE_FLAGS = {\n  dataChanged: true,\n  viewportChanged: true,\n  cellSizeChanged: true\n};\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({countsData, maxCountData, pixelIndex}) {\n    assert(countsData.length >= (pixelIndex + 1) * PIXEL_SIZE);\n    assert(maxCountData.length === PIXEL_SIZE);\n    const index = pixelIndex * PIXEL_SIZE;\n    const cellCount = countsData[index];\n    const cellWeight = countsData[index + 1];\n    const totalCount = maxCountData[0];\n    const totalWeight = maxCountData[1];\n    const maxCellWieght = maxCountData[3];\n    return {\n      cellCount,\n      cellWeight,\n      totalCount,\n      totalWeight,\n      maxCellWieght\n    };\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData}) {\n    const cellWeights = [];\n    const cellCounts = [];\n    for (let index = 0; index < countsData.length; index += 4) {\n      cellCounts.push(countsData[index]);\n      cellWeights.push(countsData[index + 1]);\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  // DEBUG ONLY\n  // static logData({countsBuffer, maxCountBuffer}) {\n  //   const countsData = countsBuffer.getData();\n  //   for (let index = 0; index < countsData.length; index += 4) {\n  //     if (countsData[index] > 0) {\n  //       console.log(`index: ${index} count: ${countsData[index]}`);\n  //     }\n  //   }\n  //   const maxCountData = maxCountBuffer.getData();\n  //   console.log(`totalCount: ${maxCountData[0]} totalWeight: ${maxCountData[1]} maxCellWieght: ${maxCountData[3]}`);\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.shaderCache = opts.shaderCache || null;\n    this.gl = gl;\n    this.state = {};\n    this._hasGPUSupport =\n      isWebGL2(gl) &&\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX,\n        FEATURES.COLOR_ATTACHMENT_RGBA32F,\n        FEATURES.TEXTURE_FILTER_LINEAR_FLOAT\n      );\n    if (this._hasGPUSupport) {\n      this._setupGPUResources();\n    }\n  }\n\n  // Perform aggregation and retun the results\n  run({\n    positions,\n    positions64xyLow,\n    weights,\n    changeFlags = DEFAULT_CHANGE_FLAGS,\n    cellSize,\n    viewport,\n    width,\n    height,\n    countsBuffer = null,\n    maxCountBuffer = null,\n    gridTransformMatrix = null,\n    projectPoints = false,\n    useGPU = true,\n    fp64 = false\n  } = {}) {\n    if (this.state.useGPU !== useGPU) {\n      changeFlags = DEFAULT_CHANGE_FLAGS;\n    }\n    this._setState({useGPU});\n    const transformMatrix =\n      gridTransformMatrix || (viewport && viewport.pixelProjectionMatrix) || IDENTITY_MATRIX;\n    const aggregationParams = {\n      positions,\n      positions64xyLow,\n      weights,\n      changeFlags,\n      cellSize,\n      viewport,\n      gridTransformMatrix: transformMatrix,\n      countsBuffer,\n      maxCountBuffer,\n      projectPoints,\n      fp64\n    };\n\n    this._updateGridSize({viewport, cellSize, width, height});\n    if (this._hasGPUSupport && useGPU) {\n      return this._runAggregationOnGPU(aggregationParams);\n    }\n    if (useGPU) {\n      log.warn('ScreenGridAggregator: GPU Aggregation not supported, falling back to CPU');\n    }\n    return this._runAggregationOnCPU(aggregationParams);\n  }\n\n  // PRIVATE\n\n  _getAggregateData(opts) {\n    let {countsBuffer, maxCountBuffer} = opts;\n    countsBuffer = this.gridAggregationFramebuffer.readPixelsToBuffer({\n      buffer: countsBuffer,\n      type: GL.FLOAT\n    });\n    maxCountBuffer = this.allAggregrationFramebuffer.readPixelsToBuffer({\n      width: 1,\n      height: 1,\n      type: GL.FLOAT,\n      buffer: maxCountBuffer\n    });\n    return {\n      countsBuffer,\n      countsTexture: this.gridAggregationFramebuffer.texture,\n      maxCountBuffer,\n      maxCountTexture: this.allAggregrationFramebuffer.texture\n    };\n  }\n\n  _getAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'Gird-Aggregation-Model',\n      vs: fp64 ? AGGREGATE_TO_GRID_VS_FP64 : AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: fp64 ? ['fp64', 'project64'] : ['project32'],\n      shaderCache,\n      vertexCount: 0,\n      drawMode: GL.POINTS\n    });\n  }\n\n  _getAllAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'All-Aggregation-Model',\n      vs: AGGREGATE_ALL_VS_FP64,\n      fs: AGGREGATE_ALL_FS,\n      modules: ['fp64'],\n      shaderCache,\n      vertexCount: 1,\n      drawMode: GL.POINTS,\n      isInstanced: true,\n      instanceCount: 0,\n      attributes: {position: new Buffer(gl, {size: 2, data: new Float32Array([0, 0])})}\n    });\n  }\n\n  _projectPositions(opts) {\n    let {projectedPositions} = this.state;\n    if (!projectedPositions || opts.changeFlags.dataChanged || opts.changeFlags.viewportChanged) {\n      const {positions, viewport} = opts;\n      projectedPositions = [];\n      for (let index = 0; index < positions.length; index += 2) {\n        const [x, y] = viewport.projectFlat([positions[index], positions[index + 1]]);\n        projectedPositions.push(x, y);\n      }\n      this._setState({projectedPositions});\n    }\n  }\n\n  _renderAggregateData(opts) {\n    const {cellSize, viewport, gridTransformMatrix, projectPoints} = opts;\n    const {numCol, numRow, windowSize} = this.state;\n    const {\n      gl,\n      gridAggregationFramebuffer,\n      gridAggregationModel,\n      allAggregrationFramebuffer,\n      allAggregationModel\n    } = this;\n\n    const uProjectionMatrixFP64 = fp64ifyMatrix4(gridTransformMatrix);\n    const gridSize = [numCol, numRow];\n\n    gridAggregationFramebuffer.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gridAggregationModel.draw({\n      parameters: {\n        clearColor: [0, 0, 0, 0],\n        clearDepth: 0,\n        blend: true,\n        depthTest: false,\n        blendEquation: GL.FUNC_ADD,\n        blendFunc: [GL.ONE, GL.ONE]\n      },\n      moduleSettings: {\n        viewport\n      },\n      uniforms: {\n        windowSize,\n        cellSize,\n        gridSize,\n        uProjectionMatrix: gridTransformMatrix,\n        uProjectionMatrixFP64,\n        projectPoints\n      }\n    });\n    gridAggregationFramebuffer.unbind();\n\n    allAggregrationFramebuffer.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    allAggregationModel.draw({\n      parameters: {\n        clearColor: [0, 0, 0, 0],\n        clearDepth: 0,\n        blend: true,\n        depthTest: false,\n        blendEquation: [GL.FUNC_ADD, GL.MAX],\n        blendFunc: [GL.ONE, GL.ONE]\n      },\n      uniforms: {\n        uSampler: gridAggregationFramebuffer.texture,\n        gridSize\n      }\n    });\n    allAggregrationFramebuffer.unbind();\n  }\n\n  /* eslint-disable max-statements */\n  _runAggregationOnCPU(opts) {\n    const ELEMENTCOUNT = 4;\n    const {positions, weights, cellSize, projectPoints, gridTransformMatrix} = opts;\n    let {countsBuffer, maxCountBuffer} = opts;\n    const {numCol, numRow} = this.state;\n    // Each element contains 4 floats to match with GPU ouput\n    const counts = new Float32Array(numCol * numRow * ELEMENTCOUNT);\n\n    let pos = positions;\n    if (projectPoints) {\n      this._projectPositions(opts);\n      pos = this.state.projectedPositions;\n    }\n\n    counts.fill(0);\n    let maxWeight = 0;\n    let totalCount = 0;\n    let totalWeight = 0;\n    for (let index = 0; index < pos.length; index += 2) {\n      const gridPos = worldToPixels([pos[index], pos[index + 1], 0], gridTransformMatrix);\n      const x = gridPos[0];\n      const y = gridPos[1];\n      const weight = weights ? weights[index / 2] : 1;\n      assert(Number.isFinite(weight));\n      const colId = Math.floor(x / cellSize[0]);\n      const rowId = Math.floor(y / cellSize[1]);\n      if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n        const i = (colId + rowId * numCol) * ELEMENTCOUNT;\n        counts[i]++;\n        counts[i + 1] += weight;\n        totalCount += 1;\n        totalWeight += weight;\n        if (counts[i + 1] > maxWeight) {\n          maxWeight = counts[i + 1];\n        }\n      }\n    }\n    const maxCountBufferData = new Float32Array(ELEMENTCOUNT);\n    // Store total count value in Red/X channel\n    maxCountBufferData[0] = totalCount;\n    // Store total weight value in Green/Y channel\n    maxCountBufferData[1] = totalWeight;\n    // Store max weight value in alpha/W channel.\n    maxCountBufferData[3] = maxWeight;\n\n    // Load data to WebGL buffer.\n    if (countsBuffer) {\n      countsBuffer.subData({data: counts});\n    } else {\n      countsBuffer = new Buffer(this.gl, {data: counts});\n    }\n    if (maxCountBuffer) {\n      maxCountBuffer.subData({data: maxCountBufferData});\n    } else {\n      maxCountBuffer = new Buffer(this.gl, {data: maxCountBufferData});\n    }\n    return {\n      // Buffer objects\n      countsBuffer,\n      maxCountBuffer,\n      // ArrayView objects\n      countsData: counts,\n      maxCountData: maxCountBufferData,\n      // Return total aggregaton values to avoid UBO setup for WebGL1 cases\n      totalCount,\n      totalWeight,\n      maxWeight\n    };\n  }\n  /* eslint-enable max-statements */\n\n  _runAggregationOnGPU(opts) {\n    this._updateModels(opts);\n    this._renderAggregateData(opts);\n    return this._getAggregateData(opts);\n  }\n\n  // Update priveate state\n  _setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  _setupGPUResources() {\n    const {gl} = this;\n\n    this.gridAggregationFramebuffer = setupFramebuffer(gl, {id: 'GridAggregation'});\n    this.allAggregrationFramebuffer = setupFramebuffer(gl, {id: 'AllAggregation'});\n  }\n\n  _setupModels(fp64 = false) {\n    if (this.gridAggregationModel) {\n      this.gridAggregationModel.delete();\n    }\n    this.gridAggregationModel = this._getAggregationModel(fp64);\n    if (this.allAggregationModel) {\n      this.allAggregationModel.delete();\n    }\n    this.allAggregationModel = this._getAllAggregationModel(fp64);\n  }\n\n  /* eslint-disable max-statements */\n  _updateModels(opts) {\n    const {gl} = this;\n    const {positions, positions64xyLow, weights, changeFlags} = opts;\n    const {numCol, numRow} = this.state;\n\n    let {positionsBuffer, positions64xyLowBuffer, weightsBuffer} = this.state;\n\n    const aggregationModelAttributes = {};\n\n    let createPos64xyLow = false;\n    if (opts.fp64 !== this.state.fp64) {\n      this._setupModels(opts.fp64);\n      this._setState({fp64: opts.fp64});\n      if (opts.fp64) {\n        createPos64xyLow = true;\n      }\n    }\n\n    if (changeFlags.dataChanged || !positionsBuffer) {\n      if (positionsBuffer) {\n        positionsBuffer.delete();\n      }\n      if (weightsBuffer) {\n        weightsBuffer.delete();\n      }\n      positionsBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions)});\n      weightsBuffer = new Buffer(gl, {size: 1, data: new Float32Array(weights)});\n      createPos64xyLow = opts.fp64;\n      Object.assign(aggregationModelAttributes, {\n        positions: positionsBuffer,\n        weights: weightsBuffer\n      });\n      this.gridAggregationModel.setVertexCount(positions.length / 2);\n      this._setState({positionsBuffer, weightsBuffer});\n    }\n\n    if (createPos64xyLow) {\n      assert(positions64xyLow);\n      if (positions64xyLowBuffer) {\n        positions64xyLowBuffer.delete();\n      }\n      positions64xyLowBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions64xyLow)});\n      Object.assign(aggregationModelAttributes, {\n        positions64xyLow: positions64xyLowBuffer\n      });\n      this._setState({positions64xyLowBuffer});\n    }\n\n    this.gridAggregationModel.setAttributes(aggregationModelAttributes);\n\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n\n      const framebufferSize = {width: numCol, height: numRow};\n      this.gridAggregationFramebuffer.resize(framebufferSize);\n      this.allAggregrationFramebuffer.resize(framebufferSize);\n    }\n  }\n  /* eslint-enable max-statements */\n\n  _updateGridSize(opts) {\n    const {viewport, cellSize} = opts;\n    const width = opts.width || viewport.width;\n    const height = opts.height || viewport.height;\n    const numCol = Math.ceil(width / cellSize[0]);\n    const numRow = Math.ceil(height / cellSize[1]);\n    this._setState({numCol, numRow, windowSize: [width, height]});\n  }\n}\n\n// Helper methods.\n\nfunction setupFramebuffer(gl, opts) {\n  const {id} = opts;\n  const texture = new Texture2D(gl, {\n    data: null,\n    format: GL.RGBA32F,\n    type: GL.FLOAT,\n    border: 0,\n    mipmaps: false,\n    parameters: {\n      [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n      [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n    },\n    dataFormat: GL.RGBA\n  });\n\n  const fb = new Framebuffer(gl, {\n    id,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n\n  return fb;\n}\n"],"file":"gpu-grid-aggregator.js"}