"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("../utils/assert"));

var _luma = require("luma.gl");

var _seer = _interopRequireDefault(require("seer"));

var _layer = _interopRequireDefault(require("./layer"));

var _drawLayers2 = require("./draw-layers");

var _pickLayers = require("./pick-layers");

var _constants = require("../lifecycle/constants");

var _log = _interopRequireDefault(require("../utils/log"));

var _flatten = require("../utils/flatten");

var _probe = require("probe.gl");

var _viewport = _interopRequireDefault(require("../viewports/viewport"));

var _seerIntegration = require("./seer-integration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var LOG_PRIORITY_LIFECYCLE = 2;
var LOG_PRIORITY_LIFECYCLE_MINOR = 4; // CONTEXT IS EXPOSED TO LAYERS

var INITIAL_CONTEXT = Object.seal({
  layerManager: null,
  gl: null,
  // Settings
  useDevicePixels: true,
  // Exposed in case custom layers need to adjust sizes
  // General resources
  stats: null,
  // for tracking lifecycle performance
  // Make sure context.viewport is not empty on the first layer initialization
  viewport: new _viewport.default({
    id: 'DEFAULT-INITIAL-VIEWPORT'
  }),
  // Current viewport, exposed to layers for project* function
  // GL Resources
  shaderCache: null,
  pickingFBO: null,
  // Screen-size framebuffer that layers can reuse
  // State
  lastPickedInfo: {
    // For callback tracking and autohighlight
    index: -1,
    layerId: null
  },
  animationProps: null,
  userData: {} // Place for any custom app `context`

});

var layerName = function layerName(layer) {
  return layer instanceof _layer.default ? "".concat(layer) : !layer ? 'null' : 'invalid';
};

var LayerManager =
/*#__PURE__*/
function () {
  // eslint-disable-next-line
  function LayerManager(gl) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        stats = _ref.stats;

    _classCallCheck(this, LayerManager);

    // Currently deck.gl expects the DeckGL.layers array to be different
    // whenever React rerenders. If the same layers array is used, the
    // LayerManager's diffing algorithm will generate a fatal error and
    // break the rendering.
    // `this.lastRenderedLayers` stores the UNFILTERED layers sent
    // down to LayerManager, so that `layers` reference can be compared.
    // If it's the same across two React render calls, the diffing logic
    // will be skipped.
    this.lastRenderedLayers = [];
    this.layers = [];
    this.context = Object.assign({}, INITIAL_CONTEXT, {
      layerManager: this,
      gl: gl,
      // Enabling luma.gl Program caching using private API (_cachePrograms)
      shaderCache: new _luma._ShaderCache({
        gl: gl,
        _cachePrograms: true
      }),
      stats: stats || new _probe.Stats({
        id: 'deck.gl'
      })
    });
    this.layerFilter = null;
    this.drawPickingColors = false;
    this._needsRedraw = 'Initial render';
    this._needsUpdate = false;
    this._activateViewport = this._activateViewport.bind(this); // Seer integration

    this._initSeer = this._initSeer.bind(this);
    this._editSeer = this._editSeer.bind(this);
    Object.seal(this);
    (0, _seerIntegration.seerInitListener)(this._initSeer);
    (0, _seerIntegration.layerEditListener)(this._editSeer);
  } // Method to call when the layer manager is not needed anymore.
  // Currently used in the <DeckGL> componentWillUnmount lifecycle to unbind Seer listeners.


  _createClass(LayerManager, [{
    key: "finalize",
    value: function finalize() {
      _seer.default.removeListener(this._initSeer);

      _seer.default.removeListener(this._editSeer);
    } // Check if a redraw is needed

  }, {
    key: "needsRedraw",
    value: function needsRedraw() {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref2$clearRedrawFlag = _ref2.clearRedrawFlags,
          clearRedrawFlags = _ref2$clearRedrawFlag === void 0 ? true : _ref2$clearRedrawFlag;

      return this._checkIfNeedsRedraw(clearRedrawFlags);
    } // Check if a deep update of all layers is needed

  }, {
    key: "needsUpdate",
    value: function needsUpdate() {
      return this._needsUpdate;
    } // Layers will be redrawn (in next animation frame)

  }, {
    key: "setNeedsRedraw",
    value: function setNeedsRedraw(reason) {
      this._needsRedraw = this._needsRedraw || reason;
    } // Layers will be updated deeply (in next animation frame)
    // Potentially regenerating attributes and sub layers

  }, {
    key: "setNeedsUpdate",
    value: function setNeedsUpdate(reason) {
      this._needsUpdate = this._needsUpdate || reason;
    } // Gets an (optionally) filtered list of layers

  }, {
    key: "getLayers",
    value: function getLayers() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref3$layerIds = _ref3.layerIds,
          layerIds = _ref3$layerIds === void 0 ? null : _ref3$layerIds;

      // Filtering by layerId compares beginning of strings, so that sublayers will be included
      // Dependes on the convention of adding suffixes to the parent's layer name
      return layerIds ? this.layers.filter(function (layer) {
        return layerIds.find(function (layerId) {
          return layer.id.indexOf(layerId) === 0;
        });
      }) : this.layers;
    }
    /**
     * Set props needed for layer rendering and picking.
     * Parameters are to be passed as a single object, with the following values:
     * @param {Boolean} useDevicePixels
     */

    /* eslint-disable complexity, max-statements */

  }, {
    key: "setProps",
    value: function setProps(props) {
      // TODO - For now we set layers before viewports to preserve changeFlags
      if ('layers' in props) {
        this.setLayers(props.layers);
      }

      if ('layerFilter' in props) {
        if (this.layerFilter !== props.layerFilter) {
          this.layerFilter = props.layerFilter;
          this.setNeedsRedraw('layerFilter changed');
        }
      }

      if ('drawPickingColors' in props) {
        if (props.drawPickingColors !== this.drawPickingColors) {
          this.drawPickingColors = props.drawPickingColors;
          this.setNeedsRedraw('drawPickingColors changed');
        }
      } // A way for apps to add data to context that can be accessed in layers


      if ('userData' in props) {
        this.context.userData = props.userData;
      }

      if ('useDevicePixels' in props) {
        this.context.useDevicePixels = props.useDevicePixels;
      }
    }
    /* eslint-enable complexity, max-statements */
    // Supply a new layer list, initiating sublayer generation and layer matching

  }, {
    key: "setLayers",
    value: function setLayers(newLayers) {
      // TODO - something is generating state updates that cause rerender of the same
      if (newLayers === this.lastRenderedLayers) {
        _log.default.log(3, 'Ignoring layer update due to layer array not changed')();

        return this;
      }

      this.lastRenderedLayers = newLayers;
      newLayers = (0, _flatten.flatten)(newLayers, {
        filter: Boolean
      });
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = newLayers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var layer = _step.value;
          layer.context = this.context;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var _this$_updateLayers = this._updateLayers({
        oldLayers: this.layers,
        newLayers: newLayers
      }),
          error = _this$_updateLayers.error,
          generatedLayers = _this$_updateLayers.generatedLayers;

      this.layers = generatedLayers; // Throw first error found, if any

      if (error) {
        throw error;
      }

      return this;
    } // Update layers from last cycle if `setNeedsUpdate()` has been called

  }, {
    key: "updateLayers",
    value: function updateLayers() {
      // NOTE: For now, even if only some layer has changed, we update all layers
      // to ensure that layer id maps etc remain consistent even if different
      // sublayers are rendered
      var reason = this.needsUpdate();

      if (reason) {
        this.setNeedsRedraw("updating layers: ".concat(reason)); // HACK - Call with a copy of lastRenderedLayers to trigger a full update

        this.setLayers(_toConsumableArray(this.lastRenderedLayers));
      }
    } //
    // METHODS FOR LAYERS
    //
    // Draw all layers in all views

  }, {
    key: "drawLayers",
    value: function drawLayers(_ref4) {
      var _ref4$pass = _ref4.pass,
          pass = _ref4$pass === void 0 ? 'render to screen' : _ref4$pass,
          viewports = _ref4.viewports,
          views = _ref4.views,
          _ref4$redrawReason = _ref4.redrawReason,
          redrawReason = _ref4$redrawReason === void 0 ? 'unknown reason' : _ref4$redrawReason;
      var drawPickingColors = this.drawPickingColors;
      var _this$context = this.context,
          gl = _this$context.gl,
          useDevicePixels = _this$context.useDevicePixels; // render this viewport

      (0, _drawLayers2.drawLayers)(gl, {
        layers: this.layers,
        viewports: viewports,
        views: views,
        onViewportActive: this._activateViewport,
        useDevicePixels: useDevicePixels,
        drawPickingColors: drawPickingColors,
        pass: pass,
        layerFilter: this.layerFilter,
        redrawReason: redrawReason
      });
    } // Pick the closest info at given coordinate

  }, {
    key: "pickObject",
    value: function pickObject(_ref5) {
      var x = _ref5.x,
          y = _ref5.y,
          mode = _ref5.mode,
          _ref5$radius = _ref5.radius,
          radius = _ref5$radius === void 0 ? 0 : _ref5$radius,
          layerIds = _ref5.layerIds,
          viewports = _ref5.viewports,
          _ref5$depth = _ref5.depth,
          depth = _ref5$depth === void 0 ? 1 : _ref5$depth;
      var _this$context2 = this.context,
          gl = _this$context2.gl,
          useDevicePixels = _this$context2.useDevicePixels;
      var layers = this.getLayers({
        layerIds: layerIds
      });
      return (0, _pickLayers.pickObject)(gl, {
        // User params
        x: x,
        y: y,
        radius: radius,
        layers: layers,
        mode: mode,
        layerFilter: this.layerFilter,
        depth: depth,
        // Injected params
        viewports: viewports,
        onViewportActive: this._activateViewport,
        pickingFBO: this._getPickingBuffer(),
        lastPickedInfo: this.context.lastPickedInfo,
        useDevicePixels: useDevicePixels
      });
    } // Get all unique infos within a bounding box

  }, {
    key: "pickObjects",
    value: function pickObjects(_ref6) {
      var x = _ref6.x,
          y = _ref6.y,
          width = _ref6.width,
          height = _ref6.height,
          layerIds = _ref6.layerIds,
          viewports = _ref6.viewports;
      var _this$context3 = this.context,
          gl = _this$context3.gl,
          useDevicePixels = _this$context3.useDevicePixels;
      var layers = this.getLayers({
        layerIds: layerIds
      });
      return (0, _pickLayers.pickVisibleObjects)(gl, {
        x: x,
        y: y,
        width: width,
        height: height,
        layers: layers,
        layerFilter: this.layerFilter,
        mode: 'pickObjects',
        viewports: viewports,
        onViewportActive: this._activateViewport,
        pickingFBO: this._getPickingBuffer(),
        useDevicePixels: useDevicePixels
      });
    } //
    // PRIVATE METHODS
    //

  }, {
    key: "_checkIfNeedsRedraw",
    value: function _checkIfNeedsRedraw(clearRedrawFlags) {
      var redraw = this._needsRedraw;

      if (clearRedrawFlags) {
        this._needsRedraw = false;
      } // This layers list doesn't include sublayers, relying on composite layers


      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.layers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var layer = _step2.value;
          // Call every layer to clear their flags
          var layerNeedsRedraw = layer.getNeedsRedraw({
            clearRedrawFlags: clearRedrawFlags
          });
          redraw = redraw || layerNeedsRedraw;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return redraw;
    } // Make a viewport "current" in layer context, updating viewportChanged flags

  }, {
    key: "_activateViewport",
    value: function _activateViewport(viewport) {
      var oldViewport = this.context.viewport;
      var viewportChanged = !oldViewport || !viewport.equals(oldViewport);

      if (viewportChanged) {
        _log.default.log(4, 'Viewport changed', viewport)();

        this.context.viewport = viewport; // Update layers states
        // Let screen space layers update their state based on viewport

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = this.layers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var layer = _step3.value;
            layer.setChangeFlags({
              viewportChanged: 'Viewport changed'
            });

            this._updateLayer(layer);
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      }

      (0, _assert.default)(this.context.viewport, 'LayerManager: viewport not set');
      return this;
    }
  }, {
    key: "_getPickingBuffer",
    value: function _getPickingBuffer() {
      var gl = this.context.gl; // Create a frame buffer if not already available

      this.context.pickingFBO = this.context.pickingFBO || new _luma.Framebuffer(gl); // Resize it to current canvas size (this is a noop if size hasn't changed)

      this.context.pickingFBO.resize({
        width: gl.canvas.width,
        height: gl.canvas.height
      });
      return this.context.pickingFBO;
    } // Match all layers, checking for caught errors
    // To avoid having an exception in one layer disrupt other layers
    // TODO - mark layers with exceptions as bad and remove from rendering cycle?

  }, {
    key: "_updateLayers",
    value: function _updateLayers(_ref7) {
      var oldLayers = _ref7.oldLayers,
          newLayers = _ref7.newLayers;
      // Create old layer map
      var oldLayerMap = {};
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = oldLayers[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var oldLayer = _step4.value;

          if (oldLayerMap[oldLayer.id]) {
            _log.default.warn("Multiple old layers with same id ".concat(layerName(oldLayer)))();
          } else {
            oldLayerMap[oldLayer.id] = oldLayer;
          }
        } // Allocate array for generated layers

      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      var generatedLayers = []; // Match sublayers

      var error = this._updateSublayersRecursively({
        newLayers: newLayers,
        oldLayerMap: oldLayerMap,
        generatedLayers: generatedLayers
      }); // Finalize unmatched layers


      var error2 = this._finalizeOldLayers(oldLayerMap);

      this._needsUpdate = false;
      var firstError = error || error2;
      return {
        error: firstError,
        generatedLayers: generatedLayers
      };
    } // Note: adds generated layers to `generatedLayers` array parameter

  }, {
    key: "_updateSublayersRecursively",
    value: function _updateSublayersRecursively(_ref8) {
      var newLayers = _ref8.newLayers,
          oldLayerMap = _ref8.oldLayerMap,
          generatedLayers = _ref8.generatedLayers;
      var error = null;
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = newLayers[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var newLayer = _step5.value;
          newLayer.context = this.context; // Given a new coming layer, find its matching old layer (if any)

          var oldLayer = oldLayerMap[newLayer.id];

          if (oldLayer === null) {
            // null, rather than undefined, means this id was originally there
            _log.default.warn("Multiple new layers with same id ".concat(layerName(newLayer)))();
          } // Remove the old layer from candidates, as it has been matched with this layer


          oldLayerMap[newLayer.id] = null;
          var sublayers = null; // We must not generate exceptions until after layer matching is complete

          try {
            if (!oldLayer) {
              this._initializeLayer(newLayer);

              (0, _seerIntegration.initLayerInSeer)(newLayer); // Initializes layer in seer chrome extension (if connected)
            } else {
              this._transferLayerState(oldLayer, newLayer);

              this._updateLayer(newLayer);

              (0, _seerIntegration.updateLayerInSeer)(newLayer); // Updates layer in seer chrome extension (if connected)
            }

            generatedLayers.push(newLayer); // Call layer lifecycle method: render sublayers

            sublayers = newLayer.isComposite && newLayer.getSubLayers(); // End layer lifecycle method: render sublayers
          } catch (err) {
            _log.default.warn("error during matching of ".concat(layerName(newLayer)), err);

            error = error || err; // Record first exception
          }

          if (sublayers) {
            this._updateSublayersRecursively({
              newLayers: sublayers,
              oldLayerMap: oldLayerMap,
              generatedLayers: generatedLayers
            });
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return error;
    } // Finalize any old layers that were not matched

  }, {
    key: "_finalizeOldLayers",
    value: function _finalizeOldLayers(oldLayerMap) {
      var error = null;

      for (var layerId in oldLayerMap) {
        var layer = oldLayerMap[layerId];

        if (layer) {
          error = error || this._finalizeLayer(layer);
        }
      }

      return error;
    } // EXCEPTION SAFE LAYER ACCESS
    // Initializes a single layer, calling layer methods

  }, {
    key: "_initializeLayer",
    value: function _initializeLayer(layer) {
      _log.default.log(LOG_PRIORITY_LIFECYCLE, "initializing ".concat(layerName(layer)))();

      var error = null;

      try {
        layer._initialize();

        layer.lifecycle = _constants.LIFECYCLE.INITIALIZED;
      } catch (err) {
        _log.default.warn("error while initializing ".concat(layerName(layer), "\n"), err)();

        error = error || err; // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?
      } // Set back pointer (used in picking)


      layer.internalState.layer = layer; // Save layer on model for picking purposes
      // store on model.userData rather than directly on model

      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = layer.getModels()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var model = _step6.value;
          model.userData.layer = layer;
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      return error;
    }
  }, {
    key: "_transferLayerState",
    value: function _transferLayerState(oldLayer, newLayer) {
      newLayer._transferState(oldLayer);

      newLayer.lifecycle = _constants.LIFECYCLE.MATCHED;

      if (newLayer !== oldLayer) {
        _log.default.log(LOG_PRIORITY_LIFECYCLE_MINOR, "matched ".concat(layerName(newLayer)), oldLayer, '->', newLayer)();

        oldLayer.lifecycle = _constants.LIFECYCLE.AWAITING_GC;
      } else {
        _log.default.log(LOG_PRIORITY_LIFECYCLE_MINOR, "Matching layer is unchanged ".concat(newLayer.id))();
      }
    } // Updates a single layer, cleaning all flags

  }, {
    key: "_updateLayer",
    value: function _updateLayer(layer) {
      _log.default.log(LOG_PRIORITY_LIFECYCLE_MINOR, "updating ".concat(layer, " because: ").concat(layer.printChangeFlags()))();

      var error = null;

      try {
        layer._update();
      } catch (err) {
        _log.default.warn("error during update of ".concat(layerName(layer)), err)(); // Save first error


        error = err;
      }

      return error;
    } // Finalizes a single layer

  }, {
    key: "_finalizeLayer",
    value: function _finalizeLayer(layer) {
      (0, _assert.default)(layer.lifecycle !== _constants.LIFECYCLE.AWAITING_FINALIZATION);
      layer.lifecycle = _constants.LIFECYCLE.AWAITING_FINALIZATION;
      var error = null;
      this.setNeedsRedraw("finalized ".concat(layerName(layer)));

      try {
        layer._finalize();
      } catch (err) {
        _log.default.warn("error during finalization of ".concat(layerName(layer)), err)();

        error = err;
      }

      layer.lifecycle = _constants.LIFECYCLE.FINALIZED;

      _log.default.log(LOG_PRIORITY_LIFECYCLE, "finalizing ".concat(layerName(layer)));

      return error;
    } // SEER INTEGRATION

    /**
     * Called upon Seer initialization, manually sends layers data.
     */

  }, {
    key: "_initSeer",
    value: function _initSeer() {
      this.layers.forEach(function (layer) {
        (0, _seerIntegration.initLayerInSeer)(layer);
        (0, _seerIntegration.updateLayerInSeer)(layer);
      });
    }
    /**
     * On Seer property edition, set override and update layers.
     */

  }, {
    key: "_editSeer",
    value: function _editSeer(payload) {
      if (payload.type !== 'edit' || payload.valuePath[0] !== 'props') {
        return;
      }

      (0, _seerIntegration.setPropOverrides)(payload.itemKey, payload.valuePath.slice(1), payload.value);
      var newLayers = this.layers.map(function (layer) {
        return new layer.constructor(layer.props);
      });
      this.updateLayers({
        newLayers: newLayers
      });
    }
  }]);

  return LayerManager;
}();

exports.default = LayerManager;
//# sourceMappingURL=layer-manager.js.map