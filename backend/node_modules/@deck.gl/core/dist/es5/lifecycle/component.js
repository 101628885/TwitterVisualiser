"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _constants = require("../lifecycle/constants");

var _createProps = require("../lifecycle/create-props");

var _componentState = _interopRequireDefault(require("./component-state"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var defaultProps = {};
var counter = 0;

var Component =
/*#__PURE__*/
function () {
  function Component()
  /* ...propObjects */
  {
    _classCallCheck(this, Component);

    // Merge supplied props with default props and freeze them.

    /* eslint-disable prefer-spread */
    this.props = _createProps.createProps.apply(this, arguments);
    /* eslint-enable prefer-spread */
    // Define all members before layer is sealed

    this.id = this.props.id; // The layer's id, used for matching with layers from last render cycle

    this.count = counter++; // Keep track of how many layer instances you are generating

    this.lifecycle = _constants.LIFECYCLE.NO_STATE; // Helps track and debug the life cycle of the layers

    this.parent = null; // reference to the composite layer parent that rendered this layer

    this.context = null; // Will reference layer manager's context, contains state shared by layers

    this.state = null; // Will be set to the shared layer state object during layer matching

    this.internalState = null; // Seal the layer

    Object.seal(this);
  } // clone this layer with modified props


  _createClass(Component, [{
    key: "clone",
    value: function clone(newProps) {
      return new this.constructor(Object.assign({}, this.props, newProps));
    }
  }, {
    key: "_initState",
    // PROTECTED METHODS, override in subclass
    value: function _initState() {
      this.internalState = new _componentState.default({});
    }
  }, {
    key: "stats",
    get: function get() {
      return this.internalState.stats;
    }
  }]);

  return Component;
}();

exports.default = Component;
Component.defaultProps = defaultProps;
//# sourceMappingURL=component.js.map