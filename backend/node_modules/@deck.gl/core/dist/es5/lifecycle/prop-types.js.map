{"version":3,"sources":["../../../src/lifecycle/prop-types.js"],"names":["TYPE_DEFINITIONS","boolean","validate","value","propType","number","validateType","Number","isFinite","max","min","parsePropTypes","propDefs","propTypes","defaultProps","Object","entries","propName","propDef","parsePropType","name","getTypeOf","normalizePropDefinition","parsePropDefinition","guessArrayType","type","guessNumberType","array","test","length","assign","typeDefinition","typeValidator","isKnownProp","Math","Array","isArray","ArrayBuffer","isView"],"mappings":"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","sourcesContent":["import assert from '../utils/assert';\n\nconst TYPE_DEFINITIONS = {\n  boolean: {\n    validate(value, propType) {\n      return true;\n    }\n  },\n  number: {\n    validateType(value, propType) {\n      return (\n        'value' in propType &&\n        (!('max' in propType) || Number.isFinite(propType.max)) &&\n        (!('min' in propType) || Number.isFinite(propType.min))\n      );\n    },\n    validate(value, propType) {\n      return (\n        Number.isFinite(value) &&\n        (!('max' in propType) || value <= propType.max) &&\n        (!('min' in propType) || value >= propType.min)\n      );\n    }\n  }\n};\n\nexport function parsePropTypes(propDefs) {\n  const propTypes = {};\n  const defaultProps = {};\n  for (const [propName, propDef] of Object.entries(propDefs)) {\n    const propType = parsePropType(propName, propDef);\n    propTypes[propName] = propType;\n    defaultProps[propName] = propType.value;\n  }\n  return {propTypes, defaultProps};\n}\n\n// Parses one property definition entry. Either contains:\n// * a valid prop type object ({type, ...})\n// * or just a default value, in which case type and name inference is used\nfunction parsePropType(name, propDef) {\n  switch (getTypeOf(propDef)) {\n    case 'object':\n      propDef = normalizePropDefinition(name, propDef);\n      return parsePropDefinition(propDef);\n\n    case 'array':\n      return guessArrayType(name, propDef);\n\n    case 'boolean':\n      return {name, type: 'boolean', value: propDef};\n\n    case 'number':\n      return guessNumberType(name, propDef);\n\n    case 'function':\n      return {name, type: 'function', value: propDef};\n    // return guessFunctionType(name, propDef);\n\n    default:\n      return {name, type: 'unknown', value: propDef};\n  }\n}\n\nfunction guessArrayType(name, array) {\n  if (/color/i.test(name) && (array.length === 3 || array.length === 4)) {\n    return {name, type: 'color', value: array};\n  }\n  return {name, type: 'array', value: array};\n}\n\nfunction normalizePropDefinition(name, propDef) {\n  if (!('type' in propDef)) {\n    if (!('value' in propDef)) {\n      // If no type and value this object is likely the value\n      return {name, type: 'object', value: propDef};\n    }\n    return Object.assign({name, type: getTypeOf(propDef.value)}, propDef);\n  }\n  return Object.assign({name}, propDef);\n}\n\nfunction parsePropDefinition(propDef) {\n  const {type} = propDef;\n  const typeDefinition = TYPE_DEFINITIONS[type] || {};\n  const {typeValidator} = typeDefinition;\n  if (typeValidator) {\n    assert(typeValidator(propDef), 'Illegal prop type');\n  }\n\n  return propDef;\n}\n\nfunction guessNumberType(name, value) {\n  const isKnownProp =\n    /radius|scale|width|height|pixel|size|miter/i.test(name) && /^((?!scale).)*$/.test(name);\n  const max = isKnownProp ? 100 : 1;\n  const min = 0;\n  return {\n    name,\n    type: 'number',\n    max: Math.max(value, max),\n    min: Math.min(value, min),\n    value\n  };\n}\n\n// improved version of javascript typeof that can distinguish arrays and null values\nfunction getTypeOf(value) {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    return 'array';\n  }\n  if (value === null) {\n    return 'null';\n  }\n  return typeof value;\n}\n"],"file":"prop-types.js"}