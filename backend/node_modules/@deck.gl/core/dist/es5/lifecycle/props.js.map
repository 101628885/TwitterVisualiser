{"version":3,"sources":["../../../src/lifecycle/props.js"],"names":["diffProps","props","oldProps","propsChangedReason","compareProps","newProps","ignoreProps","data","updateTriggers","dataChangedReason","diffDataProps","updateTriggersChangedReason","diffUpdateTriggers","dataChanged","propsChanged","updateTriggersChanged","shallowCompareProps","triggerName","undefined","key","equals","call","type","dataComparator","diffReason","diffUpdateTrigger","all","triggerChanged","reason","newTriggers","oldTriggers"],"mappings":";;;;;;;;AAAA;;;;;;AAEA;AACO,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAoC;AACzC;AACA,MAAMC,kBAAkB,GAAGC,YAAY,CAAC;AACtCC,IAAAA,QAAQ,EAAEJ,KAD4B;AAEtCC,IAAAA,QAAQ,EAARA,QAFsC;AAGtCI,IAAAA,WAAW,EAAE;AAACC,MAAAA,IAAI,EAAE,IAAP;AAAaC,MAAAA,cAAc,EAAE;AAA7B;AAHyB,GAAD,CAAvC,CAFyC,CAQzC;;AACA,MAAMC,iBAAiB,GAAGC,aAAa,CAACT,KAAD,EAAQC,QAAR,CAAvC,CATyC,CAWzC;AACA;;AACA,MAAIS,2BAA2B,GAAG,KAAlC;;AACA,MAAI,CAACF,iBAAL,EAAwB;AACtBE,IAAAA,2BAA2B,GAAGC,kBAAkB,CAACX,KAAD,EAAQC,QAAR,CAAhD;AACD;;AAED,SAAO;AACLW,IAAAA,WAAW,EAAEJ,iBADR;AAELK,IAAAA,YAAY,EAAEX,kBAFT;AAGLY,IAAAA,qBAAqB,EAAEJ;AAHlB,GAAP;AAKD;AAED;;;;;;;;;;AASA;;;AACO,SAASP,YAAT,GAMC;AAAA,iFAAJ,EAAI;AAAA,MALNC,QAKM,QALNA,QAKM;AAAA,MAJNH,QAIM,QAJNA,QAIM;AAAA,8BAHNI,WAGM;AAAA,MAHNA,WAGM,iCAHQ,EAGR;AAAA,mCAFNU,mBAEM;AAAA,MAFNA,mBAEM,sCAFgB,EAEhB;AAAA,8BADNC,WACM;AAAA,MADNA,WACM,iCADQ,OACR;;AACN,uBAAOf,QAAQ,KAAKgB,SAAb,IAA0Bb,QAAQ,KAAKa,SAA9C,EAAyD,mBAAzD,EADM,CAGN;;AACA,MAAIhB,QAAQ,KAAKG,QAAjB,EAA2B;AACzB,WAAO,IAAP;AACD,GANK,CAQN;;;AACA,MAAI,QAAOA,QAAP,MAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AACrD,qBAAUY,WAAV;AACD;;AAED,MAAI,QAAOf,QAAP,MAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AACrD,qBAAUe,WAAV;AACD,GAfK,CAiBN;;;AACA,OAAK,IAAME,GAAX,IAAkBjB,QAAlB,EAA4B;AAC1B,QAAI,EAAEiB,GAAG,IAAIb,WAAT,CAAJ,EAA2B;AACzB,UAAI,EAAEa,GAAG,IAAId,QAAT,CAAJ,EAAwB;AACtB,yBAAUY,WAAV,cAAyBE,GAAzB,uBAAyCjB,QAAQ,CAACiB,GAAD,CAAjD;AACD,OAHwB,CAKzB;;;AACA,UAAIC,MAAM,GAAGf,QAAQ,CAACc,GAAD,CAAR,IAAiBjB,QAAQ,CAACiB,GAAD,CAAzB,IAAkCd,QAAQ,CAACc,GAAD,CAAR,CAAcC,MAA7D;;AACA,UAAIA,MAAM,IAAI,CAACA,MAAM,CAACC,IAAP,CAAYhB,QAAQ,CAACc,GAAD,CAApB,EAA2BjB,QAAQ,CAACiB,GAAD,CAAnC,CAAf,EAA0D;AACxD,yBAAUF,WAAV,cAAyBE,GAAzB,8BAAgDjB,QAAQ,CAACiB,GAAD,CAAxD,iBAAoEd,QAAQ,CAACc,GAAD,CAA5E;AACD,OATwB,CAWzB;;;AACA,UAAIA,GAAG,IAAIH,mBAAX,EAAgC;AAC9B,YAAMM,IAAI,WAAUjB,QAAQ,CAACc,GAAD,CAAlB,CAAV;;AACA,YAAIG,IAAI,KAAK,UAAT,IAAuB,OAAOpB,QAAQ,CAACiB,GAAD,CAAf,KAAyB,UAApD,EAAgE;AAC9DC,UAAAA,MAAM,GAAG,IAAT;AACD;AACF;;AAED,UAAI,CAACA,MAAD,IAAWlB,QAAQ,CAACiB,GAAD,CAAR,KAAkBd,QAAQ,CAACc,GAAD,CAAzC,EAAgD;AAC9C,yBAAUF,WAAV,cAAyBE,GAAzB,iCAAmDjB,QAAQ,CAACiB,GAAD,CAA3D,iBAAuEd,QAAQ,CAACc,GAAD,CAA/E;AACD;AACF;AACF,GA1CK,CA4CN;;;AACA,OAAK,IAAMA,IAAX,IAAkBd,QAAlB,EAA4B;AAC1B,QAAI,EAAEc,IAAG,IAAIb,WAAT,CAAJ,EAA2B;AACzB,UAAI,EAAEa,IAAG,IAAIjB,QAAT,CAAJ,EAAwB;AACtB,yBAAUe,WAAV,cAAyBE,IAAzB,kCAAoDd,QAAQ,CAACc,IAAD,CAA5D;AACD;AACF;AACF;;AAED,SAAO,IAAP;AACD;AACD;AAEA;AAEA;AACA;;;AACA,SAAST,aAAT,CAAuBT,KAAvB,EAA8BC,QAA9B,EAAwC;AACtC,MAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrB,WAAO,gCAAP;AACD,GAHqC,CAKtC;;;AALsC,MAM/BqB,cAN+B,GAMbtB,KANa,CAM/BsB,cAN+B;;AAOtC,MAAIA,cAAJ,EAAoB;AAClB,QAAI,CAACA,cAAc,CAACtB,KAAK,CAACM,IAAP,EAAaL,QAAQ,CAACK,IAAtB,CAAnB,EAAgD;AAC9C,aAAO,mCAAP;AACD,KAHiB,CAIlB;;AACD,GALD,MAKO,IAAIN,KAAK,CAACM,IAAN,KAAeL,QAAQ,CAACK,IAA5B,EAAkC;AACvC,WAAO,mCAAP;AACD;;AAED,SAAO,IAAP;AACD,C,CAED;AACA;;;AACA,SAASK,kBAAT,CAA4BX,KAA5B,EAAmCC,QAAnC,EAA6C;AAC3C,MAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrB,WAAO,gCAAP;AACD,GAH0C,CAK3C;;;AACA,MAAI,SAASD,KAAK,CAACO,cAAnB,EAAmC;AACjC,QAAMgB,UAAU,GAAGC,iBAAiB,CAACvB,QAAD,EAAWD,KAAX,EAAkB,KAAlB,CAApC;;AACA,QAAIuB,UAAJ,EAAgB;AACd,aAAO;AAACE,QAAAA,GAAG,EAAE;AAAN,OAAP;AACD;AACF;;AAED,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAIC,MAAM,GAAG,KAAb,CAd2C,CAe3C;;AACA,OAAK,IAAMX,WAAX,IAA0BhB,KAAK,CAACO,cAAhC,EAAgD;AAC9C,QAAIS,WAAW,KAAK,KAApB,EAA2B;AACzB,UAAMO,WAAU,GAAGC,iBAAiB,CAACvB,QAAD,EAAWD,KAAX,EAAkBgB,WAAlB,CAApC;;AACA,UAAIO,WAAJ,EAAgB;AACdG,QAAAA,cAAc,CAACV,WAAD,CAAd,GAA8B,IAA9B;AACAW,QAAAA,MAAM,GAAGD,cAAT;AACD;AACF;AACF;;AAED,SAAOC,MAAP;AACD;;AAED,SAASH,iBAAT,CAA2BxB,KAA3B,EAAkCC,QAAlC,EAA4Ce,WAA5C,EAAyD;AACvD,MAAMY,WAAW,GAAG5B,KAAK,CAACO,cAAN,CAAqBS,WAArB,KAAqC,EAAzD;AACA,MAAMa,WAAW,GAAG5B,QAAQ,CAACM,cAAT,CAAwBS,WAAxB,KAAwC,EAA5D;AACA,MAAMO,UAAU,GAAGpB,YAAY,CAAC;AAC9BF,IAAAA,QAAQ,EAAE4B,WADoB;AAE9BzB,IAAAA,QAAQ,EAAEwB,WAFoB;AAG9BZ,IAAAA,WAAW,EAAXA;AAH8B,GAAD,CAA/B;AAKA,SAAOO,UAAP;AACD","sourcesContent":["import assert from '../utils/assert';\n\n// Returns an object with \"change flags\", either false or strings indicating reason for change\nexport function diffProps(props, oldProps) {\n  // First check if any props have changed (ignore props that will be examined separately)\n  const propsChangedReason = compareProps({\n    newProps: props,\n    oldProps,\n    ignoreProps: {data: null, updateTriggers: null}\n  });\n\n  // Now check if any data related props have changed\n  const dataChangedReason = diffDataProps(props, oldProps);\n\n  // Check update triggers to determine if any attributes need regeneration\n  // Note - if data has changed, all attributes will need regeneration, so skip this step\n  let updateTriggersChangedReason = false;\n  if (!dataChangedReason) {\n    updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);\n  }\n\n  return {\n    dataChanged: dataChangedReason,\n    propsChanged: propsChangedReason,\n    updateTriggersChanged: updateTriggersChangedReason\n  };\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * @param {Object} opt.oldProps - object with old key/value pairs\n * @param {Object} opt.newProps - object with new key/value pairs\n * @param {Object} opt.ignoreProps={} - object, keys that should not be compared\n * @returns {null|String} - null when values of all keys are strictly equal.\n *   if unequal, returns a string explaining what changed.\n */\n/* eslint-disable max-statements, max-depth, complexity */\nexport function compareProps({\n  newProps,\n  oldProps,\n  ignoreProps = {},\n  shallowCompareProps = {},\n  triggerName = 'props'\n} = {}) {\n  assert(oldProps !== undefined && newProps !== undefined, 'compareProps args');\n\n  // shallow equality => deep equality\n  if (oldProps === newProps) {\n    return null;\n  }\n\n  // TODO - do we need these checks? Should never happen...\n  if (typeof newProps !== 'object' || newProps === null) {\n    return `${triggerName} changed shallowly`;\n  }\n\n  if (typeof oldProps !== 'object' || oldProps === null) {\n    return `${triggerName} changed shallowly`;\n  }\n\n  // Test if new props different from old props\n  for (const key in oldProps) {\n    if (!(key in ignoreProps)) {\n      if (!(key in newProps)) {\n        return `${triggerName}.${key} dropped: ${oldProps[key]} -> undefined`;\n      }\n\n      // If object has an equals function, invoke it\n      let equals = newProps[key] && oldProps[key] && newProps[key].equals;\n      if (equals && !equals.call(newProps[key], oldProps[key])) {\n        return `${triggerName}.${key} changed deeply: ${oldProps[key]} -> ${newProps[key]}`;\n      }\n\n      // If both new and old value are functions, ignore differences\n      if (key in shallowCompareProps) {\n        const type = typeof newProps[key];\n        if (type === 'function' && typeof oldProps[key] === 'function') {\n          equals = true;\n        }\n      }\n\n      if (!equals && oldProps[key] !== newProps[key]) {\n        return `${triggerName}.${key} changed shallowly: ${oldProps[key]} -> ${newProps[key]}`;\n      }\n    }\n  }\n\n  // Test if any new props have been added\n  for (const key in newProps) {\n    if (!(key in ignoreProps)) {\n      if (!(key in oldProps)) {\n        return `${triggerName}.${key} added: undefined -> ${newProps[key]}`;\n      }\n    }\n  }\n\n  return null;\n}\n/* eslint-enable max-statements, max-depth, complexity */\n\n// HELPERS\n\n// The comparison of the data prop requires special handling\n// the dataComparator should be used if supplied\nfunction diffDataProps(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  // Support optional app defined comparison of data\n  const {dataComparator} = props;\n  if (dataComparator) {\n    if (!dataComparator(props.data, oldProps.data)) {\n      return 'Data comparator detected a change';\n    }\n    // Otherwise, do a shallow equal on props\n  } else if (props.data !== oldProps.data) {\n    return 'A new data container was supplied';\n  }\n\n  return null;\n}\n\n// Checks if any update triggers have changed\n// also calls callback to invalidate attributes accordingly.\nfunction diffUpdateTriggers(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  // If the 'all' updateTrigger fires, ignore testing others\n  if ('all' in props.updateTriggers) {\n    const diffReason = diffUpdateTrigger(oldProps, props, 'all');\n    if (diffReason) {\n      return {all: true};\n    }\n  }\n\n  const triggerChanged = {};\n  let reason = false;\n  // If the 'all' updateTrigger didn't fire, need to check all others\n  for (const triggerName in props.updateTriggers) {\n    if (triggerName !== 'all') {\n      const diffReason = diffUpdateTrigger(oldProps, props, triggerName);\n      if (diffReason) {\n        triggerChanged[triggerName] = true;\n        reason = triggerChanged;\n      }\n    }\n  }\n\n  return reason;\n}\n\nfunction diffUpdateTrigger(props, oldProps, triggerName) {\n  const newTriggers = props.updateTriggers[triggerName] || {};\n  const oldTriggers = oldProps.updateTriggers[triggerName] || {};\n  const diffReason = compareProps({\n    oldProps: oldTriggers,\n    newProps: newTriggers,\n    triggerName\n  });\n  return diffReason;\n}\n"],"file":"props.js"}