"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lighting = _interopRequireDefault(require("./lighting.glsl"));

var _project = _interopRequireDefault(require("../project/project"));

var _constants = require("../../lib/constants");

var _projectFunctions = require("../project/project-functions");

var _constants2 = require("../project/constants");

var _memoize = _interopRequireDefault(require("../../utils/memoize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
var _default = {
  name: 'lighting',
  dependencies: [_project.default],
  vs: _lighting.default,
  getUniforms: getUniforms,
  deprecations: [// Deprecated lighting functions
  {
    type: 'function',
    old: 'getLightWeight',
    new: 'lighting_getLightWeight',
    deprecated: true
  }]
};
exports.default = _default;
var INITIAL_MODULE_OPTIONS = {};
var DEFAULT_LIGHTS_POSITION = [-122.45, 37.75, 8000];
var DEFAULT_LIGHTS_STRENGTH = [2.0, 0.0];
var DEFAULT_AMBIENT_RATIO = 0.4;
var DEFAULT_DIFFUSE_RATIO = 0.6;
var DEFAULT_SPECULAR_RATIO = 0.8;
var DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];
var getMemoizedLightPositions = (0, _memoize.default)(preprojectLightPositions); // TODO: support partial update, e.g.
// `lightedModel.setModuleParameters({diffuseRatio: 0.3});`

function getUniforms() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_MODULE_OPTIONS;
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!opts.lightSettings) {
    return {};
  }

  var _opts$lightSettings = opts.lightSettings,
      _opts$lightSettings$n = _opts$lightSettings.numberOfLights,
      numberOfLights = _opts$lightSettings$n === void 0 ? 1 : _opts$lightSettings$n,
      _opts$lightSettings$l = _opts$lightSettings.lightsPosition,
      lightsPosition = _opts$lightSettings$l === void 0 ? DEFAULT_LIGHTS_POSITION : _opts$lightSettings$l,
      _opts$lightSettings$l2 = _opts$lightSettings.lightsStrength,
      lightsStrength = _opts$lightSettings$l2 === void 0 ? DEFAULT_LIGHTS_STRENGTH : _opts$lightSettings$l2,
      _opts$lightSettings$c = _opts$lightSettings.coordinateSystem,
      fromCoordinateSystem = _opts$lightSettings$c === void 0 ? _constants.COORDINATE_SYSTEM.LNGLAT : _opts$lightSettings$c,
      _opts$lightSettings$c2 = _opts$lightSettings.coordinateOrigin,
      fromCoordinateOrigin = _opts$lightSettings$c2 === void 0 ? DEFAULT_COORDINATE_ORIGIN : _opts$lightSettings$c2,
      _opts$lightSettings$m = _opts$lightSettings.modelMatrix,
      modelMatrix = _opts$lightSettings$m === void 0 ? null : _opts$lightSettings$m,
      _opts$lightSettings$a = _opts$lightSettings.ambientRatio,
      ambientRatio = _opts$lightSettings$a === void 0 ? DEFAULT_AMBIENT_RATIO : _opts$lightSettings$a,
      _opts$lightSettings$d = _opts$lightSettings.diffuseRatio,
      diffuseRatio = _opts$lightSettings$d === void 0 ? DEFAULT_DIFFUSE_RATIO : _opts$lightSettings$d,
      _opts$lightSettings$s = _opts$lightSettings.specularRatio,
      specularRatio = _opts$lightSettings$s === void 0 ? DEFAULT_SPECULAR_RATIO : _opts$lightSettings$s;
  var coordinateSystem = opts.coordinateSystem;
  var coordinateOrigin = opts.coordinateOrigin;

  if (context.project_uCoordinateSystem === _constants2.PROJECT_COORDINATE_SYSTEM.LNGLAT_AUTO_OFFSET) {
    coordinateSystem = _constants.COORDINATE_SYSTEM.LNGLAT_OFFSETS;
    coordinateOrigin = context.project_coordinate_origin;
  } // Pre-project light positions


  var lightsPositionWorld = getMemoizedLightPositions({
    lightsPosition: lightsPosition,
    numberOfLights: numberOfLights,
    viewport: opts.viewport,
    modelMatrix: modelMatrix,
    coordinateSystem: coordinateSystem,
    coordinateOrigin: coordinateOrigin,
    fromCoordinateSystem: fromCoordinateSystem,
    fromCoordinateOrigin: fromCoordinateOrigin
  });
  return {
    lighting_lightPositions: lightsPositionWorld,
    lighting_lightStrengths: lightsStrength,
    lighting_ambientRatio: ambientRatio,
    lighting_diffuseRatio: diffuseRatio,
    lighting_specularRatio: specularRatio,
    lighting_numberOfLights: numberOfLights
  };
} // Pre-project light positions


function preprojectLightPositions(_ref) {
  var lightsPosition = _ref.lightsPosition,
      numberOfLights = _ref.numberOfLights,
      viewport = _ref.viewport,
      modelMatrix = _ref.modelMatrix,
      coordinateSystem = _ref.coordinateSystem,
      coordinateOrigin = _ref.coordinateOrigin,
      fromCoordinateSystem = _ref.fromCoordinateSystem,
      fromCoordinateOrigin = _ref.fromCoordinateOrigin;
  var projectionParameters = {
    viewport: viewport,
    modelMatrix: modelMatrix,
    coordinateSystem: coordinateSystem,
    coordinateOrigin: coordinateOrigin,
    fromCoordinateSystem: fromCoordinateSystem,
    fromCoordinateOrigin: fromCoordinateOrigin
  };
  var lightsPositionWorld = [];

  for (var i = 0; i < numberOfLights; i++) {
    var position = (0, _projectFunctions.projectPosition)(lightsPosition.slice(i * 3, i * 3 + 3), projectionParameters);
    lightsPositionWorld[i * 3] = position[0];
    lightsPositionWorld[i * 3 + 1] = position[1];
    lightsPositionWorld[i * 3 + 2] = position[2];
  }

  return lightsPositionWorld;
}
//# sourceMappingURL=lighting.js.map