{"version":3,"sources":["../../../src/controllers/controller.js"],"names":["TransitionManager","log","assert","NO_TRANSITION_PROPS","transitionDuration","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","ZOOM_ACCEL","EVENT_TYPES","WHEEL","PAN","PINCH","DOUBLE_TAP","KEYBOARD","Controller","constructor","ControllerState","options","controllerState","controllerStateProps","eventManager","transitionManager","_events","_state","isDragging","events","onViewStateChange","onStateChange","invertPan","handleEvent","bind","setProps","finalize","eventName","off","event","Object","assign","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onDoubleTap","_onWheel","_onKeyDown","getCenter","x","y","offsetCenter","isPointInBounds","pos","width","height","isFunctionKeyPressed","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","props","removed","toggleEvents","processViewStateChange","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","eventNames","enabled","forEach","on","setOptions","updateViewport","newControllerState","extraProps","interactionState","viewState","getViewportProps","changed","oldViewState","getInteractiveState","panStart","rotateStart","alternateMode","rightButton","_onPanMove","_onPanRotate","panEnd","rotateEnd","pan","_onPanRotateMap","_onPanRotateStandard","deltaX","deltaY","deltaScaleX","deltaScaleY","rotate","centerY","startY","Math","abs","min","max","delta","scale","exp","zoom","zoomStart","startPinchRotation","rotation","zoomEnd","isZoomOut","_getTransitionProps","funcKey","keyCode","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport TransitionManager from './transition-manager';\nimport log from '../utils/log';\nimport assert from '../utils/assert';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\n// EVENT HANDLING PARAMETERS\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\nconst ZOOM_ACCEL = 0.01;\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nexport default class Controller {\n  constructor(ControllerState, options = {}) {\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, options);\n    this._events = null;\n    this._state = {\n      isDragging: false\n    };\n    this.events = [];\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n    this.invertPan = false;\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.setProps(options);\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        this.eventManager.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    const {ControllerState} = this;\n    this.controllerState = new ControllerState(\n      Object.assign({}, this.controllerStateProps, this._state)\n    );\n\n    switch (event.type) {\n      case 'panstart':\n        return this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {x, y} = this.controllerStateProps;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos) {\n    const {width, height} = this.controllerStateProps;\n\n    return pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._state.isDragging;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  /* eslint-disable complexity, max-statements */\n  setProps(props) {\n    if ('onViewportChange' in props) {\n      log.removed('onViewportChange');\n    }\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n    this.controllerStateProps = props;\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      // EventManager has changed\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this.events, true);\n    }\n\n    this.transitionManager.processViewStateChange(this.controllerStateProps);\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n  /* eslint-enable complexity, max-statements */\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // DEPRECATED\n\n  setOptions(props) {\n    return this.setProps(props);\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newControllerState, extraProps = {}, interactionState = {}) {\n    const viewState = Object.assign({}, newControllerState.getViewportProps(), extraProps);\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState, oldViewState});\n      }\n    }\n\n    Object.assign(\n      this._state,\n      Object.assign({}, newControllerState.getInteractiveState(), interactionState)\n    );\n    if (this.onStateChange) {\n      this.onStateChange(this._state);\n    }\n    // this.setState(Object.assign({}, newControllerState.getInteractiveState(), extraState));\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.panStart({pos}).rotateStart({pos});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event) {\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n    alternateMode = this.invertPan ? !alternateMode : alternateMode;\n    return alternateMode ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event) {\n    const newControllerState = this.controllerState.panEnd().rotateEnd();\n    return this.updateViewport(newControllerState, null, {isDragging: false});\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    return this.invertPan ? this._onPanRotateMap(event) : this._onPanRotateStandard(event);\n  }\n\n  // Normal pan to rotate\n  _onPanRotateStandard(event) {\n    const {deltaX, deltaY} = event;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    const deltaScaleY = deltaY / height;\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  _onPanRotateMap(event) {\n    const {deltaX, deltaY} = event;\n    const [, centerY] = this.getCenter(event);\n    const startY = centerY - deltaY;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos)) {\n      return false;\n    }\n\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS);\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._state.startPinchRotation = event.rotation;\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      const {startPinchRotation} = this._state;\n      newControllerState = newControllerState.rotate({\n        deltaScaleX: -(rotation - startPinchRotation) / 180\n      });\n    }\n\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event) {\n    const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    return this.updateViewport(newControllerState, null, {isDragging: false});\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    return this.updateViewport(newControllerState, this._getTransitionProps());\n  }\n\n  /* eslint-disable complexity */\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {controllerState} = this;\n    let newControllerState;\n\n    switch (event.srcEvent.keyCode) {\n      case 189: // -\n        newControllerState = funcKey\n          ? controllerState.zoomOut().zoomOut()\n          : controllerState.zoomOut();\n        break;\n      case 187: // +\n        newControllerState = funcKey ? controllerState.zoomIn().zoomIn() : controllerState.zoomIn();\n        break;\n      case 37: // left\n        newControllerState = funcKey ? controllerState.rotateLeft() : controllerState.moveLeft();\n        break;\n      case 39: // right\n        newControllerState = funcKey ? controllerState.rotateRight() : controllerState.moveRight();\n        break;\n      case 38: // up\n        newControllerState = funcKey ? controllerState.rotateUp() : controllerState.moveUp();\n        break;\n      case 40: // down\n        newControllerState = funcKey ? controllerState.rotateDown() : controllerState.moveDown();\n        break;\n      default:\n        return false;\n    }\n    return this.updateViewport(newControllerState, this._getTransitionProps());\n  }\n  /* eslint-enable complexity */\n\n  _getTransitionProps() {\n    // Transitions on double-tap and key-down are only supported by MapController\n    return NO_TRANSITION_PROPS;\n  }\n}\n"],"file":"controller.js"}