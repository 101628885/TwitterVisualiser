{"version":3,"sources":["../../../src/controllers/orbit-controller.js"],"names":["clamp","Controller","OrbitViewport","assert","LinearInterpolator","TRANSITION_EVENTS","ZOOM_TRANSITION_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","defaultState","lookAt","rotationX","rotationOrbit","fov","near","far","translationX","translationY","zoom","defaultConstraints","minZoom","maxZoom","Infinity","ensureFinite","value","fallbackValue","Number","isFinite","OrbitState","constructor","width","height","distance","orbitAxis","bounds","startPanViewport","startPanPos","isPanning","startRotateViewport","isRotating","startZoomViewport","startZoomPos","_viewportProps","_applyConstraints","_interactiveState","getViewportProps","getInteractiveState","panStart","pos","viewport","_getUpdatedOrbitState","pan","startPos","deltaX","deltaY","center","project","newLookAt","unproject","panEnd","rotateStart","rotate","deltaScaleX","deltaScaleY","newRotationX","newRotationOrbit","rotateEnd","shortestPathFrom","viewState","props","Object","assign","zoomStart","scale","newZoom","cx","cy","newCenterX","newCenterY","zoomEnd","newProps","OrbitController","_getTransitionProps"],"mappings":"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","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport OrbitViewport from '../deprecated/orbit-viewport';\nimport assert from '../utils/assert';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\n\nconst ZOOM_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(['zoom']),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nconst defaultState = {\n  lookAt: [0, 0, 0],\n  rotationX: 0,\n  rotationOrbit: 0,\n  fov: 50,\n  near: 1,\n  far: 100,\n  translationX: 0,\n  translationY: 0,\n  zoom: 1\n};\n\nconst defaultConstraints = {\n  minZoom: 0,\n  maxZoom: Infinity\n};\n\n/* Helpers */\n\nfunction ensureFinite(value, fallbackValue) {\n  return Number.isFinite(value) ? value : fallbackValue;\n}\n\nclass OrbitState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    distance, // From eye to target\n    rotationX, // Rotation around x axis\n    rotationOrbit, // Rotation around orbit axis\n    orbitAxis, // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n    // Bounding box of the model, in the shape of {minX, maxX, minY, maxY, minZ, maxZ}\n    bounds,\n\n    /* View matrix arguments */\n    lookAt, // Which point is camera looking at, default origin\n\n    /* Projection matrix arguments */\n    fov, // Field of view covered by camera\n    near, // Distance of near clipping plane\n    far, // Distance of far clipping plane\n\n    /* After projection */\n    translationX, // in pixels\n    translationY, // in pixels\n    zoom,\n\n    /* Viewport constraints */\n    minZoom,\n    maxZoom,\n\n    /** Interaction states, required to calculate change during transform */\n    // Model state when the pan operation first started\n    startPanViewport,\n    startPanPos,\n    isPanning,\n    // Model state when the rotate operation first started\n    startRotateViewport,\n    isRotating,\n    // Model state when the zoom operation first started\n    startZoomViewport,\n    startZoomPos\n  }) {\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(distance), '`distance` must be supplied');\n\n    this._viewportProps = this._applyConstraints({\n      width,\n      height,\n      distance,\n      rotationX: ensureFinite(rotationX, defaultState.rotationX),\n      rotationOrbit: ensureFinite(rotationOrbit, defaultState.rotationOrbit),\n      orbitAxis,\n\n      bounds,\n      lookAt: lookAt || defaultState.lookAt,\n\n      fov: ensureFinite(fov, defaultState.fov),\n      near: ensureFinite(near, defaultState.near),\n      far: ensureFinite(far, defaultState.far),\n      translationX: ensureFinite(translationX, defaultState.translationX),\n      translationY: ensureFinite(translationY, defaultState.translationY),\n      zoom: ensureFinite(zoom, defaultState.zoom),\n\n      minZoom: ensureFinite(minZoom, defaultConstraints.minZoom),\n      maxZoom: ensureFinite(maxZoom, defaultConstraints.maxZoom)\n    });\n\n    this._interactiveState = {\n      startPanViewport,\n      startPanPos,\n      isPanning,\n      startRotateViewport,\n      isRotating,\n      startZoomViewport,\n      startZoomPos\n    };\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const viewport = new OrbitViewport(this._viewportProps);\n\n    return this._getUpdatedOrbitState({\n      startPanPos: pos,\n      startPanViewport: viewport\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPos}) {\n    if (this._interactiveState.isRotating) {\n      return this._getUpdatedOrbitState();\n    }\n\n    const startPanPos = this._interactiveState.startPanPos || startPos;\n    assert(startPanPos, '`startPanPos` props is required');\n\n    const viewport =\n      this._interactiveState.startPanViewport || new OrbitViewport(this._viewportProps);\n\n    const deltaX = pos[0] - startPanPos[0];\n    const deltaY = pos[1] - startPanPos[1];\n\n    const center = viewport.project(viewport.lookAt);\n    const newLookAt = viewport.unproject([center[0] - deltaX, center[1] - deltaY, center[2]]);\n\n    return this._getUpdatedOrbitState({\n      lookAt: newLookAt,\n      isPanning: true\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedOrbitState({\n      startPanViewport: null,\n      startPanPos: null,\n      isPanning: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    // Rotation center should be the worldspace position at the center of the\n    // the screen. If not found, use the last one.\n    const viewport = new OrbitViewport(this._viewportProps);\n\n    return this._getUpdatedOrbitState({\n      startRotateViewport: viewport\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    if (this._interactiveState.isPanning) {\n      return this._getUpdatedOrbitState();\n    }\n\n    const {startRotateViewport} = this._interactiveState;\n\n    let {rotationX, rotationOrbit} = startRotateViewport || {};\n    rotationX = ensureFinite(rotationX, this._viewportProps.rotationX);\n    rotationOrbit = ensureFinite(rotationOrbit, this._viewportProps.rotationOrbit);\n\n    const newRotationX = clamp(rotationX - deltaScaleY * 180, -89.999, 89.999);\n    const newRotationOrbit = (rotationOrbit - deltaScaleX * 180) % 360;\n\n    return this._getUpdatedOrbitState({\n      rotationX: newRotationX,\n      rotationOrbit: newRotationOrbit,\n      isRotating: true\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedOrbitState({\n      startRotateViewport: null,\n      isRotating: null\n    });\n  }\n\n  // default implementation of shortest path between two view states\n  shortestPathFrom(viewState) {\n    const props = Object.assign({}, this._viewportProps);\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}) {\n    const viewport = new OrbitViewport(this._viewportProps);\n    return this._getUpdatedOrbitState({\n      startZoomViewport: viewport,\n      startZoomPos: pos\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom, minZoom, maxZoom, width, height} = this._viewportProps;\n    const startZoomPos = this._interactiveState.startZoomPos || startPos || pos;\n    const viewport =\n      this._interactiveState.startZoomViewport || new OrbitViewport(this._viewportProps);\n\n    const newZoom = clamp(zoom * scale, minZoom, maxZoom);\n    const deltaX = pos[0] - startZoomPos[0];\n    const deltaY = pos[1] - startZoomPos[1];\n\n    // Zoom around the center position\n    const cx = startZoomPos[0] - width / 2;\n    const cy = height / 2 - startZoomPos[1];\n    const center = viewport.project(viewport.lookAt);\n    const newCenterX = center[0] - cx + (cx * newZoom) / zoom + deltaX;\n    const newCenterY = center[1] + cy - (cy * newZoom) / zoom - deltaY;\n\n    const newLookAt = viewport.unproject([newCenterX, newCenterY, center[2]]);\n\n    return this._getUpdatedOrbitState({\n      lookAt: newLookAt,\n      zoom: newZoom\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedOrbitState({\n      startZoomPos: null\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedOrbitState(newProps) {\n    // Update _viewportProps\n    return new OrbitState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = zoom > maxZoom ? maxZoom : zoom;\n    props.zoom = zoom < minZoom ? minZoom : zoom;\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller {\n  constructor(props) {\n    super(OrbitState, props);\n  }\n\n  _getTransitionProps() {\n    // Enable transitions for zoom change\n    return ZOOM_TRANSITION_PROPS;\n  }\n}\n"],"file":"orbit-controller.js"}