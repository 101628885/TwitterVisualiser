{"version":3,"sources":["../../../src/controllers/orthographic-controller.js"],"names":["Controller","ViewState","Vector2","clamp","MOVEMENT_SPEED","MIN_ZOOM","MAX_ZOOM","OrthographicState","constructor","width","height","offset","zoom","startPanPosition","startPanOffset","startRotatePosition","startRotateOffset","_interactiveState","getInteractiveState","panStart","pos","_viewportProps","_getUpdatedState","pan","delta","subtract","panEnd","rotateStart","rotate","deltaScaleX","deltaScaleY","rotateEnd","scale","newZoom","moveLeft","add","moveRight","moveUp","moveDown","newProps","Object","assign","OrthographicController","props","invertPan"],"mappings":"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","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\n\nimport {Vector2, clamp} from 'math.gl';\n\n// TODO: not sure whether we should have these constants\n// as part of viewport props\nconst MOVEMENT_SPEED = 10; // per keyboard click\nconst MIN_ZOOM = 0.1;\nconst MAX_ZOOM = 10;\n\nclass OrthographicState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    offset, // Offset to the origin\n    zoom, // Zoom level of the view\n\n    /** Interaction states */\n    startPanPosition,\n    startPanOffset,\n    startRotatePosition,\n    startRotateOffset\n  }) {\n    super({\n      width,\n      height,\n      offset,\n      zoom\n    });\n    this._interactiveState = {\n      startPanPosition,\n      startPanOffset,\n      startRotatePosition,\n      startRotateOffset\n    };\n  }\n\n  /* Public API */\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const {offset} = this._viewportProps;\n    return this._getUpdatedState({\n      startPanPosition: pos,\n      startPanOffset: offset\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos}) {\n    const {startPanPosition, startPanOffset} = this._interactiveState;\n    const delta = new Vector2(pos).subtract(startPanPosition);\n    return this._getUpdatedState({\n      offset: new Vector2(startPanOffset).subtract(delta)\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null,\n      startPanOffset: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this;\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    return this;\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this;\n  }\n\n  /**\n   * Zoom\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({scale}) {\n    const {zoom} = this._viewportProps;\n    const newZoom = clamp(zoom * scale, MIN_ZOOM, MAX_ZOOM);\n    return this._getUpdatedState({\n      zoom: newZoom\n    });\n  }\n\n  moveLeft() {\n    const {offset} = this._viewportProps;\n    const delta = [MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveRight() {\n    const {offset} = this._viewportProps;\n    const delta = [-MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveUp() {\n    const {offset} = this._viewportProps;\n    const delta = [0, MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveDown() {\n    const {offset} = this._viewportProps;\n    const delta = [0, -MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new OrthographicState(\n      Object.assign({}, this._viewportProps, this._interactiveState, newProps)\n    );\n  }\n}\n\nexport default class OrthographicController extends Controller {\n  constructor(props) {\n    super(OrthographicState, props);\n    this.invertPan = true;\n  }\n}\n"],"file":"orthographic-controller.js"}