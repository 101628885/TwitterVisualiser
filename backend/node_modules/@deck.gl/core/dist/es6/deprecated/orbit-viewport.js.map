{"version":3,"sources":["../../../src/deprecated/orbit-viewport.js"],"names":["Viewport","createMat4","transformVector","mat4_multiply","mat4_lookAt","mat4_scale","mat4_perspective","mat4_translate","mat4_rotateX","mat4_rotateY","mat4_rotateZ","DEGREES_TO_RADIANS","Math","PI","OrbitViewport","constructor","id","width","height","distance","rotationX","rotationOrbit","orbitAxis","lookAt","up","fov","near","far","zoom","rotationMatrix","translateMatrix","viewMatrix","fovRadians","aspect","perspectiveMatrix","projectionMatrix","project","xyz","topLeft","v","pixelProjectionMatrix","x","y","z","y2","unproject","pixelUnprojectionMatrix","getDistance","boundingBox","halfMaxSide","max","tan","fitBounds","displayName"],"mappings":"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","sourcesContent":["import Viewport from '../viewports/viewport';\n// import log from '../utils/log';\n\nimport {createMat4, transformVector} from '../utils/math-utils';\n\nimport mat4_multiply from 'gl-mat4/multiply';\nimport mat4_lookAt from 'gl-mat4/lookAt';\nimport mat4_scale from 'gl-mat4/scale';\nimport mat4_perspective from 'gl-mat4/perspective';\nimport mat4_translate from 'gl-mat4/translate';\nimport mat4_rotateX from 'gl-mat4/rotateX';\nimport mat4_rotateY from 'gl-mat4/rotateY';\nimport mat4_rotateZ from 'gl-mat4/rotateZ';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\n/*\n * A deck.gl Viewport class used by OrbitController\n * Adds zoom and pixel translation on top of the PerspectiveViewport\n */\nexport default class OrbitViewport extends Viewport {\n  constructor({\n    id = 'orbit-viewport',\n    // viewport arguments\n    width, // Width of viewport\n    height, // Height of viewport\n    // view matrix arguments\n    distance, // From eye position to lookAt\n    rotationX = 0, // Rotating angle around X axis\n    rotationOrbit = 0, // Rotating angle around orbit axis\n    orbitAxis = 'Z', // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n    lookAt = [0, 0, 0], // Which point is camera looking at, default origin\n    up = [0, 1, 0], // Defines up direction, default positive y axis\n    // projection matrix arguments\n    fov = 75, // Field of view covered by camera\n    near = 1, // Distance of near clipping plane\n    far = 100, // Distance of far clipping plane\n    zoom = 1\n  }) {\n    // TODO - Once OrbitViewport is aligned with the View system, deprecated it\n    // log.deprecated('OrbitViewport', 'OrbitView')();\n\n    const rotationMatrix = mat4_rotateX([], createMat4(), (-rotationX / 180) * Math.PI);\n    if (orbitAxis === 'Z') {\n      mat4_rotateZ(rotationMatrix, rotationMatrix, (-rotationOrbit / 180) * Math.PI);\n    } else {\n      mat4_rotateY(rotationMatrix, rotationMatrix, (-rotationOrbit / 180) * Math.PI);\n    }\n\n    const translateMatrix = createMat4();\n    mat4_scale(translateMatrix, translateMatrix, [zoom, zoom, zoom]);\n    mat4_translate(translateMatrix, translateMatrix, [-lookAt[0], -lookAt[1], -lookAt[2]]);\n\n    const viewMatrix = mat4_lookAt([], [0, 0, distance], [0, 0, 0], up);\n    const fovRadians = fov * DEGREES_TO_RADIANS;\n    const aspect = width / height;\n    const perspectiveMatrix = mat4_perspective([], fovRadians, aspect, near, far);\n\n    super({\n      id,\n      viewMatrix: mat4_multiply(\n        viewMatrix,\n        viewMatrix,\n        mat4_multiply(rotationMatrix, rotationMatrix, translateMatrix)\n      ),\n      projectionMatrix: perspectiveMatrix,\n      width,\n      height\n    });\n\n    this.width = width;\n    this.height = height;\n    this.distance = distance;\n    this.rotationX = rotationX;\n    this.rotationOrbit = rotationOrbit;\n    this.orbitAxis = orbitAxis;\n    this.lookAt = lookAt;\n    this.up = up;\n    this.fov = fov;\n    this.near = near;\n    this.far = far;\n    this.zoom = zoom;\n  }\n\n  project(xyz, {topLeft = false} = {}) {\n    const v = transformVector(this.pixelProjectionMatrix, [...xyz, 1]);\n\n    const [x, y, z] = v;\n    const y2 = topLeft ? this.height - y : y;\n    return [x, y2, z];\n  }\n\n  unproject(xyz, {topLeft = false} = {}) {\n    const [x, y, z] = xyz;\n    const y2 = topLeft ? this.height - y : y;\n\n    return transformVector(this.pixelUnprojectionMatrix, [x, y2, z, 1]);\n  }\n\n  /** Get camera `distance` to make view fit a box centered at lookat position in the viewport.\n   * @param {Array} sizes - [sizeX, sizeY, sizeZ]], define the dimensions of bounding box\n   * @returns {Nunber} the new distance parameter\n   */\n  getDistance({boundingBox, fov}) {\n    const halfMaxSide = Math.max(boundingBox[0], boundingBox[1], boundingBox[2]) / 2;\n    const distance = halfMaxSide / Math.tan(((fov / 180) * Math.PI) / 2);\n    return distance;\n  }\n\n  /** Move camera to make a model bounding box centered at lookat position fit in the viewport.\n   * @param {Array} boundingBox - [sizeX, sizeY, sizeZ]], define the dimensions of bounding box\n   * @returns a new OrbitViewport object\n   */\n  fitBounds(boundingBox) {\n    const {\n      width,\n      height,\n      rotationX,\n      rotationOrbit,\n      orbitAxis,\n      lookAt,\n      up,\n      fov,\n      near,\n      far,\n      zoom\n    } = this;\n\n    return new OrbitViewport({\n      width,\n      height,\n      rotationX,\n      rotationOrbit,\n      orbitAxis,\n      up,\n      fov,\n      near,\n      far,\n      zoom,\n      lookAt,\n      distance: this.getDistance({boundingBox, fov})\n    });\n  }\n}\n\nOrbitViewport.displayName = 'OrbitViewport';\n"],"file":"orbit-viewport.js"}