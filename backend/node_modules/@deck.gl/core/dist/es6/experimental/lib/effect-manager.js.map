{"version":3,"sources":["../../../../src/experimental/lib/effect-manager.js"],"names":["EffectManager","constructor","gl","layerManager","_effects","addEffect","effect","push","_sortEffects","initialize","removeEffect","i","indexOf","finalize","splice","preDraw","needsRedraw","draw","sort","a","b","priority","count"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA,eAAe,MAAMA,aAAN,CAAoB;AACjCC,EAAAA,WAAW,CAAC;AAACC,IAAAA,EAAD;AAAKC,IAAAA;AAAL,GAAD,EAAqB;AAC9B,SAAKD,EAAL,GAAUA,EAAV;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACD;AAED;;;;;;;;AAMAC,EAAAA,SAAS,CAACC,MAAD,EAAS;AAChB,SAAKF,QAAL,CAAcG,IAAd,CAAmBD,MAAnB;;AACA,SAAKE,YAAL;;AACAF,IAAAA,MAAM,CAACG,UAAP,CAAkB;AAACP,MAAAA,EAAE,EAAE,KAAKA,EAAV;AAAcC,MAAAA,YAAY,EAAE,KAAKA;AAAjC,KAAlB;AACD;AAED;;;;;;;;;;AAQAO,EAAAA,YAAY,CAACJ,MAAD,EAAS;AACnB,UAAMK,CAAC,GAAG,KAAKP,QAAL,CAAcQ,OAAd,CAAsBN,MAAtB,CAAV;;AACA,QAAIK,CAAC,IAAI,CAAT,EAAY;AACVL,MAAAA,MAAM,CAACO,QAAP,CAAgB;AAACX,QAAAA,EAAE,EAAE,KAAKA,EAAV;AAAcC,QAAAA,YAAY,EAAE,KAAKA;AAAjC,OAAhB;;AACA,WAAKC,QAAL,CAAcU,MAAd,CAAqBH,CAArB,EAAwB,CAAxB;;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;AAED;;;;;;AAIAI,EAAAA,OAAO,GAAG;AACR,SAAK,MAAMT,MAAX,IAAqB,KAAKF,QAA1B,EAAoC;AAClC,UAAIE,MAAM,CAACU,WAAX,EAAwB;AACtBV,QAAAA,MAAM,CAACS,OAAP,CAAe;AAACb,UAAAA,EAAE,EAAE,KAAKA,EAAV;AAAcC,UAAAA,YAAY,EAAE,KAAKA;AAAjC,SAAf;AACD;AACF;AACF;AAED;;;;;;AAIAc,EAAAA,IAAI,GAAG;AACL,SAAK,MAAMX,MAAX,IAAqB,KAAKF,QAA1B,EAAoC;AAClC,UAAIE,MAAM,CAACU,WAAX,EAAwB;AACtBV,QAAAA,MAAM,CAACW,IAAP,CAAY;AAACf,UAAAA,EAAE,EAAE,KAAKA,EAAV;AAAcC,UAAAA,YAAY,EAAE,KAAKA;AAAjC,SAAZ;AACD;AACF;AACF;;AAEDK,EAAAA,YAAY,GAAG;AACb,SAAKJ,QAAL,CAAcc,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC3B,UAAID,CAAC,CAACE,QAAF,GAAaD,CAAC,CAACC,QAAnB,EAA6B;AAC3B,eAAO,CAAC,CAAR;AACD,OAFD,MAEO,IAAIF,CAAC,CAACE,QAAF,GAAaD,CAAC,CAACC,QAAnB,EAA6B;AAClC,eAAO,CAAP;AACD;;AACD,aAAOF,CAAC,CAACG,KAAF,GAAUF,CAAC,CAACE,KAAnB;AACD,KAPD;AAQD;;AAtEgC","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable no-try-catch */\n\nexport default class EffectManager {\n  constructor({gl, layerManager}) {\n    this.gl = gl;\n    this.layerManager = layerManager;\n    this._effects = [];\n  }\n\n  /**\n   * Adds an effect to be managed.  That effect's initialize function will\n   * be called, and the effect's preDraw and draw callbacks will be\n   * called at the appropriate times in the render loop\n   * @param {Effect} effect - the effect to be added\n   */\n  addEffect(effect) {\n    this._effects.push(effect);\n    this._sortEffects();\n    effect.initialize({gl: this.gl, layerManager: this.layerManager});\n  }\n\n  /**\n   * Removes an effect that is already being managed.  That effect's\n   * finalize function will be called, and its callbacks will no longer\n   * be envoked in the render loop\n   * @param {Effect} effect - the effect to be removed\n   * @return {bool} - True if the effect was already being managed, and\n   * thus successfully removed; false otherwise\n   */\n  removeEffect(effect) {\n    const i = this._effects.indexOf(effect);\n    if (i >= 0) {\n      effect.finalize({gl: this.gl, layerManager: this.layerManager});\n      this._effects.splice(i, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Envoke the preDraw callback of all managed events, in order of\n   * decreasing priority\n   */\n  preDraw() {\n    for (const effect of this._effects) {\n      if (effect.needsRedraw) {\n        effect.preDraw({gl: this.gl, layerManager: this.layerManager});\n      }\n    }\n  }\n\n  /**\n   * Envoke the draw callback of all managed events, in order of\n   * decreasing priority\n   */\n  draw() {\n    for (const effect of this._effects) {\n      if (effect.needsRedraw) {\n        effect.draw({gl: this.gl, layerManager: this.layerManager});\n      }\n    }\n  }\n\n  _sortEffects() {\n    this._effects.sort((a, b) => {\n      if (a.priority > b.priority) {\n        return -1;\n      } else if (a.priority < b.priority) {\n        return 1;\n      }\n      return a.count - b.count;\n    });\n  }\n}\n"],"file":"effect-manager.js"}