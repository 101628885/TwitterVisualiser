{"version":3,"sources":["../../../../../src/experimental/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["GL","Buffer","Model","Framebuffer","Texture2D","FEATURES","hasFeatures","isWebGL2","log","assert","fp64","fp64Utils","worldToPixels","fp64ifyMatrix4","IDENTITY_MATRIX","PIXEL_SIZE","AGGREGATE_TO_GRID_VS","AGGREGATE_TO_GRID_VS_FP64","AGGREGATE_TO_GRID_FS","AGGREGATE_ALL_VS_FP64","AGGREGATE_ALL_FS","DEFAULT_CHANGE_FLAGS","dataChanged","viewportChanged","cellSizeChanged","GPUGridAggregator","getAggregationData","countsData","maxCountData","pixelIndex","length","index","cellCount","cellWeight","totalCount","totalWeight","maxCellWieght","getCellData","cellWeights","cellCounts","push","constructor","gl","opts","id","shaderCache","state","_hasGPUSupport","BLEND_EQUATION_MINMAX","COLOR_ATTACHMENT_RGBA32F","TEXTURE_FILTER_LINEAR_FLOAT","_setupGPUResources","run","positions","positions64xyLow","weights","changeFlags","cellSize","viewport","width","height","countsBuffer","maxCountBuffer","gridTransformMatrix","projectPoints","useGPU","_setState","transformMatrix","pixelProjectionMatrix","aggregationParams","_updateGridSize","_runAggregationOnGPU","warn","_runAggregationOnCPU","_getAggregateData","gridAggregationFramebuffer","readPixelsToBuffer","buffer","type","FLOAT","allAggregrationFramebuffer","countsTexture","texture","maxCountTexture","_getAggregationModel","vs","fs","modules","vertexCount","drawMode","POINTS","_getAllAggregationModel","isInstanced","instanceCount","attributes","position","size","data","Float32Array","_projectPositions","projectedPositions","projectFlat","x","y","_renderAggregateData","numCol","numRow","windowSize","gridAggregationModel","allAggregationModel","uProjectionMatrixFP64","gridSize","bind","clear","COLOR_BUFFER_BIT","draw","parameters","clearColor","clearDepth","blend","depthTest","blendEquation","FUNC_ADD","blendFunc","ONE","moduleSettings","uniforms","uProjectionMatrix","unbind","MAX","uSampler","ELEMENTCOUNT","counts","pos","fill","maxWeight","gridPos","weight","Number","isFinite","colId","Math","floor","rowId","i","maxCountBufferData","subData","_updateModels","updateObject","Object","assign","setupFramebuffer","_setupModels","delete","positionsBuffer","positions64xyLowBuffer","weightsBuffer","aggregationModelAttributes","createPos64xyLow","setVertexCount","setAttributes","setInstanceCount","framebufferSize","resize","ceil","format","RGBA32F","border","mipmaps","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","dataFormat","RGBA","fb","attachments","COLOR_ATTACHMENT0"],"mappings":"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","sourcesContent":["import GL from 'luma.gl/constants';\nimport {Buffer, Model, Framebuffer, Texture2D, FEATURES, hasFeatures, isWebGL2} from 'luma.gl';\nimport {log} from '@deck.gl/core';\nimport assert from 'assert';\nimport {fp64 as fp64Utils} from 'luma.gl';\nimport {worldToPixels} from 'viewport-mercator-project';\nconst {fp64ifyMatrix4} = fp64Utils;\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nconst PIXEL_SIZE = 4; // RGBA32F\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_VS_FP64 from './aggregate-to-grid-vs-64.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS_FP64 from './aggregate-all-vs-64.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\n\nconst DEFAULT_CHANGE_FLAGS = {\n  dataChanged: true,\n  viewportChanged: true,\n  cellSizeChanged: true\n};\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({countsData, maxCountData, pixelIndex}) {\n    assert(countsData.length >= (pixelIndex + 1) * PIXEL_SIZE);\n    assert(maxCountData.length === PIXEL_SIZE);\n    const index = pixelIndex * PIXEL_SIZE;\n    const cellCount = countsData[index];\n    const cellWeight = countsData[index + 1];\n    const totalCount = maxCountData[0];\n    const totalWeight = maxCountData[1];\n    const maxCellWieght = maxCountData[3];\n    return {\n      cellCount,\n      cellWeight,\n      totalCount,\n      totalWeight,\n      maxCellWieght\n    };\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData}) {\n    const cellWeights = [];\n    const cellCounts = [];\n    for (let index = 0; index < countsData.length; index += 4) {\n      cellCounts.push(countsData[index]);\n      cellWeights.push(countsData[index + 1]);\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  // DEBUG ONLY\n  // static logData({countsBuffer, maxCountBuffer}) {\n  //   const countsData = countsBuffer.getData();\n  //   for (let index = 0; index < countsData.length; index += 4) {\n  //     if (countsData[index] > 0) {\n  //       console.log(`index: ${index} count: ${countsData[index]}`);\n  //     }\n  //   }\n  //   const maxCountData = maxCountBuffer.getData();\n  //   console.log(`totalCount: ${maxCountData[0]} totalWeight: ${maxCountData[1]} maxCellWieght: ${maxCountData[3]}`);\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.shaderCache = opts.shaderCache || null;\n    this.gl = gl;\n    this.state = {};\n    this._hasGPUSupport =\n      isWebGL2(gl) &&\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX,\n        FEATURES.COLOR_ATTACHMENT_RGBA32F,\n        FEATURES.TEXTURE_FILTER_LINEAR_FLOAT\n      );\n    if (this._hasGPUSupport) {\n      this._setupGPUResources();\n    }\n  }\n\n  // Perform aggregation and retun the results\n  run({\n    positions,\n    positions64xyLow,\n    weights,\n    changeFlags = DEFAULT_CHANGE_FLAGS,\n    cellSize,\n    viewport,\n    width,\n    height,\n    countsBuffer = null,\n    maxCountBuffer = null,\n    gridTransformMatrix = null,\n    projectPoints = false,\n    useGPU = true,\n    fp64 = false\n  } = {}) {\n    if (this.state.useGPU !== useGPU) {\n      changeFlags = DEFAULT_CHANGE_FLAGS;\n    }\n    this._setState({useGPU});\n    const transformMatrix =\n      gridTransformMatrix || (viewport && viewport.pixelProjectionMatrix) || IDENTITY_MATRIX;\n    const aggregationParams = {\n      positions,\n      positions64xyLow,\n      weights,\n      changeFlags,\n      cellSize,\n      viewport,\n      gridTransformMatrix: transformMatrix,\n      countsBuffer,\n      maxCountBuffer,\n      projectPoints,\n      fp64\n    };\n\n    this._updateGridSize({viewport, cellSize, width, height});\n    if (this._hasGPUSupport && useGPU) {\n      return this._runAggregationOnGPU(aggregationParams);\n    }\n    if (useGPU) {\n      log.warn('ScreenGridAggregator: GPU Aggregation not supported, falling back to CPU');\n    }\n    return this._runAggregationOnCPU(aggregationParams);\n  }\n\n  // PRIVATE\n\n  _getAggregateData(opts) {\n    let {countsBuffer, maxCountBuffer} = opts;\n    countsBuffer = this.gridAggregationFramebuffer.readPixelsToBuffer({\n      buffer: countsBuffer,\n      type: GL.FLOAT\n    });\n    maxCountBuffer = this.allAggregrationFramebuffer.readPixelsToBuffer({\n      width: 1,\n      height: 1,\n      type: GL.FLOAT,\n      buffer: maxCountBuffer\n    });\n    return {\n      countsBuffer,\n      countsTexture: this.gridAggregationFramebuffer.texture,\n      maxCountBuffer,\n      maxCountTexture: this.allAggregrationFramebuffer.texture\n    };\n  }\n\n  _getAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'Gird-Aggregation-Model',\n      vs: fp64 ? AGGREGATE_TO_GRID_VS_FP64 : AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: fp64 ? ['fp64', 'project64'] : ['project32'],\n      shaderCache,\n      vertexCount: 0,\n      drawMode: GL.POINTS\n    });\n  }\n\n  _getAllAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'All-Aggregation-Model',\n      vs: AGGREGATE_ALL_VS_FP64,\n      fs: AGGREGATE_ALL_FS,\n      modules: ['fp64'],\n      shaderCache,\n      vertexCount: 1,\n      drawMode: GL.POINTS,\n      isInstanced: true,\n      instanceCount: 0,\n      attributes: {position: new Buffer(gl, {size: 2, data: new Float32Array([0, 0])})}\n    });\n  }\n\n  _projectPositions(opts) {\n    let {projectedPositions} = this.state;\n    if (!projectedPositions || opts.changeFlags.dataChanged || opts.changeFlags.viewportChanged) {\n      const {positions, viewport} = opts;\n      projectedPositions = [];\n      for (let index = 0; index < positions.length; index += 2) {\n        const [x, y] = viewport.projectFlat([positions[index], positions[index + 1]]);\n        projectedPositions.push(x, y);\n      }\n      this._setState({projectedPositions});\n    }\n  }\n\n  _renderAggregateData(opts) {\n    const {cellSize, viewport, gridTransformMatrix, projectPoints} = opts;\n    const {numCol, numRow, windowSize} = this.state;\n    const {\n      gl,\n      gridAggregationFramebuffer,\n      gridAggregationModel,\n      allAggregrationFramebuffer,\n      allAggregationModel\n    } = this;\n\n    const uProjectionMatrixFP64 = fp64ifyMatrix4(gridTransformMatrix);\n    const gridSize = [numCol, numRow];\n\n    gridAggregationFramebuffer.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gridAggregationModel.draw({\n      parameters: {\n        clearColor: [0, 0, 0, 0],\n        clearDepth: 0,\n        blend: true,\n        depthTest: false,\n        blendEquation: GL.FUNC_ADD,\n        blendFunc: [GL.ONE, GL.ONE]\n      },\n      moduleSettings: {\n        viewport\n      },\n      uniforms: {\n        windowSize,\n        cellSize,\n        gridSize,\n        uProjectionMatrix: gridTransformMatrix,\n        uProjectionMatrixFP64,\n        projectPoints\n      }\n    });\n    gridAggregationFramebuffer.unbind();\n\n    allAggregrationFramebuffer.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    allAggregationModel.draw({\n      parameters: {\n        clearColor: [0, 0, 0, 0],\n        clearDepth: 0,\n        blend: true,\n        depthTest: false,\n        blendEquation: [GL.FUNC_ADD, GL.MAX],\n        blendFunc: [GL.ONE, GL.ONE]\n      },\n      uniforms: {\n        uSampler: gridAggregationFramebuffer.texture,\n        gridSize\n      }\n    });\n    allAggregrationFramebuffer.unbind();\n  }\n\n  /* eslint-disable max-statements */\n  _runAggregationOnCPU(opts) {\n    const ELEMENTCOUNT = 4;\n    const {positions, weights, cellSize, projectPoints, gridTransformMatrix} = opts;\n    let {countsBuffer, maxCountBuffer} = opts;\n    const {numCol, numRow} = this.state;\n    // Each element contains 4 floats to match with GPU ouput\n    const counts = new Float32Array(numCol * numRow * ELEMENTCOUNT);\n\n    let pos = positions;\n    if (projectPoints) {\n      this._projectPositions(opts);\n      pos = this.state.projectedPositions;\n    }\n\n    counts.fill(0);\n    let maxWeight = 0;\n    let totalCount = 0;\n    let totalWeight = 0;\n    for (let index = 0; index < pos.length; index += 2) {\n      const gridPos = worldToPixels([pos[index], pos[index + 1], 0], gridTransformMatrix);\n      const x = gridPos[0];\n      const y = gridPos[1];\n      const weight = weights ? weights[index / 2] : 1;\n      assert(Number.isFinite(weight));\n      const colId = Math.floor(x / cellSize[0]);\n      const rowId = Math.floor(y / cellSize[1]);\n      if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n        const i = (colId + rowId * numCol) * ELEMENTCOUNT;\n        counts[i]++;\n        counts[i + 1] += weight;\n        totalCount += 1;\n        totalWeight += weight;\n        if (counts[i + 1] > maxWeight) {\n          maxWeight = counts[i + 1];\n        }\n      }\n    }\n    const maxCountBufferData = new Float32Array(ELEMENTCOUNT);\n    // Store total count value in Red/X channel\n    maxCountBufferData[0] = totalCount;\n    // Store total weight value in Green/Y channel\n    maxCountBufferData[1] = totalWeight;\n    // Store max weight value in alpha/W channel.\n    maxCountBufferData[3] = maxWeight;\n\n    // Load data to WebGL buffer.\n    if (countsBuffer) {\n      countsBuffer.subData({data: counts});\n    } else {\n      countsBuffer = new Buffer(this.gl, {data: counts});\n    }\n    if (maxCountBuffer) {\n      maxCountBuffer.subData({data: maxCountBufferData});\n    } else {\n      maxCountBuffer = new Buffer(this.gl, {data: maxCountBufferData});\n    }\n    return {\n      // Buffer objects\n      countsBuffer,\n      maxCountBuffer,\n      // ArrayView objects\n      countsData: counts,\n      maxCountData: maxCountBufferData,\n      // Return total aggregaton values to avoid UBO setup for WebGL1 cases\n      totalCount,\n      totalWeight,\n      maxWeight\n    };\n  }\n  /* eslint-enable max-statements */\n\n  _runAggregationOnGPU(opts) {\n    this._updateModels(opts);\n    this._renderAggregateData(opts);\n    return this._getAggregateData(opts);\n  }\n\n  // Update priveate state\n  _setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  _setupGPUResources() {\n    const {gl} = this;\n\n    this.gridAggregationFramebuffer = setupFramebuffer(gl, {id: 'GridAggregation'});\n    this.allAggregrationFramebuffer = setupFramebuffer(gl, {id: 'AllAggregation'});\n  }\n\n  _setupModels(fp64 = false) {\n    if (this.gridAggregationModel) {\n      this.gridAggregationModel.delete();\n    }\n    this.gridAggregationModel = this._getAggregationModel(fp64);\n    if (this.allAggregationModel) {\n      this.allAggregationModel.delete();\n    }\n    this.allAggregationModel = this._getAllAggregationModel(fp64);\n  }\n\n  /* eslint-disable max-statements */\n  _updateModels(opts) {\n    const {gl} = this;\n    const {positions, positions64xyLow, weights, changeFlags} = opts;\n    const {numCol, numRow} = this.state;\n\n    let {positionsBuffer, positions64xyLowBuffer, weightsBuffer} = this.state;\n\n    const aggregationModelAttributes = {};\n\n    let createPos64xyLow = false;\n    if (opts.fp64 !== this.state.fp64) {\n      this._setupModels(opts.fp64);\n      this._setState({fp64: opts.fp64});\n      if (opts.fp64) {\n        createPos64xyLow = true;\n      }\n    }\n\n    if (changeFlags.dataChanged || !positionsBuffer) {\n      if (positionsBuffer) {\n        positionsBuffer.delete();\n      }\n      if (weightsBuffer) {\n        weightsBuffer.delete();\n      }\n      positionsBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions)});\n      weightsBuffer = new Buffer(gl, {size: 1, data: new Float32Array(weights)});\n      createPos64xyLow = opts.fp64;\n      Object.assign(aggregationModelAttributes, {\n        positions: positionsBuffer,\n        weights: weightsBuffer\n      });\n      this.gridAggregationModel.setVertexCount(positions.length / 2);\n      this._setState({positionsBuffer, weightsBuffer});\n    }\n\n    if (createPos64xyLow) {\n      assert(positions64xyLow);\n      if (positions64xyLowBuffer) {\n        positions64xyLowBuffer.delete();\n      }\n      positions64xyLowBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions64xyLow)});\n      Object.assign(aggregationModelAttributes, {\n        positions64xyLow: positions64xyLowBuffer\n      });\n      this._setState({positions64xyLowBuffer});\n    }\n\n    this.gridAggregationModel.setAttributes(aggregationModelAttributes);\n\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n\n      const framebufferSize = {width: numCol, height: numRow};\n      this.gridAggregationFramebuffer.resize(framebufferSize);\n      this.allAggregrationFramebuffer.resize(framebufferSize);\n    }\n  }\n  /* eslint-enable max-statements */\n\n  _updateGridSize(opts) {\n    const {viewport, cellSize} = opts;\n    const width = opts.width || viewport.width;\n    const height = opts.height || viewport.height;\n    const numCol = Math.ceil(width / cellSize[0]);\n    const numRow = Math.ceil(height / cellSize[1]);\n    this._setState({numCol, numRow, windowSize: [width, height]});\n  }\n}\n\n// Helper methods.\n\nfunction setupFramebuffer(gl, opts) {\n  const {id} = opts;\n  const texture = new Texture2D(gl, {\n    data: null,\n    format: GL.RGBA32F,\n    type: GL.FLOAT,\n    border: 0,\n    mipmaps: false,\n    parameters: {\n      [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n      [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n    },\n    dataFormat: GL.RGBA\n  });\n\n  const fb = new Framebuffer(gl, {\n    id,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n\n  return fb;\n}\n"],"file":"gpu-grid-aggregator.js"}