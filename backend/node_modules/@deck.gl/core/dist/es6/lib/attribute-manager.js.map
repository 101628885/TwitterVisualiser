{"version":3,"sources":["../../../src/lib/attribute-manager.js"],"names":["Attribute","log","AttributeTransitionManager","LOG_START_END_PRIORITY","LOG_DETAIL_PRIORITY","noop","logFunctions","savedMessages","timeStart","onLog","level","message","onUpdateStart","numInstances","Date","onUpdate","push","onUpdateEnd","id","timeMs","Math","round","time","group","collapsed","groupEnd","AttributeManager","setDefaultLogFunctions","undefined","constructor","gl","stats","attributes","updateTriggers","accessors","needsRedraw","userData","attributeTransitionManager","Object","seal","finalize","attributeName","delete","getNeedsRedraw","clearRedrawFlags","redraw","setNeedsRedraw","add","updaters","_add","addInstanced","instanced","remove","attributeNameArray","i","length","name","invalidate","triggerName","invalidatedAttributes","_invalidateTrigger","invalidateAll","setNeedsUpdate","update","data","transitions","props","buffers","context","updated","attribute","setExternalBuffer","setGenericValue","getAccessor","needsUpdate","_updateAttribute","timeEnd","updateTransition","transitionUpdated","setCurrentTime","now","getAttributes","getChangedAttributes","clearChangedFlags","changedAttributes","assign","hasAttribute","getAccessors","extraProps","removed","newAttributes","constant","isIndexed","elements","size","value","_mapUpdateTriggersToAttributes","triggers","getUpdateTriggers","forEach","keys","join","warn","allocate","updateBuffer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable guard-for-in */\nimport Attribute from './attribute';\nimport log from '../utils/log';\n\nimport AttributeTransitionManager from './attribute-transition-manager';\n\nconst LOG_START_END_PRIORITY = 2;\nconst LOG_DETAIL_PRIORITY = 3;\n\nfunction noop() {}\n\n// Default loggers\nconst logFunctions = {\n  savedMessages: null,\n  timeStart: null,\n  onLog: ({level, message}) => {\n    log.log(level, message)();\n  },\n  onUpdateStart: ({level, numInstances}) => {\n    logFunctions.savedMessages = [];\n    logFunctions.timeStart = new Date();\n  },\n  onUpdate: ({level, message}) => {\n    if (logFunctions.savedMessages) {\n      logFunctions.savedMessages.push(message);\n    }\n  },\n  onUpdateEnd: ({level, id, numInstances}) => {\n    const timeMs = Math.round(new Date() - logFunctions.timeStart);\n    const time = `${timeMs}ms`;\n    log.group(level, `Updated attributes for ${numInstances} instances in ${id} in ${time}`, {\n      collapsed: true\n    })();\n    for (const message of logFunctions.savedMessages) {\n      log.log(level, message)();\n    }\n    log.groupEnd(level, `Updated attributes for ${numInstances} instances in ${id} in ${time}`)();\n    logFunctions.savedMessages = null;\n  }\n};\n\nexport default class AttributeManager {\n  /**\n   * Sets log functions to help trace or time attribute updates.\n   * Default logging uses deck logger.\n   *\n   * `onLog` is called for each attribute.\n   *\n   * To enable detailed control of timming and e.g. hierarchical logging,\n   * hooks are also provided for update start and end.\n   *\n   * @param {Object} [opts]\n   * @param {String} [onLog=] - called to print\n   * @param {String} [onUpdateStart=] - called before update() starts\n   * @param {String} [onUpdateEnd=] - called after update() ends\n   */\n  static setDefaultLogFunctions({onLog, onUpdateStart, onUpdate, onUpdateEnd} = {}) {\n    if (onLog !== undefined) {\n      logFunctions.onLog = onLog || noop;\n    }\n    if (onUpdateStart !== undefined) {\n      logFunctions.onUpdateStart = onUpdateStart || noop;\n    }\n    if (onUpdate !== undefined) {\n      logFunctions.onUpdate = onUpdate || noop;\n    }\n    if (onUpdateEnd !== undefined) {\n      logFunctions.onUpdateEnd = onUpdateEnd || noop;\n    }\n  }\n\n  /**\n   * @classdesc\n   * Automated attribute generation and management. Suitable when a set of\n   * vertex shader attributes are generated by iteration over a data array,\n   * and updates to these attributes are needed either when the data itself\n   * changes, or when other data relevant to the calculations change.\n   *\n   * - First the application registers descriptions of its dynamic vertex\n   *   attributes using AttributeManager.add().\n   * - Then, when any change that affects attributes is detected by the\n   *   application, the app will call AttributeManager.invalidate().\n   * - Finally before it renders, it calls AttributeManager.update() to\n   *   ensure that attributes are automatically rebuilt if anything has been\n   *   invalidated.\n   *\n   * The application provided update functions describe how attributes\n   * should be updated from a data array and are expected to traverse\n   * that data array (or iterable) and fill in the attribute's typed array.\n   *\n   * Note that the attribute manager intentionally does not do advanced\n   * change detection, but instead makes it easy to build such detection\n   * by offering the ability to \"invalidate\" each attribute separately.\n   */\n  constructor(gl, {id = 'attribute-manager', stats} = {}) {\n    this.id = id;\n    this.gl = gl;\n\n    this.attributes = {};\n\n    this.updateTriggers = {};\n    this.accessors = {};\n    this.needsRedraw = true;\n\n    this.userData = {};\n    this.stats = stats;\n\n    this.attributeTransitionManager = new AttributeTransitionManager(gl, {\n      id: `${id}-transitions`\n    });\n\n    // For debugging sanity, prevent uninitialized members\n    Object.seal(this);\n  }\n\n  finalize() {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].delete();\n    }\n    this.attributeTransitionManager.finalize();\n  }\n\n  // Returns the redraw flag, optionally clearing it.\n  // Redraw flag will be set if any attributes attributes changed since\n  // flag was last cleared.\n  //\n  // @param {String} [clearRedrawFlags=false] - whether to clear the flag\n  // @return {false|String} - reason a redraw is needed.\n  getNeedsRedraw({clearRedrawFlags = false} = {}) {\n    const redraw = this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !clearRedrawFlags;\n    return redraw && this.id;\n  }\n\n  // Sets the redraw flag.\n  // @param {Boolean} redraw=true\n  // @return {AttributeManager} - for chaining\n  setNeedsRedraw(redraw = true) {\n    this.needsRedraw = true;\n    return this;\n  }\n\n  // Adds attributes\n  add(attributes, updaters = {}) {\n    this._add(attributes, updaters);\n  }\n\n  // Adds attributes\n  addInstanced(attributes, updaters = {}) {\n    this._add(attributes, updaters, {instanced: 1});\n  }\n\n  /**\n   * Removes attributes\n   * Takes an array of attribute names and delete them from\n   * the attribute map if they exists\n   *\n   * @example\n   * attributeManager.remove(['position']);\n   *\n   * @param {Object} attributeNameArray - attribute name array (see above)\n   */\n  remove(attributeNameArray) {\n    for (let i = 0; i < attributeNameArray.length; i++) {\n      const name = attributeNameArray[i];\n      if (this.attributes[name] !== undefined) {\n        this.attributes[name].delete();\n        delete this.attributes[name];\n      }\n    }\n  }\n\n  // Marks an attribute for update\n  invalidate(triggerName) {\n    const invalidatedAttributes = this._invalidateTrigger(triggerName);\n    // For performance tuning\n    logFunctions.onLog({\n      level: LOG_DETAIL_PRIORITY,\n      message: `invalidated attributes ${invalidatedAttributes} (${triggerName}) for ${this.id}`\n    });\n  }\n\n  invalidateAll() {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].setNeedsUpdate();\n    }\n    // For performance tuning\n    logFunctions.onLog({\n      level: LOG_DETAIL_PRIORITY,\n      message: `invalidated all attributes for ${this.id}`\n    });\n  }\n\n  // Ensure all attribute buffers are updated from props or data.\n  update({data, numInstances, transitions, props = {}, buffers = {}, context = {}} = {}) {\n    // keep track of whether some attributes are updated\n    let updated = false;\n\n    logFunctions.onUpdateStart({level: LOG_START_END_PRIORITY, id: this.id, numInstances});\n    if (this.stats) {\n      this.stats.timeStart('attribute updates', this.id);\n    }\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n\n      if (attribute.setExternalBuffer(buffers[attributeName], this.numInstances)) {\n        // Attribute is using external buffer from the props\n      } else if (attribute.setGenericValue(props[attribute.getAccessor()])) {\n        // Attribute is using generic value from the props\n      } else if (attribute.needsUpdate()) {\n        updated = true;\n        this._updateAttribute({attribute, numInstances, data, props, context});\n      }\n\n      this.needsRedraw |= attribute.needsRedraw();\n    }\n\n    if (updated) {\n      // Only initiate alloc/update (and logging) if actually needed\n      if (this.stats) {\n        this.stats.timeEnd('attribute updates', this.id);\n      }\n      logFunctions.onUpdateEnd({level: LOG_START_END_PRIORITY, id: this.id, numInstances});\n    }\n\n    this.attributeTransitionManager.update({\n      attributes: this.attributes,\n      numInstances,\n      transitions\n    });\n  }\n\n  // Update attribute transition to the current timestamp\n  // Returns `true` if any transition is in progress\n  updateTransition() {\n    const {attributeTransitionManager} = this;\n    const transitionUpdated = attributeTransitionManager.setCurrentTime(Date.now());\n    this.needsRedraw = this.needsRedraw || transitionUpdated;\n    return transitionUpdated;\n  }\n\n  /**\n   * Returns all attribute descriptors\n   * Note: Format matches luma.gl Model/Program.setAttributes()\n   * @return {Object} attributes - descriptors\n   */\n  getAttributes() {\n    return this.attributes;\n  }\n\n  /**\n   * Returns changed attribute descriptors\n   * This indicates which WebGLBuggers need to be updated\n   * @return {Object} attributes - descriptors\n   */\n  getChangedAttributes({clearChangedFlags = false}) {\n    const {attributes, attributeTransitionManager} = this;\n\n    const changedAttributes = Object.assign({}, attributeTransitionManager.getAttributes());\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      if (attribute.needsRedraw({clearChangedFlags: true})) {\n        // Only return non-transition attributes\n        if (!attributeTransitionManager.hasAttribute(attributeName)) {\n          changedAttributes[attributeName] = attribute;\n        }\n      }\n    }\n    return changedAttributes;\n  }\n\n  // PROTECTED METHODS - Only to be used by collaborating classes, not by apps\n\n  // Returns object containing all accessors as keys, with non-null values\n  // @return {Object} - accessors object\n  getAccessors() {\n    return this.updateTriggers;\n  }\n\n  // PRIVATE METHODS\n\n  // Used to register an attribute\n  _add(attributes, updaters, extraProps = {}) {\n    if (updaters) {\n      log.removed('AttributeManager.add({updaters}) - updater map no longer supported');\n    }\n\n    const newAttributes = {};\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n\n      // Initialize the attribute descriptor, with WebGL and metadata fields\n      newAttributes[attributeName] = new Attribute(\n        this.gl,\n        Object.assign({}, attribute, {\n          id: attributeName,\n          // Luma fields\n          constant: attribute.constant || false,\n          isIndexed: attribute.isIndexed || attribute.elements,\n          size: (attribute.elements && 1) || attribute.size,\n          value: attribute.value || null,\n          instanced: attribute.instanced || extraProps.instanced\n        })\n      );\n    }\n\n    Object.assign(this.attributes, newAttributes);\n\n    this._mapUpdateTriggersToAttributes();\n  }\n  /* eslint-enable max-statements */\n\n  // build updateTrigger name to attribute name mapping\n  _mapUpdateTriggersToAttributes() {\n    const triggers = {};\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      attribute.getUpdateTriggers().forEach(triggerName => {\n        if (!triggers[triggerName]) {\n          triggers[triggerName] = [];\n        }\n        triggers[triggerName].push(attributeName);\n      });\n    }\n\n    this.updateTriggers = triggers;\n  }\n\n  _invalidateTrigger(triggerName) {\n    const {attributes, updateTriggers} = this;\n    const invalidatedAttributes = updateTriggers[triggerName];\n\n    if (invalidatedAttributes) {\n      invalidatedAttributes.forEach(name => {\n        const attribute = attributes[name];\n        if (attribute) {\n          attribute.setNeedsUpdate();\n        }\n      });\n    } else {\n      let message = `invalidating non-existent trigger ${triggerName} for ${this.id}\\n`;\n      message += `Valid triggers: ${Object.keys(attributes).join(', ')}`;\n      log.warn(message, invalidatedAttributes)();\n    }\n    return invalidatedAttributes;\n  }\n\n  _updateAttribute({attribute, numInstances, data, props, context}) {\n    if (attribute.allocate(numInstances)) {\n      logFunctions.onUpdate({\n        level: LOG_DETAIL_PRIORITY,\n        message: `${attribute.id} allocated ${numInstances}`,\n        id: this.id\n      });\n    }\n\n    // Calls update on any buffers that need update\n    const timeStart = Date.now();\n\n    const updated = attribute.updateBuffer({numInstances, data, props, context});\n    if (updated) {\n      this.needsRedraw = true;\n\n      const timeMs = Math.round(Date.now() - timeStart);\n      logFunctions.onUpdate({\n        level: LOG_DETAIL_PRIORITY,\n        message: `${attribute.id} updated ${numInstances} in ${timeMs}ms`\n      });\n    }\n  }\n}\n"],"file":"attribute-manager.js"}