{"version":3,"sources":["../../../src/lib/attribute-transition-utils.js"],"names":["Buffer","padArray","ATTRIBUTE_MAPPING","getShaders","transitions","varyings","attributeDeclarations","uniformsDeclarations","varyingDeclarations","calculations","attributeName","transition","attributeType","attribute","size","bufferIndex","length","push","vs","join","fs","getBuffers","sourceBuffers","feedbackBuffers","fromState","toState","buffer","padBuffer","fromLength","toLength","fromBufferLayout","toBufferLayout","getData","x","hasBufferLayout","data","Float32Array","fromData","value","constant","toData","getMissingData","i","chunk","subarray","source","target","sourceLayout","targetLayout","setData"],"mappings":"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","sourcesContent":["import {Buffer} from 'luma.gl';\nimport {padArray} from '../utils/array-utils';\n\nconst ATTRIBUTE_MAPPING = {\n  1: 'float',\n  2: 'vec2',\n  3: 'vec3',\n  4: 'vec4'\n};\n\nexport function getShaders(transitions) {\n  // Build shaders\n  const varyings = [];\n  const attributeDeclarations = [];\n  const uniformsDeclarations = [];\n  const varyingDeclarations = [];\n  const calculations = [];\n\n  for (const attributeName in transitions) {\n    const transition = transitions[attributeName];\n    const attributeType = ATTRIBUTE_MAPPING[transition.attribute.size];\n\n    if (attributeType) {\n      transition.bufferIndex = varyings.length;\n      varyings.push(attributeName);\n\n      attributeDeclarations.push(`attribute ${attributeType} ${attributeName}From;`);\n      attributeDeclarations.push(`attribute ${attributeType} ${attributeName}To;`);\n      uniformsDeclarations.push(`uniform float ${attributeName}Time;`);\n      varyingDeclarations.push(`varying ${attributeType} ${attributeName};`);\n      calculations.push(`${attributeName} = mix(${attributeName}From, ${attributeName}To,\n        ${attributeName}Time);`);\n    }\n  }\n\n  const vs = `\n#define SHADER_NAME feedback-vertex-shader\n${attributeDeclarations.join('\\n')}\n${uniformsDeclarations.join('\\n')}\n${varyingDeclarations.join('\\n')}\n\nvoid main(void) {\n  ${calculations.join('\\n')}\n  gl_Position = vec4(0.0);\n}\n`;\n\n  const fs = `\\\n#define SHADER_NAME feedback-fragment-shader\n\nprecision highp float;\n\n${varyingDeclarations.join('\\n')}\n\nvoid main(void) {\n  gl_FragColor = vec4(0.0);\n}\n`;\n  return {vs, fs, varyings};\n}\n\nexport function getBuffers(transitions) {\n  const sourceBuffers = {};\n  const feedbackBuffers = {};\n  for (const attributeName in transitions) {\n    const {fromState, toState, buffer} = transitions[attributeName];\n    sourceBuffers[`${attributeName}From`] = fromState;\n    sourceBuffers[`${attributeName}To`] = toState;\n    feedbackBuffers[`${attributeName}`] = buffer;\n  }\n  return {sourceBuffers, feedbackBuffers};\n}\n\nexport function padBuffer({\n  fromState,\n  toState,\n  fromLength,\n  toLength,\n  fromBufferLayout,\n  toBufferLayout,\n  getData = x => x\n}) {\n  const hasBufferLayout = fromBufferLayout && toBufferLayout;\n\n  // check if buffer needs to be padded\n  if ((!hasBufferLayout && fromLength >= toLength) || !(fromState instanceof Buffer)) {\n    return;\n  }\n\n  const data = new Float32Array(toLength);\n  const fromData = fromState.getData({});\n\n  const {value, buffer, size, constant} = toState;\n  const toData = value || buffer.getData({});\n\n  const getMissingData = constant\n    ? (i, chunk) => getData(value, chunk)\n    : (i, chunk) => getData(toData.subarray(i, i + size), chunk);\n\n  padArray({\n    source: fromData,\n    target: data,\n    sourceLayout: fromBufferLayout,\n    targetLayout: toBufferLayout,\n    size: toState.size,\n    getData: getMissingData\n  });\n\n  fromState.setData({data});\n}\n"],"file":"attribute-transition-utils.js"}