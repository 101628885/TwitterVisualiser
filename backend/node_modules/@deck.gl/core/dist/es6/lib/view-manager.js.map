{"version":3,"sources":["../../../src/lib/view-manager.js"],"names":["assert","deepEqual","View","Viewport","log","flatten","ViewManager","constructor","props","views","width","height","viewState","controllers","_viewports","_viewportMap","_isUpdating","_needsRedraw","_needsUpdate","_eventManager","eventManager","_eventCallbacks","onViewStateChange","onInteractiveStateChange","Object","seal","setProps","finalize","key","needsRedraw","clearRedrawFlags","redraw","setNeedsRedraw","reason","setNeedsUpdate","getViewports","rect","filter","viewport","containsPixel","getViews","viewMap","forEach","view","id","getView","viewOrViewId","find","getViewState","viewId","getViewStateId","filterViewState","getViewport","project","xyz","opts","topLeft","viewports","i","length","contains","unproject","_setViews","_setViewState","_setSize","_update","_rebuildViewports","Number","isFinite","Boolean","map","viewportInstance","viewsChanged","_diffViews","viewStateChanged","warn","_onViewStateChange","event","_createController","Controller","type","controller","assign","bind","onStateChange","_updateController","controllerProps","defaultState","x","y","oldControllers","makeViewport","_buildViewportMap","newViews","oldViews","some","_","equals"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {deepEqual} from '../utils/deep-equal';\nimport View from '../views/view';\nimport Viewport from '../viewports/viewport';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nexport default class ViewManager {\n  constructor(props = {}) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = true;\n\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractiveStateChange: props.onInteractiveStateChange\n    };\n\n    Object.seal(this);\n\n    // Init with default map viewport\n    this.setProps(props);\n  }\n\n  finalize() {\n    for (const key in this.controllers) {\n      if (this.controllers[key]) {\n        this.controllers[key].finalize();\n      }\n    }\n    this.controllers = {};\n  }\n\n  // Check if a redraw is needed\n  needsRedraw({clearRedrawFlags = true} = {}) {\n    const redraw = this._needsRedraw;\n    if (clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect) {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n\n  getViews() {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n\n  // Resolves a viewId string to a View, if already a View returns it.\n  getView(viewOrViewId) {\n    return typeof viewOrViewId === 'string'\n      ? this.views.find(view => view.id === viewOrViewId)\n      : viewOrViewId;\n  }\n\n  // Returns the viewState for a specific viewId. Matches the viewState by\n  // 1. view.viewStateId\n  // 2. view.id\n  // 3. root viewState\n  // then applies the view's filter if any\n  getViewState(viewId) {\n    const view = this.getView(viewId);\n    // Backward compatibility: view state for single view\n    const viewState = (view && this.viewState[view.getViewStateId()]) || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n\n  getViewport(viewId) {\n    return this._viewportMap[viewId];\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, opts = {topLeft: true}) {\n    const viewports = this.getViewports();\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.contains(xyz, opts)) {\n        return viewport.project(xyz, opts);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, opts) {\n    const viewports = this.getViewports();\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(xyz, opts)) {\n        return viewport.unproject(xyz);\n      }\n    }\n    return null;\n  }\n\n  setProps(props) {\n    if ('views' in props) {\n      this._setViews(props.views);\n    }\n\n    // TODO - support multiple view states\n    if ('viewState' in props) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width, props.height);\n    }\n\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  _update() {\n    this._isUpdating = true;\n\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  _setSize(width, height) {\n    assert(Number.isFinite(width) && Number.isFinite(height));\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  _setViews(views) {\n    // DEPRECATED: Ensure any \"naked\" Viewports are wrapped in View instances\n    views = flatten(views, {filter: Boolean}).map(\n      view => (view instanceof Viewport ? new View({viewportInstance: view}) : view)\n    );\n\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  _setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = !deepEqual(viewState, this.viewState);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('setting null viewState')();\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _onViewStateChange(viewId, event) {\n    event.viewId = viewId;\n    this._eventCallbacks.onViewStateChange(event);\n  }\n\n  _createController(props) {\n    const Controller = props.type;\n\n    const controller = new Controller(\n      Object.assign(\n        {\n          eventManager: this._eventManager,\n          // Set an internal callback that calls the prop callback if provided\n          onViewStateChange: this._onViewStateChange.bind(this, props.id),\n          onStateChange: this._eventCallbacks.onInteractiveStateChange\n        },\n        props\n      )\n    );\n\n    return controller;\n  }\n\n  _updateController(view, viewState, viewport, controller) {\n    if (view.controller) {\n      const controllerProps = Object.assign({}, view.controller, view.defaultState, viewState, {\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      });\n\n      // TODO - check if view / controller type has changed, and replace the controller\n      if (controller) {\n        controller.setProps(controllerProps);\n      } else {\n        controller = this._createController(controllerProps);\n      }\n      return controller;\n    }\n    return null;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  _rebuildViewports() {\n    const {width, height, views} = this;\n\n    const oldControllers = this.controllers;\n    this.controllers = {};\n\n    this._viewports = views.map(view => {\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({width, height, viewState});\n\n      // Update the controller\n      this.controllers[view.id] = this._updateController(\n        view,\n        viewState,\n        viewport,\n        oldControllers[view.id]\n      );\n\n      return viewport;\n    });\n\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      if (oldControllers[id] && !this.controllers[id]) {\n        oldControllers[id].finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap() {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n"],"file":"view-manager.js"}