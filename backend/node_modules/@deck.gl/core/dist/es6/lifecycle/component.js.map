{"version":3,"sources":["../../../src/lifecycle/component.js"],"names":["LIFECYCLE","createProps","ComponentState","defaultProps","counter","Component","constructor","props","apply","arguments","id","count","lifecycle","NO_STATE","parent","context","state","internalState","Object","seal","clone","newProps","assign","stats","_initState"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,wBAAxB;AACA,SAAQC,WAAR,QAA0B,2BAA1B,C,CACA;AACA;AACA;;AAEA,OAAOC,cAAP,MAA2B,mBAA3B;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,IAAIC,OAAO,GAAG,CAAd;AAEA,eAAe,MAAMC,SAAN,CAAgB;AAC7BC,EAAAA,WAAW;AAAC;AAAsB;AAChC;;AACA;AACA,SAAKC,KAAL,GAAaN,WAAW,CAACO,KAAZ,CAAkB,IAAlB,EAAwBC,SAAxB,CAAb;AACA;AAEA;;AACA,SAAKC,EAAL,GAAU,KAAKH,KAAL,CAAWG,EAArB,CAPgC,CAOP;;AACzB,SAAKC,KAAL,GAAaP,OAAO,EAApB,CARgC,CAQR;;AACxB,SAAKQ,SAAL,GAAiBZ,SAAS,CAACa,QAA3B,CATgC,CASK;;AACrC,SAAKC,MAAL,GAAc,IAAd,CAVgC,CAUZ;;AACpB,SAAKC,OAAL,GAAe,IAAf,CAXgC,CAWX;;AACrB,SAAKC,KAAL,GAAa,IAAb,CAZgC,CAYb;;AACnB,SAAKC,aAAL,GAAqB,IAArB,CAbgC,CAehC;;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAY,IAAZ;AACD,GAlB4B,CAoB7B;;;AACAC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACd,WAAO,IAAI,KAAKf,WAAT,CAAqBY,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkB,KAAKf,KAAvB,EAA8Bc,QAA9B,CAArB,CAAP;AACD;;AAED,MAAIE,KAAJ,GAAY;AACV,WAAO,KAAKN,aAAL,CAAmBM,KAA1B;AACD,GA3B4B,CA6B7B;;;AAEAC,EAAAA,UAAU,GAAG;AACX,SAAKP,aAAL,GAAqB,IAAIf,cAAJ,CAAmB,EAAnB,CAArB;AACD;;AAjC4B;AAoC/BG,SAAS,CAACF,YAAV,GAAyBA,YAAzB","sourcesContent":["import {LIFECYCLE} from '../lifecycle/constants';\nimport {createProps} from '../lifecycle/create-props';\n// import {diffProps} from '../lifecycle/props';\n// import log from '../utils/log';\n// import assert from '../utils/assert';\n\nimport ComponentState from './component-state';\n\nconst defaultProps = {};\n\nlet counter = 0;\n\nexport default class Component {\n  constructor(/* ...propObjects */) {\n    // Merge supplied props with default props and freeze them.\n    /* eslint-disable prefer-spread */\n    this.props = createProps.apply(this, arguments);\n    /* eslint-enable prefer-spread */\n\n    // Define all members before layer is sealed\n    this.id = this.props.id; // The layer's id, used for matching with layers from last render cycle\n    this.count = counter++; // Keep track of how many layer instances you are generating\n    this.lifecycle = LIFECYCLE.NO_STATE; // Helps track and debug the life cycle of the layers\n    this.parent = null; // reference to the composite layer parent that rendered this layer\n    this.context = null; // Will reference layer manager's context, contains state shared by layers\n    this.state = null; // Will be set to the shared layer state object during layer matching\n    this.internalState = null;\n\n    // Seal the layer\n    Object.seal(this);\n  }\n\n  // clone this layer with modified props\n  clone(newProps) {\n    return new this.constructor(Object.assign({}, this.props, newProps));\n  }\n\n  get stats() {\n    return this.internalState.stats;\n  }\n\n  // PROTECTED METHODS, override in subclass\n\n  _initState() {\n    this.internalState = new ComponentState({});\n  }\n}\n\nComponent.defaultProps = defaultProps;\n"],"file":"component.js"}