function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import View from './view';
import Viewport from '../viewports/viewport'; // TODO - use math.gl

import { createMat4, transformVector } from '../utils/math-utils';
import mat4_multiply from 'gl-mat4/multiply';
import mat4_lookAt from 'gl-mat4/lookAt';
import mat4_scale from 'gl-mat4/scale';
import mat4_perspective from 'gl-mat4/perspective';
import mat4_translate from 'gl-mat4/translate';
import mat4_rotateX from 'gl-mat4/rotateX';
import mat4_rotateY from 'gl-mat4/rotateY';
import mat4_rotateZ from 'gl-mat4/rotateZ';
import OrbitController from '../controllers/orbit-controller';
const DEGREES_TO_RADIANS = Math.PI / 180; // TODO - remove need for custom project overrides

class OrbitViewport extends Viewport {
  project(xyz, {
    topLeft = false
  } = {}) {
    const v = transformVector(this.pixelProjectionMatrix, [...xyz, 1]);

    const _v = _slicedToArray(v, 3),
          x = _v[0],
          y = _v[1],
          z = _v[2];

    const y2 = topLeft ? this.height - y : y;
    return [x, y2, z];
  }

  unproject(xyz, {
    topLeft = false
  } = {}) {
    const _xyz = _slicedToArray(xyz, 3),
          x = _xyz[0],
          y = _xyz[1],
          z = _xyz[2];

    const y2 = topLeft ? this.height - y : y;
    return transformVector(this.pixelUnprojectionMatrix, [x, y2, z, 1]);
  }

}

export default class OrbitView extends View {
  // Get camera `distance` to make view fit a box centered at lookat position in the viewport.
  // @param {Array} boundingBox - [sizeX, sizeY, sizeZ]], defines the dimensions of bounding box
  static getDistance({
    boundingBox,
    fov
  }) {
    const halfMaxSide = Math.max(boundingBox[0], boundingBox[1], boundingBox[2]) / 2;
    const distance = halfMaxSide / Math.tan(fov / 180 * Math.PI / 2);
    return distance;
  }

  get controller() {
    return this._getControllerProps({
      type: OrbitController
    });
  }
  /* eslint-disable complexity, max-statements */


  _getViewport(props) {
    const viewState = props.viewState;
    const width = props.width || 1;
    const height = props.height || 1; // Get view matrix parameters from view state
    // Projection matrix arguments
    // TODO - Extracting from viewState is deprecated

    const fovy = props.fov || props.fovy || viewState.fovy || 75; // Field of view covered by camera

    const near = props.near || viewState.near || 1; // Distance of near clipping plane

    const far = props.far || viewState.far || 100; // Distance of far clipping plane

    const aspect = Number.isFinite(viewState.aspect) ? viewState.aspect : width / height;
    const fovyRadians = fovy * DEGREES_TO_RADIANS;
    return new OrbitViewport({
      id: this.id,
      viewMatrix: this._getViewMatrix(props.viewState),
      projectionMatrix: mat4_perspective([], fovyRadians, aspect, near, far),
      x: props.x,
      y: props.y,
      width,
      height
    });
  }
  /* eslint-enable complexity, max-statements */


  _getViewMatrix(viewState) {
    const distance = viewState.distance,
          _viewState$rotationX = viewState.rotationX,
          rotationX = _viewState$rotationX === void 0 ? 0 : _viewState$rotationX,
          _viewState$rotationOr = viewState.rotationOrbit,
          rotationOrbit = _viewState$rotationOr === void 0 ? 0 : _viewState$rotationOr,
          _viewState$orbitAxis = viewState.orbitAxis,
          orbitAxis = _viewState$orbitAxis === void 0 ? 'Z' : _viewState$orbitAxis,
          _viewState$lookAt = viewState.lookAt,
          lookAt = _viewState$lookAt === void 0 ? [0, 0, 0] : _viewState$lookAt,
          _viewState$up = viewState.up,
          up = _viewState$up === void 0 ? [0, 1, 0] : _viewState$up,
          _viewState$zoom = viewState.zoom,
          zoom = _viewState$zoom === void 0 ? 1 : _viewState$zoom;
    const rotationMatrix = mat4_rotateX([], createMat4(), -rotationX / 180 * Math.PI);

    if (orbitAxis === 'Z') {
      mat4_rotateZ(rotationMatrix, rotationMatrix, -rotationOrbit / 180 * Math.PI);
    } else {
      mat4_rotateY(rotationMatrix, rotationMatrix, -rotationOrbit / 180 * Math.PI);
    }

    const translateMatrix = createMat4();
    mat4_scale(translateMatrix, translateMatrix, [zoom, zoom, zoom]);
    mat4_translate(translateMatrix, translateMatrix, [-lookAt[0], -lookAt[1], -lookAt[2]]);
    const viewMatrix = mat4_lookAt([], [0, 0, distance], [0, 0, 0], up);
    mat4_multiply(viewMatrix, viewMatrix, mat4_multiply(rotationMatrix, rotationMatrix, translateMatrix));
    return viewMatrix;
  }
  /** Move camera to make a model bounding box centered at lookat position fit in the viewport.
   * @param {Array} boundingBox - [sizeX, sizeY, sizeZ]], define the dimensions of bounding box
   * @returns a new OrbitViewport object
   */


  fitBounds(boundingBox, viewState) {
    const width = this.width,
          height = this.height,
          fov = this.fov,
          near = this.near,
          far = this.far;
    return this._getViewport({
      width,
      height,
      fov,
      near,
      far
    });
  }

}
OrbitView.displayName = 'OrbitView';
//# sourceMappingURL=orbit-view.js.map