{"version":3,"sources":["../../../src/controllers/controller.js"],"names":["TransitionManager","log","assert","NO_TRANSITION_PROPS","transitionDuration","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","ZOOM_ACCEL","EVENT_TYPES","WHEEL","PAN","PINCH","DOUBLE_TAP","KEYBOARD","Controller","ControllerState","options","controllerState","controllerStateProps","eventManager","transitionManager","_events","_state","isDragging","events","onViewStateChange","onStateChange","invertPan","handleEvent","bind","setProps","eventName","off","finalize","event","Object","assign","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onDoubleTap","_onWheel","_onKeyDown","x","y","offsetCenter","pos","width","height","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","props","removed","toggleEvents","processViewStateChange","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","eventNames","enabled","forEach","on","newControllerState","extraProps","interactionState","viewState","getViewportProps","changed","oldViewState","getInteractiveState","getCenter","isPointInBounds","panStart","rotateStart","updateViewport","alternateMode","isFunctionKeyPressed","rightButton","_onPanMove","_onPanRotate","panEnd","rotateEnd","pan","_onPanRotateMap","_onPanRotateStandard","deltaX","deltaY","deltaScaleX","deltaScaleY","rotate","centerY","startY","Math","abs","min","max","delta","scale","exp","zoom","zoomStart","startPinchRotation","rotation","zoomEnd","isZoomOut","_getTransitionProps","funcKey","keyCode","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport TransitionManager from './transition-manager';\nimport log from '../utils/log';\nimport assert from '../utils/assert';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\n// EVENT HANDLING PARAMETERS\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\nconst ZOOM_ACCEL = 0.01;\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nexport default class Controller {\n  constructor(ControllerState, options = {}) {\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, options);\n    this._events = null;\n    this._state = {\n      isDragging: false\n    };\n    this.events = [];\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n    this.invertPan = false;\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.setProps(options);\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        this.eventManager.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    const {ControllerState} = this;\n    this.controllerState = new ControllerState(\n      Object.assign({}, this.controllerStateProps, this._state)\n    );\n\n    switch (event.type) {\n      case 'panstart':\n        return this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {x, y} = this.controllerStateProps;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos) {\n    const {width, height} = this.controllerStateProps;\n\n    return pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._state.isDragging;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  /* eslint-disable complexity, max-statements */\n  setProps(props) {\n    if ('onViewportChange' in props) {\n      log.removed('onViewportChange');\n    }\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n    this.controllerStateProps = props;\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      // EventManager has changed\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this.events, true);\n    }\n\n    this.transitionManager.processViewStateChange(this.controllerStateProps);\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n  /* eslint-enable complexity, max-statements */\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // DEPRECATED\n\n  setOptions(props) {\n    return this.setProps(props);\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newControllerState, extraProps = {}, interactionState = {}) {\n    const viewState = Object.assign({}, newControllerState.getViewportProps(), extraProps);\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState, oldViewState});\n      }\n    }\n\n    Object.assign(\n      this._state,\n      Object.assign({}, newControllerState.getInteractiveState(), interactionState)\n    );\n    if (this.onStateChange) {\n      this.onStateChange(this._state);\n    }\n    // this.setState(Object.assign({}, newControllerState.getInteractiveState(), extraState));\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.panStart({pos}).rotateStart({pos});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event) {\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n    alternateMode = this.invertPan ? !alternateMode : alternateMode;\n    return alternateMode ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event) {\n    const newControllerState = this.controllerState.panEnd().rotateEnd();\n    return this.updateViewport(newControllerState, null, {isDragging: false});\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    return this.invertPan ? this._onPanRotateMap(event) : this._onPanRotateStandard(event);\n  }\n\n  // Normal pan to rotate\n  _onPanRotateStandard(event) {\n    const {deltaX, deltaY} = event;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    const deltaScaleY = deltaY / height;\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  _onPanRotateMap(event) {\n    const {deltaX, deltaY} = event;\n    const [, centerY] = this.getCenter(event);\n    const startY = centerY - deltaY;\n    const {width, height} = this.controllerState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n\n    const newControllerState = this.controllerState.rotate({deltaScaleX, deltaScaleY});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos)) {\n      return false;\n    }\n\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS);\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._state.startPinchRotation = event.rotation;\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      const {startPinchRotation} = this._state;\n      newControllerState = newControllerState.rotate({\n        deltaScaleX: -(rotation - startPinchRotation) / 180\n      });\n    }\n\n    return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event) {\n    const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    return this.updateViewport(newControllerState, null, {isDragging: false});\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    return this.updateViewport(newControllerState, this._getTransitionProps());\n  }\n\n  /* eslint-disable complexity */\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {controllerState} = this;\n    let newControllerState;\n\n    switch (event.srcEvent.keyCode) {\n      case 189: // -\n        newControllerState = funcKey\n          ? controllerState.zoomOut().zoomOut()\n          : controllerState.zoomOut();\n        break;\n      case 187: // +\n        newControllerState = funcKey ? controllerState.zoomIn().zoomIn() : controllerState.zoomIn();\n        break;\n      case 37: // left\n        newControllerState = funcKey ? controllerState.rotateLeft() : controllerState.moveLeft();\n        break;\n      case 39: // right\n        newControllerState = funcKey ? controllerState.rotateRight() : controllerState.moveRight();\n        break;\n      case 38: // up\n        newControllerState = funcKey ? controllerState.rotateUp() : controllerState.moveUp();\n        break;\n      case 40: // down\n        newControllerState = funcKey ? controllerState.rotateDown() : controllerState.moveDown();\n        break;\n      default:\n        return false;\n    }\n    return this.updateViewport(newControllerState, this._getTransitionProps());\n  }\n  /* eslint-enable complexity */\n\n  _getTransitionProps() {\n    // Transitions on double-tap and key-down are only supported by MapController\n    return NO_TRANSITION_PROPS;\n  }\n}\n"],"file":"controller.js"}