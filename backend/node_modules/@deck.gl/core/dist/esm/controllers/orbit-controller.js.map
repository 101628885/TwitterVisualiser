{"version":3,"sources":["../../../src/controllers/orbit-controller.js"],"names":["clamp","Controller","OrbitViewport","assert","LinearInterpolator","TRANSITION_EVENTS","ZOOM_TRANSITION_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","defaultState","lookAt","rotationX","rotationOrbit","fov","near","far","translationX","translationY","zoom","defaultConstraints","minZoom","maxZoom","Infinity","ensureFinite","value","fallbackValue","Number","isFinite","OrbitState","width","height","distance","orbitAxis","bounds","startPanViewport","startPanPos","isPanning","startRotateViewport","isRotating","startZoomViewport","startZoomPos","_viewportProps","_applyConstraints","_interactiveState","pos","viewport","_getUpdatedOrbitState","startPos","deltaX","deltaY","center","project","newLookAt","unproject","deltaScaleX","deltaScaleY","newRotationX","newRotationOrbit","viewState","props","Object","assign","scale","newZoom","cx","cy","newCenterX","newCenterY","newProps","OrbitController"],"mappings":"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","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport OrbitViewport from '../deprecated/orbit-viewport';\nimport assert from '../utils/assert';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\n\nconst ZOOM_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(['zoom']),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nconst defaultState = {\n  lookAt: [0, 0, 0],\n  rotationX: 0,\n  rotationOrbit: 0,\n  fov: 50,\n  near: 1,\n  far: 100,\n  translationX: 0,\n  translationY: 0,\n  zoom: 1\n};\n\nconst defaultConstraints = {\n  minZoom: 0,\n  maxZoom: Infinity\n};\n\n/* Helpers */\n\nfunction ensureFinite(value, fallbackValue) {\n  return Number.isFinite(value) ? value : fallbackValue;\n}\n\nclass OrbitState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    distance, // From eye to target\n    rotationX, // Rotation around x axis\n    rotationOrbit, // Rotation around orbit axis\n    orbitAxis, // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n    // Bounding box of the model, in the shape of {minX, maxX, minY, maxY, minZ, maxZ}\n    bounds,\n\n    /* View matrix arguments */\n    lookAt, // Which point is camera looking at, default origin\n\n    /* Projection matrix arguments */\n    fov, // Field of view covered by camera\n    near, // Distance of near clipping plane\n    far, // Distance of far clipping plane\n\n    /* After projection */\n    translationX, // in pixels\n    translationY, // in pixels\n    zoom,\n\n    /* Viewport constraints */\n    minZoom,\n    maxZoom,\n\n    /** Interaction states, required to calculate change during transform */\n    // Model state when the pan operation first started\n    startPanViewport,\n    startPanPos,\n    isPanning,\n    // Model state when the rotate operation first started\n    startRotateViewport,\n    isRotating,\n    // Model state when the zoom operation first started\n    startZoomViewport,\n    startZoomPos\n  }) {\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(distance), '`distance` must be supplied');\n\n    this._viewportProps = this._applyConstraints({\n      width,\n      height,\n      distance,\n      rotationX: ensureFinite(rotationX, defaultState.rotationX),\n      rotationOrbit: ensureFinite(rotationOrbit, defaultState.rotationOrbit),\n      orbitAxis,\n\n      bounds,\n      lookAt: lookAt || defaultState.lookAt,\n\n      fov: ensureFinite(fov, defaultState.fov),\n      near: ensureFinite(near, defaultState.near),\n      far: ensureFinite(far, defaultState.far),\n      translationX: ensureFinite(translationX, defaultState.translationX),\n      translationY: ensureFinite(translationY, defaultState.translationY),\n      zoom: ensureFinite(zoom, defaultState.zoom),\n\n      minZoom: ensureFinite(minZoom, defaultConstraints.minZoom),\n      maxZoom: ensureFinite(maxZoom, defaultConstraints.maxZoom)\n    });\n\n    this._interactiveState = {\n      startPanViewport,\n      startPanPos,\n      isPanning,\n      startRotateViewport,\n      isRotating,\n      startZoomViewport,\n      startZoomPos\n    };\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const viewport = new OrbitViewport(this._viewportProps);\n\n    return this._getUpdatedOrbitState({\n      startPanPos: pos,\n      startPanViewport: viewport\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPos}) {\n    if (this._interactiveState.isRotating) {\n      return this._getUpdatedOrbitState();\n    }\n\n    const startPanPos = this._interactiveState.startPanPos || startPos;\n    assert(startPanPos, '`startPanPos` props is required');\n\n    const viewport =\n      this._interactiveState.startPanViewport || new OrbitViewport(this._viewportProps);\n\n    const deltaX = pos[0] - startPanPos[0];\n    const deltaY = pos[1] - startPanPos[1];\n\n    const center = viewport.project(viewport.lookAt);\n    const newLookAt = viewport.unproject([center[0] - deltaX, center[1] - deltaY, center[2]]);\n\n    return this._getUpdatedOrbitState({\n      lookAt: newLookAt,\n      isPanning: true\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedOrbitState({\n      startPanViewport: null,\n      startPanPos: null,\n      isPanning: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    // Rotation center should be the worldspace position at the center of the\n    // the screen. If not found, use the last one.\n    const viewport = new OrbitViewport(this._viewportProps);\n\n    return this._getUpdatedOrbitState({\n      startRotateViewport: viewport\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    if (this._interactiveState.isPanning) {\n      return this._getUpdatedOrbitState();\n    }\n\n    const {startRotateViewport} = this._interactiveState;\n\n    let {rotationX, rotationOrbit} = startRotateViewport || {};\n    rotationX = ensureFinite(rotationX, this._viewportProps.rotationX);\n    rotationOrbit = ensureFinite(rotationOrbit, this._viewportProps.rotationOrbit);\n\n    const newRotationX = clamp(rotationX - deltaScaleY * 180, -89.999, 89.999);\n    const newRotationOrbit = (rotationOrbit - deltaScaleX * 180) % 360;\n\n    return this._getUpdatedOrbitState({\n      rotationX: newRotationX,\n      rotationOrbit: newRotationOrbit,\n      isRotating: true\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedOrbitState({\n      startRotateViewport: null,\n      isRotating: null\n    });\n  }\n\n  // default implementation of shortest path between two view states\n  shortestPathFrom(viewState) {\n    const props = Object.assign({}, this._viewportProps);\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}) {\n    const viewport = new OrbitViewport(this._viewportProps);\n    return this._getUpdatedOrbitState({\n      startZoomViewport: viewport,\n      startZoomPos: pos\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom, minZoom, maxZoom, width, height} = this._viewportProps;\n    const startZoomPos = this._interactiveState.startZoomPos || startPos || pos;\n    const viewport =\n      this._interactiveState.startZoomViewport || new OrbitViewport(this._viewportProps);\n\n    const newZoom = clamp(zoom * scale, minZoom, maxZoom);\n    const deltaX = pos[0] - startZoomPos[0];\n    const deltaY = pos[1] - startZoomPos[1];\n\n    // Zoom around the center position\n    const cx = startZoomPos[0] - width / 2;\n    const cy = height / 2 - startZoomPos[1];\n    const center = viewport.project(viewport.lookAt);\n    const newCenterX = center[0] - cx + (cx * newZoom) / zoom + deltaX;\n    const newCenterY = center[1] + cy - (cy * newZoom) / zoom - deltaY;\n\n    const newLookAt = viewport.unproject([newCenterX, newCenterY, center[2]]);\n\n    return this._getUpdatedOrbitState({\n      lookAt: newLookAt,\n      zoom: newZoom\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedOrbitState({\n      startZoomPos: null\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedOrbitState(newProps) {\n    // Update _viewportProps\n    return new OrbitState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = zoom > maxZoom ? maxZoom : zoom;\n    props.zoom = zoom < minZoom ? minZoom : zoom;\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller {\n  constructor(props) {\n    super(OrbitState, props);\n  }\n\n  _getTransitionProps() {\n    // Enable transitions for zoom change\n    return ZOOM_TRANSITION_PROPS;\n  }\n}\n"],"file":"orbit-controller.js"}