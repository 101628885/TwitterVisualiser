function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import Controller from './controller';
import ViewState from './view-state';
import { Vector2, clamp } from 'math.gl'; // TODO: not sure whether we should have these constants
// as part of viewport props

var MOVEMENT_SPEED = 10; // per keyboard click

var MIN_ZOOM = 0.1;
var MAX_ZOOM = 10;

var OrthographicState =
/*#__PURE__*/
function (_ViewState) {
  _inherits(OrthographicState, _ViewState);

  function OrthographicState(_ref) {
    var _this;

    var width = _ref.width,
        height = _ref.height,
        offset = _ref.offset,
        zoom = _ref.zoom,
        startPanPosition = _ref.startPanPosition,
        startPanOffset = _ref.startPanOffset,
        startRotatePosition = _ref.startRotatePosition,
        startRotateOffset = _ref.startRotateOffset;

    _classCallCheck(this, OrthographicState);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(OrthographicState).call(this, {
      width: width,
      height: height,
      offset: offset,
      zoom: zoom
    }));
    _this._interactiveState = {
      startPanPosition: startPanPosition,
      startPanOffset: startPanOffset,
      startRotatePosition: startRotatePosition,
      startRotateOffset: startRotateOffset
    };
    return _this;
  }
  /* Public API */


  _createClass(OrthographicState, [{
    key: "getInteractiveState",
    value: function getInteractiveState() {
      return this._interactiveState;
    }
    /**
     * Start panning
     * @param {[Number, Number]} pos - position on screen where the pointer grabs
     */

  }, {
    key: "panStart",
    value: function panStart(_ref2) {
      var pos = _ref2.pos;
      var offset = this._viewportProps.offset;
      return this._getUpdatedState({
        startPanPosition: pos,
        startPanOffset: offset
      });
    }
    /**
     * Pan
     * @param {[Number, Number]} pos - position on screen where the pointer is
     */

  }, {
    key: "pan",
    value: function pan(_ref3) {
      var pos = _ref3.pos;
      var _this$_interactiveSta = this._interactiveState,
          startPanPosition = _this$_interactiveSta.startPanPosition,
          startPanOffset = _this$_interactiveSta.startPanOffset;
      var delta = new Vector2(pos).subtract(startPanPosition);
      return this._getUpdatedState({
        offset: new Vector2(startPanOffset).subtract(delta)
      });
    }
    /**
     * End panning
     * Must call if `panStart()` was called
     */

  }, {
    key: "panEnd",
    value: function panEnd() {
      return this._getUpdatedState({
        startPanPosition: null,
        startPanOffset: null
      });
    }
    /**
     * Start rotating
     * @param {[Number, Number]} pos - position on screen where the pointer grabs
     */

  }, {
    key: "rotateStart",
    value: function rotateStart(_ref4) {
      var pos = _ref4.pos;
      return this;
    }
    /**
     * Rotate
     * @param {[Number, Number]} pos - position on screen where the pointer is
     */

  }, {
    key: "rotate",
    value: function rotate(_ref5) {
      var deltaScaleX = _ref5.deltaScaleX,
          deltaScaleY = _ref5.deltaScaleY;
      return this;
    }
    /**
     * End rotating
     * Must call if `rotateStart()` was called
     */

  }, {
    key: "rotateEnd",
    value: function rotateEnd() {
      return this;
    }
    /**
     * Zoom
     * @param {Number} scale - a number between [0, 1] specifying the accumulated
     *   relative scale.
     */

  }, {
    key: "zoom",
    value: function zoom(_ref6) {
      var scale = _ref6.scale;
      var zoom = this._viewportProps.zoom;
      var newZoom = clamp(zoom * scale, MIN_ZOOM, MAX_ZOOM);
      return this._getUpdatedState({
        zoom: newZoom
      });
    }
  }, {
    key: "moveLeft",
    value: function moveLeft() {
      var offset = this._viewportProps.offset;
      var delta = [MOVEMENT_SPEED, 0];
      return this._getUpdatedState({
        offset: new Vector2(offset).add(delta)
      });
    }
  }, {
    key: "moveRight",
    value: function moveRight() {
      var offset = this._viewportProps.offset;
      var delta = [-MOVEMENT_SPEED, 0];
      return this._getUpdatedState({
        offset: new Vector2(offset).add(delta)
      });
    }
  }, {
    key: "moveUp",
    value: function moveUp() {
      var offset = this._viewportProps.offset;
      var delta = [0, MOVEMENT_SPEED];
      return this._getUpdatedState({
        offset: new Vector2(offset).add(delta)
      });
    }
  }, {
    key: "moveDown",
    value: function moveDown() {
      var offset = this._viewportProps.offset;
      var delta = [0, -MOVEMENT_SPEED];
      return this._getUpdatedState({
        offset: new Vector2(offset).add(delta)
      });
    }
    /* Private methods */

  }, {
    key: "_getUpdatedState",
    value: function _getUpdatedState(newProps) {
      // Update _viewportProps
      return new OrthographicState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));
    }
  }]);

  return OrthographicState;
}(ViewState);

var OrthographicController =
/*#__PURE__*/
function (_Controller) {
  _inherits(OrthographicController, _Controller);

  function OrthographicController(props) {
    var _this2;

    _classCallCheck(this, OrthographicController);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(OrthographicController).call(this, OrthographicState, props));
    _this2.invertPan = true;
    return _this2;
  }

  return OrthographicController;
}(Controller);

export { OrthographicController as default };
//# sourceMappingURL=orthographic-controller.js.map