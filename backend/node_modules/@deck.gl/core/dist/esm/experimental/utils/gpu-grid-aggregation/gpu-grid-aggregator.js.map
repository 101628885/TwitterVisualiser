{"version":3,"sources":["../../../../../src/experimental/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["GL","Buffer","Model","Framebuffer","Texture2D","FEATURES","hasFeatures","isWebGL2","log","assert","fp64","fp64Utils","worldToPixels","fp64ifyMatrix4","IDENTITY_MATRIX","PIXEL_SIZE","AGGREGATE_TO_GRID_VS","AGGREGATE_TO_GRID_VS_FP64","AGGREGATE_TO_GRID_FS","AGGREGATE_ALL_VS_FP64","AGGREGATE_ALL_FS","DEFAULT_CHANGE_FLAGS","dataChanged","viewportChanged","cellSizeChanged","GPUGridAggregator","countsData","maxCountData","pixelIndex","length","index","cellCount","cellWeight","totalCount","totalWeight","maxCellWieght","cellWeights","cellCounts","push","gl","opts","id","shaderCache","state","_hasGPUSupport","BLEND_EQUATION_MINMAX","COLOR_ATTACHMENT_RGBA32F","TEXTURE_FILTER_LINEAR_FLOAT","_setupGPUResources","positions","positions64xyLow","weights","changeFlags","cellSize","viewport","width","height","countsBuffer","maxCountBuffer","gridTransformMatrix","projectPoints","useGPU","_setState","transformMatrix","pixelProjectionMatrix","aggregationParams","_updateGridSize","_runAggregationOnGPU","warn","_runAggregationOnCPU","gridAggregationFramebuffer","readPixelsToBuffer","buffer","type","FLOAT","allAggregrationFramebuffer","countsTexture","texture","maxCountTexture","vs","fs","modules","vertexCount","drawMode","POINTS","isInstanced","instanceCount","attributes","position","size","data","Float32Array","projectedPositions","projectFlat","x","y","numCol","numRow","windowSize","gridAggregationModel","allAggregationModel","uProjectionMatrixFP64","gridSize","bind","clear","COLOR_BUFFER_BIT","draw","parameters","clearColor","clearDepth","blend","depthTest","blendEquation","FUNC_ADD","blendFunc","ONE","moduleSettings","uniforms","uProjectionMatrix","unbind","MAX","uSampler","ELEMENTCOUNT","counts","pos","_projectPositions","fill","maxWeight","gridPos","weight","Number","isFinite","colId","Math","floor","rowId","i","maxCountBufferData","subData","_updateModels","_renderAggregateData","_getAggregateData","updateObject","Object","assign","setupFramebuffer","delete","_getAggregationModel","_getAllAggregationModel","positionsBuffer","positions64xyLowBuffer","weightsBuffer","aggregationModelAttributes","createPos64xyLow","_setupModels","setVertexCount","setAttributes","setInstanceCount","framebufferSize","resize","ceil","format","RGBA32F","border","mipmaps","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","dataFormat","RGBA","fb","attachments","COLOR_ATTACHMENT0"],"mappings":"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","sourcesContent":["import GL from 'luma.gl/constants';\nimport {Buffer, Model, Framebuffer, Texture2D, FEATURES, hasFeatures, isWebGL2} from 'luma.gl';\nimport {log} from '@deck.gl/core';\nimport assert from 'assert';\nimport {fp64 as fp64Utils} from 'luma.gl';\nimport {worldToPixels} from 'viewport-mercator-project';\nconst {fp64ifyMatrix4} = fp64Utils;\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nconst PIXEL_SIZE = 4; // RGBA32F\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_VS_FP64 from './aggregate-to-grid-vs-64.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS_FP64 from './aggregate-all-vs-64.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\n\nconst DEFAULT_CHANGE_FLAGS = {\n  dataChanged: true,\n  viewportChanged: true,\n  cellSizeChanged: true\n};\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({countsData, maxCountData, pixelIndex}) {\n    assert(countsData.length >= (pixelIndex + 1) * PIXEL_SIZE);\n    assert(maxCountData.length === PIXEL_SIZE);\n    const index = pixelIndex * PIXEL_SIZE;\n    const cellCount = countsData[index];\n    const cellWeight = countsData[index + 1];\n    const totalCount = maxCountData[0];\n    const totalWeight = maxCountData[1];\n    const maxCellWieght = maxCountData[3];\n    return {\n      cellCount,\n      cellWeight,\n      totalCount,\n      totalWeight,\n      maxCellWieght\n    };\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData}) {\n    const cellWeights = [];\n    const cellCounts = [];\n    for (let index = 0; index < countsData.length; index += 4) {\n      cellCounts.push(countsData[index]);\n      cellWeights.push(countsData[index + 1]);\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  // DEBUG ONLY\n  // static logData({countsBuffer, maxCountBuffer}) {\n  //   const countsData = countsBuffer.getData();\n  //   for (let index = 0; index < countsData.length; index += 4) {\n  //     if (countsData[index] > 0) {\n  //       console.log(`index: ${index} count: ${countsData[index]}`);\n  //     }\n  //   }\n  //   const maxCountData = maxCountBuffer.getData();\n  //   console.log(`totalCount: ${maxCountData[0]} totalWeight: ${maxCountData[1]} maxCellWieght: ${maxCountData[3]}`);\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.shaderCache = opts.shaderCache || null;\n    this.gl = gl;\n    this.state = {};\n    this._hasGPUSupport =\n      isWebGL2(gl) &&\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX,\n        FEATURES.COLOR_ATTACHMENT_RGBA32F,\n        FEATURES.TEXTURE_FILTER_LINEAR_FLOAT\n      );\n    if (this._hasGPUSupport) {\n      this._setupGPUResources();\n    }\n  }\n\n  // Perform aggregation and retun the results\n  run({\n    positions,\n    positions64xyLow,\n    weights,\n    changeFlags = DEFAULT_CHANGE_FLAGS,\n    cellSize,\n    viewport,\n    width,\n    height,\n    countsBuffer = null,\n    maxCountBuffer = null,\n    gridTransformMatrix = null,\n    projectPoints = false,\n    useGPU = true,\n    fp64 = false\n  } = {}) {\n    if (this.state.useGPU !== useGPU) {\n      changeFlags = DEFAULT_CHANGE_FLAGS;\n    }\n    this._setState({useGPU});\n    const transformMatrix =\n      gridTransformMatrix || (viewport && viewport.pixelProjectionMatrix) || IDENTITY_MATRIX;\n    const aggregationParams = {\n      positions,\n      positions64xyLow,\n      weights,\n      changeFlags,\n      cellSize,\n      viewport,\n      gridTransformMatrix: transformMatrix,\n      countsBuffer,\n      maxCountBuffer,\n      projectPoints,\n      fp64\n    };\n\n    this._updateGridSize({viewport, cellSize, width, height});\n    if (this._hasGPUSupport && useGPU) {\n      return this._runAggregationOnGPU(aggregationParams);\n    }\n    if (useGPU) {\n      log.warn('ScreenGridAggregator: GPU Aggregation not supported, falling back to CPU');\n    }\n    return this._runAggregationOnCPU(aggregationParams);\n  }\n\n  // PRIVATE\n\n  _getAggregateData(opts) {\n    let {countsBuffer, maxCountBuffer} = opts;\n    countsBuffer = this.gridAggregationFramebuffer.readPixelsToBuffer({\n      buffer: countsBuffer,\n      type: GL.FLOAT\n    });\n    maxCountBuffer = this.allAggregrationFramebuffer.readPixelsToBuffer({\n      width: 1,\n      height: 1,\n      type: GL.FLOAT,\n      buffer: maxCountBuffer\n    });\n    return {\n      countsBuffer,\n      countsTexture: this.gridAggregationFramebuffer.texture,\n      maxCountBuffer,\n      maxCountTexture: this.allAggregrationFramebuffer.texture\n    };\n  }\n\n  _getAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'Gird-Aggregation-Model',\n      vs: fp64 ? AGGREGATE_TO_GRID_VS_FP64 : AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: fp64 ? ['fp64', 'project64'] : ['project32'],\n      shaderCache,\n      vertexCount: 0,\n      drawMode: GL.POINTS\n    });\n  }\n\n  _getAllAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'All-Aggregation-Model',\n      vs: AGGREGATE_ALL_VS_FP64,\n      fs: AGGREGATE_ALL_FS,\n      modules: ['fp64'],\n      shaderCache,\n      vertexCount: 1,\n      drawMode: GL.POINTS,\n      isInstanced: true,\n      instanceCount: 0,\n      attributes: {position: new Buffer(gl, {size: 2, data: new Float32Array([0, 0])})}\n    });\n  }\n\n  _projectPositions(opts) {\n    let {projectedPositions} = this.state;\n    if (!projectedPositions || opts.changeFlags.dataChanged || opts.changeFlags.viewportChanged) {\n      const {positions, viewport} = opts;\n      projectedPositions = [];\n      for (let index = 0; index < positions.length; index += 2) {\n        const [x, y] = viewport.projectFlat([positions[index], positions[index + 1]]);\n        projectedPositions.push(x, y);\n      }\n      this._setState({projectedPositions});\n    }\n  }\n\n  _renderAggregateData(opts) {\n    const {cellSize, viewport, gridTransformMatrix, projectPoints} = opts;\n    const {numCol, numRow, windowSize} = this.state;\n    const {\n      gl,\n      gridAggregationFramebuffer,\n      gridAggregationModel,\n      allAggregrationFramebuffer,\n      allAggregationModel\n    } = this;\n\n    const uProjectionMatrixFP64 = fp64ifyMatrix4(gridTransformMatrix);\n    const gridSize = [numCol, numRow];\n\n    gridAggregationFramebuffer.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gridAggregationModel.draw({\n      parameters: {\n        clearColor: [0, 0, 0, 0],\n        clearDepth: 0,\n        blend: true,\n        depthTest: false,\n        blendEquation: GL.FUNC_ADD,\n        blendFunc: [GL.ONE, GL.ONE]\n      },\n      moduleSettings: {\n        viewport\n      },\n      uniforms: {\n        windowSize,\n        cellSize,\n        gridSize,\n        uProjectionMatrix: gridTransformMatrix,\n        uProjectionMatrixFP64,\n        projectPoints\n      }\n    });\n    gridAggregationFramebuffer.unbind();\n\n    allAggregrationFramebuffer.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    allAggregationModel.draw({\n      parameters: {\n        clearColor: [0, 0, 0, 0],\n        clearDepth: 0,\n        blend: true,\n        depthTest: false,\n        blendEquation: [GL.FUNC_ADD, GL.MAX],\n        blendFunc: [GL.ONE, GL.ONE]\n      },\n      uniforms: {\n        uSampler: gridAggregationFramebuffer.texture,\n        gridSize\n      }\n    });\n    allAggregrationFramebuffer.unbind();\n  }\n\n  /* eslint-disable max-statements */\n  _runAggregationOnCPU(opts) {\n    const ELEMENTCOUNT = 4;\n    const {positions, weights, cellSize, projectPoints, gridTransformMatrix} = opts;\n    let {countsBuffer, maxCountBuffer} = opts;\n    const {numCol, numRow} = this.state;\n    // Each element contains 4 floats to match with GPU ouput\n    const counts = new Float32Array(numCol * numRow * ELEMENTCOUNT);\n\n    let pos = positions;\n    if (projectPoints) {\n      this._projectPositions(opts);\n      pos = this.state.projectedPositions;\n    }\n\n    counts.fill(0);\n    let maxWeight = 0;\n    let totalCount = 0;\n    let totalWeight = 0;\n    for (let index = 0; index < pos.length; index += 2) {\n      const gridPos = worldToPixels([pos[index], pos[index + 1], 0], gridTransformMatrix);\n      const x = gridPos[0];\n      const y = gridPos[1];\n      const weight = weights ? weights[index / 2] : 1;\n      assert(Number.isFinite(weight));\n      const colId = Math.floor(x / cellSize[0]);\n      const rowId = Math.floor(y / cellSize[1]);\n      if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n        const i = (colId + rowId * numCol) * ELEMENTCOUNT;\n        counts[i]++;\n        counts[i + 1] += weight;\n        totalCount += 1;\n        totalWeight += weight;\n        if (counts[i + 1] > maxWeight) {\n          maxWeight = counts[i + 1];\n        }\n      }\n    }\n    const maxCountBufferData = new Float32Array(ELEMENTCOUNT);\n    // Store total count value in Red/X channel\n    maxCountBufferData[0] = totalCount;\n    // Store total weight value in Green/Y channel\n    maxCountBufferData[1] = totalWeight;\n    // Store max weight value in alpha/W channel.\n    maxCountBufferData[3] = maxWeight;\n\n    // Load data to WebGL buffer.\n    if (countsBuffer) {\n      countsBuffer.subData({data: counts});\n    } else {\n      countsBuffer = new Buffer(this.gl, {data: counts});\n    }\n    if (maxCountBuffer) {\n      maxCountBuffer.subData({data: maxCountBufferData});\n    } else {\n      maxCountBuffer = new Buffer(this.gl, {data: maxCountBufferData});\n    }\n    return {\n      // Buffer objects\n      countsBuffer,\n      maxCountBuffer,\n      // ArrayView objects\n      countsData: counts,\n      maxCountData: maxCountBufferData,\n      // Return total aggregaton values to avoid UBO setup for WebGL1 cases\n      totalCount,\n      totalWeight,\n      maxWeight\n    };\n  }\n  /* eslint-enable max-statements */\n\n  _runAggregationOnGPU(opts) {\n    this._updateModels(opts);\n    this._renderAggregateData(opts);\n    return this._getAggregateData(opts);\n  }\n\n  // Update priveate state\n  _setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  _setupGPUResources() {\n    const {gl} = this;\n\n    this.gridAggregationFramebuffer = setupFramebuffer(gl, {id: 'GridAggregation'});\n    this.allAggregrationFramebuffer = setupFramebuffer(gl, {id: 'AllAggregation'});\n  }\n\n  _setupModels(fp64 = false) {\n    if (this.gridAggregationModel) {\n      this.gridAggregationModel.delete();\n    }\n    this.gridAggregationModel = this._getAggregationModel(fp64);\n    if (this.allAggregationModel) {\n      this.allAggregationModel.delete();\n    }\n    this.allAggregationModel = this._getAllAggregationModel(fp64);\n  }\n\n  /* eslint-disable max-statements */\n  _updateModels(opts) {\n    const {gl} = this;\n    const {positions, positions64xyLow, weights, changeFlags} = opts;\n    const {numCol, numRow} = this.state;\n\n    let {positionsBuffer, positions64xyLowBuffer, weightsBuffer} = this.state;\n\n    const aggregationModelAttributes = {};\n\n    let createPos64xyLow = false;\n    if (opts.fp64 !== this.state.fp64) {\n      this._setupModels(opts.fp64);\n      this._setState({fp64: opts.fp64});\n      if (opts.fp64) {\n        createPos64xyLow = true;\n      }\n    }\n\n    if (changeFlags.dataChanged || !positionsBuffer) {\n      if (positionsBuffer) {\n        positionsBuffer.delete();\n      }\n      if (weightsBuffer) {\n        weightsBuffer.delete();\n      }\n      positionsBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions)});\n      weightsBuffer = new Buffer(gl, {size: 1, data: new Float32Array(weights)});\n      createPos64xyLow = opts.fp64;\n      Object.assign(aggregationModelAttributes, {\n        positions: positionsBuffer,\n        weights: weightsBuffer\n      });\n      this.gridAggregationModel.setVertexCount(positions.length / 2);\n      this._setState({positionsBuffer, weightsBuffer});\n    }\n\n    if (createPos64xyLow) {\n      assert(positions64xyLow);\n      if (positions64xyLowBuffer) {\n        positions64xyLowBuffer.delete();\n      }\n      positions64xyLowBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions64xyLow)});\n      Object.assign(aggregationModelAttributes, {\n        positions64xyLow: positions64xyLowBuffer\n      });\n      this._setState({positions64xyLowBuffer});\n    }\n\n    this.gridAggregationModel.setAttributes(aggregationModelAttributes);\n\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n\n      const framebufferSize = {width: numCol, height: numRow};\n      this.gridAggregationFramebuffer.resize(framebufferSize);\n      this.allAggregrationFramebuffer.resize(framebufferSize);\n    }\n  }\n  /* eslint-enable max-statements */\n\n  _updateGridSize(opts) {\n    const {viewport, cellSize} = opts;\n    const width = opts.width || viewport.width;\n    const height = opts.height || viewport.height;\n    const numCol = Math.ceil(width / cellSize[0]);\n    const numRow = Math.ceil(height / cellSize[1]);\n    this._setState({numCol, numRow, windowSize: [width, height]});\n  }\n}\n\n// Helper methods.\n\nfunction setupFramebuffer(gl, opts) {\n  const {id} = opts;\n  const texture = new Texture2D(gl, {\n    data: null,\n    format: GL.RGBA32F,\n    type: GL.FLOAT,\n    border: 0,\n    mipmaps: false,\n    parameters: {\n      [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n      [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n    },\n    dataFormat: GL.RGBA\n  });\n\n  const fb = new Framebuffer(gl, {\n    id,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n\n  return fb;\n}\n"],"file":"gpu-grid-aggregator.js"}