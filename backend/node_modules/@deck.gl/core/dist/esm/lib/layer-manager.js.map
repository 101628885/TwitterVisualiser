{"version":3,"sources":["../../../src/lib/layer-manager.js"],"names":["assert","Framebuffer","_ShaderCache","ShaderCache","seer","Layer","drawLayers","pickObject","pickVisibleObjects","LIFECYCLE","log","flatten","Stats","Viewport","setPropOverrides","layerEditListener","seerInitListener","initLayerInSeer","updateLayerInSeer","LOG_PRIORITY_LIFECYCLE","LOG_PRIORITY_LIFECYCLE_MINOR","INITIAL_CONTEXT","Object","seal","layerManager","gl","useDevicePixels","stats","viewport","id","shaderCache","pickingFBO","lastPickedInfo","index","layerId","animationProps","userData","layerName","layer","LayerManager","lastRenderedLayers","layers","context","assign","_cachePrograms","layerFilter","drawPickingColors","_needsRedraw","_needsUpdate","_activateViewport","bind","_initSeer","_editSeer","removeListener","clearRedrawFlags","_checkIfNeedsRedraw","reason","layerIds","filter","find","indexOf","props","setLayers","setNeedsRedraw","newLayers","Boolean","_updateLayers","oldLayers","error","generatedLayers","needsUpdate","pass","viewports","views","redrawReason","onViewportActive","x","y","mode","radius","depth","getLayers","_getPickingBuffer","width","height","redraw","layerNeedsRedraw","getNeedsRedraw","oldViewport","viewportChanged","equals","setChangeFlags","_updateLayer","resize","canvas","oldLayerMap","oldLayer","warn","_updateSublayersRecursively","error2","_finalizeOldLayers","firstError","newLayer","sublayers","_initializeLayer","_transferLayerState","push","isComposite","getSubLayers","err","_finalizeLayer","_initialize","lifecycle","INITIALIZED","internalState","getModels","model","_transferState","MATCHED","AWAITING_GC","printChangeFlags","_update","AWAITING_FINALIZATION","_finalize","FINALIZED","forEach","payload","type","valuePath","itemKey","slice","value","map","constructor","updateLayers"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {Framebuffer, _ShaderCache as ShaderCache} from 'luma.gl';\nimport seer from 'seer';\nimport Layer from './layer';\nimport {drawLayers} from './draw-layers';\nimport {pickObject, pickVisibleObjects} from './pick-layers';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from 'probe.gl';\n\nimport Viewport from '../viewports/viewport';\n\nimport {\n  setPropOverrides,\n  layerEditListener,\n  seerInitListener,\n  initLayerInSeer,\n  updateLayerInSeer\n} from './seer-integration';\n\nconst LOG_PRIORITY_LIFECYCLE = 2;\nconst LOG_PRIORITY_LIFECYCLE_MINOR = 4;\n\n// CONTEXT IS EXPOSED TO LAYERS\nconst INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  gl: null,\n\n  // Settings\n  useDevicePixels: true, // Exposed in case custom layers need to adjust sizes\n\n  // General resources\n  stats: null, // for tracking lifecycle performance\n\n  // Make sure context.viewport is not empty on the first layer initialization\n  viewport: new Viewport({id: 'DEFAULT-INITIAL-VIEWPORT'}), // Current viewport, exposed to layers for project* function\n\n  // GL Resources\n  shaderCache: null,\n  pickingFBO: null, // Screen-size framebuffer that layers can reuse\n\n  // State\n  lastPickedInfo: {\n    // For callback tracking and autohighlight\n    index: -1,\n    layerId: null\n  },\n\n  animationProps: null,\n\n  userData: {} // Place for any custom app `context`\n});\n\nconst layerName = layer => (layer instanceof Layer ? `${layer}` : !layer ? 'null' : 'invalid');\n\nexport default class LayerManager {\n  // eslint-disable-next-line\n  constructor(gl, {stats} = {}) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this.lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.lastRenderedLayers = [];\n    this.layers = [];\n\n    this.context = Object.assign({}, INITIAL_CONTEXT, {\n      layerManager: this,\n\n      gl,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      shaderCache: new ShaderCache({gl, _cachePrograms: true}),\n      stats: stats || new Stats({id: 'deck.gl'})\n    });\n\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n\n    this._activateViewport = this._activateViewport.bind(this);\n\n    // Seer integration\n    this._initSeer = this._initSeer.bind(this);\n    this._editSeer = this._editSeer.bind(this);\n\n    Object.seal(this);\n\n    seerInitListener(this._initSeer);\n    layerEditListener(this._editSeer);\n  }\n\n  // Method to call when the layer manager is not needed anymore.\n  // Currently used in the <DeckGL> componentWillUnmount lifecycle to unbind Seer listeners.\n  finalize() {\n    seer.removeListener(this._initSeer);\n    seer.removeListener(this._editSeer);\n  }\n\n  // Check if a redraw is needed\n  needsRedraw({clearRedrawFlags = true} = {}) {\n    return this._checkIfNeedsRedraw(clearRedrawFlags);\n  }\n\n  // Check if a deep update of all layers is needed\n  needsUpdate() {\n    return this._needsUpdate;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  // Gets an (optionally) filtered list of layers\n  getLayers({layerIds = null} = {}) {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  /**\n   * Set props needed for layer rendering and picking.\n   * Parameters are to be passed as a single object, with the following values:\n   * @param {Boolean} useDevicePixels\n   */\n  /* eslint-disable complexity, max-statements */\n  setProps(props) {\n    // TODO - For now we set layers before viewports to preserve changeFlags\n    if ('layers' in props) {\n      this.setLayers(props.layers);\n    }\n\n    if ('layerFilter' in props) {\n      if (this.layerFilter !== props.layerFilter) {\n        this.layerFilter = props.layerFilter;\n        this.setNeedsRedraw('layerFilter changed');\n      }\n    }\n\n    if ('drawPickingColors' in props) {\n      if (props.drawPickingColors !== this.drawPickingColors) {\n        this.drawPickingColors = props.drawPickingColors;\n        this.setNeedsRedraw('drawPickingColors changed');\n      }\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in props) {\n      this.context.userData = props.userData;\n    }\n\n    if ('useDevicePixels' in props) {\n      this.context.useDevicePixels = props.useDevicePixels;\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Supply a new layer list, initiating sublayer generation and layer matching\n  setLayers(newLayers) {\n    // TODO - something is generating state updates that cause rerender of the same\n    if (newLayers === this.lastRenderedLayers) {\n      log.log(3, 'Ignoring layer update due to layer array not changed')();\n      return this;\n    }\n    this.lastRenderedLayers = newLayers;\n\n    newLayers = flatten(newLayers, {filter: Boolean});\n\n    for (const layer of newLayers) {\n      layer.context = this.context;\n    }\n\n    const {error, generatedLayers} = this._updateLayers({\n      oldLayers: this.layers,\n      newLayers\n    });\n\n    this.layers = generatedLayers;\n\n    // Throw first error found, if any\n    if (error) {\n      throw error;\n    }\n    return this;\n  }\n\n  // Update layers from last cycle if `setNeedsUpdate()` has been called\n  updateLayers() {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // HACK - Call with a copy of lastRenderedLayers to trigger a full update\n      this.setLayers([...this.lastRenderedLayers]);\n    }\n  }\n\n  //\n  // METHODS FOR LAYERS\n  //\n\n  // Draw all layers in all views\n  drawLayers({pass = 'render to screen', viewports, views, redrawReason = 'unknown reason'}) {\n    const {drawPickingColors} = this;\n    const {gl, useDevicePixels} = this.context;\n\n    // render this viewport\n    drawLayers(gl, {\n      layers: this.layers,\n      viewports,\n      views,\n      onViewportActive: this._activateViewport,\n      useDevicePixels,\n      drawPickingColors,\n      pass,\n      layerFilter: this.layerFilter,\n      redrawReason\n    });\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject({x, y, mode, radius = 0, layerIds, viewports, depth = 1}) {\n    const {gl, useDevicePixels} = this.context;\n\n    const layers = this.getLayers({layerIds});\n\n    return pickObject(gl, {\n      // User params\n      x,\n      y,\n      radius,\n      layers,\n      mode,\n      layerFilter: this.layerFilter,\n      depth,\n      // Injected params\n      viewports,\n      onViewportActive: this._activateViewport,\n      pickingFBO: this._getPickingBuffer(),\n      lastPickedInfo: this.context.lastPickedInfo,\n      useDevicePixels\n    });\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects({x, y, width, height, layerIds, viewports}) {\n    const {gl, useDevicePixels} = this.context;\n\n    const layers = this.getLayers({layerIds});\n\n    return pickVisibleObjects(gl, {\n      x,\n      y,\n      width,\n      height,\n      layers,\n      layerFilter: this.layerFilter,\n      mode: 'pickObjects',\n      viewports,\n      onViewportActive: this._activateViewport,\n      pickingFBO: this._getPickingBuffer(),\n      useDevicePixels\n    });\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _checkIfNeedsRedraw(clearRedrawFlags) {\n    let redraw = this._needsRedraw;\n    if (clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw({clearRedrawFlags});\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  // Make a viewport \"current\" in layer context, updating viewportChanged flags\n  _activateViewport(viewport) {\n    const oldViewport = this.context.viewport;\n    const viewportChanged = !oldViewport || !viewport.equals(oldViewport);\n\n    if (viewportChanged) {\n      log.log(4, 'Viewport changed', viewport)();\n\n      this.context.viewport = viewport;\n\n      // Update layers states\n      // Let screen space layers update their state based on viewport\n      for (const layer of this.layers) {\n        layer.setChangeFlags({viewportChanged: 'Viewport changed'});\n        this._updateLayer(layer);\n      }\n    }\n\n    assert(this.context.viewport, 'LayerManager: viewport not set');\n\n    return this;\n  }\n\n  _getPickingBuffer() {\n    const {gl} = this.context;\n    // Create a frame buffer if not already available\n    this.context.pickingFBO = this.context.pickingFBO || new Framebuffer(gl);\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.context.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    return this.context.pickingFBO;\n  }\n\n  // Match all layers, checking for caught errors\n  // To avoid having an exception in one layer disrupt other layers\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  _updateLayers({oldLayers, newLayers}) {\n    // Create old layer map\n    const oldLayerMap = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${layerName(oldLayer)}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers = [];\n\n    // Match sublayers\n    const error = this._updateSublayersRecursively({\n      newLayers,\n      oldLayerMap,\n      generatedLayers\n    });\n\n    // Finalize unmatched layers\n    const error2 = this._finalizeOldLayers(oldLayerMap);\n\n    this._needsUpdate = false;\n\n    const firstError = error || error2;\n    return {error: firstError, generatedLayers};\n  }\n\n  // Note: adds generated layers to `generatedLayers` array parameter\n  _updateSublayersRecursively({newLayers, oldLayerMap, generatedLayers}) {\n    let error = null;\n\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${layerName(newLayer)}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n          initLayerInSeer(newLayer); // Initializes layer in seer chrome extension (if connected)\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          this._updateLayer(newLayer);\n          updateLayerInSeer(newLayer); // Updates layer in seer chrome extension (if connected)\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite && newLayer.getSubLayers();\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        log.warn(`error during matching of ${layerName(newLayer)}`, err);\n        error = error || err; // Record first exception\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively({\n          newLayers: sublayers,\n          oldLayerMap,\n          generatedLayers\n        });\n      }\n    }\n\n    return error;\n  }\n\n  // Finalize any old layers that were not matched\n  _finalizeOldLayers(oldLayerMap) {\n    let error = null;\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        error = error || this._finalizeLayer(layer);\n      }\n    }\n    return error;\n  }\n\n  // EXCEPTION SAFE LAYER ACCESS\n\n  // Initializes a single layer, calling layer methods\n  _initializeLayer(layer) {\n    log.log(LOG_PRIORITY_LIFECYCLE, `initializing ${layerName(layer)}`)();\n\n    let error = null;\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      log.warn(`error while initializing ${layerName(layer)}\\n`, err)();\n      error = error || err;\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n\n    // Set back pointer (used in picking)\n    layer.internalState.layer = layer;\n\n    // Save layer on model for picking purposes\n    // store on model.userData rather than directly on model\n    for (const model of layer.getModels()) {\n      model.userData.layer = layer;\n    }\n\n    return error;\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      log.log(\n        LOG_PRIORITY_LIFECYCLE_MINOR,\n        `matched ${layerName(newLayer)}`,\n        oldLayer,\n        '->',\n        newLayer\n      )();\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    } else {\n      log.log(LOG_PRIORITY_LIFECYCLE_MINOR, `Matching layer is unchanged ${newLayer.id}`)();\n    }\n  }\n\n  // Updates a single layer, cleaning all flags\n  _updateLayer(layer) {\n    log.log(\n      LOG_PRIORITY_LIFECYCLE_MINOR,\n      `updating ${layer} because: ${layer.printChangeFlags()}`\n    )();\n    let error = null;\n    try {\n      layer._update();\n    } catch (err) {\n      log.warn(`error during update of ${layerName(layer)}`, err)();\n      // Save first error\n      error = err;\n    }\n    return error;\n  }\n\n  // Finalizes a single layer\n  _finalizeLayer(layer) {\n    assert(layer.lifecycle !== LIFECYCLE.AWAITING_FINALIZATION);\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n    let error = null;\n    this.setNeedsRedraw(`finalized ${layerName(layer)}`);\n    try {\n      layer._finalize();\n    } catch (err) {\n      log.warn(`error during finalization of ${layerName(layer)}`, err)();\n      error = err;\n    }\n    layer.lifecycle = LIFECYCLE.FINALIZED;\n    log.log(LOG_PRIORITY_LIFECYCLE, `finalizing ${layerName(layer)}`);\n    return error;\n  }\n\n  // SEER INTEGRATION\n\n  /**\n   * Called upon Seer initialization, manually sends layers data.\n   */\n  _initSeer() {\n    this.layers.forEach(layer => {\n      initLayerInSeer(layer);\n      updateLayerInSeer(layer);\n    });\n  }\n\n  /**\n   * On Seer property edition, set override and update layers.\n   */\n  _editSeer(payload) {\n    if (payload.type !== 'edit' || payload.valuePath[0] !== 'props') {\n      return;\n    }\n\n    setPropOverrides(payload.itemKey, payload.valuePath.slice(1), payload.value);\n    const newLayers = this.layers.map(layer => new layer.constructor(layer.props));\n    this.updateLayers({newLayers});\n  }\n}\n"],"file":"layer-manager.js"}