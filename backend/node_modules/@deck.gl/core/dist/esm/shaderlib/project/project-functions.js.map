{"version":3,"sources":["../../../../src/shaderlib/project/project-functions.js"],"names":["COORDINATE_SYSTEM","vec4_transformMat4","vec3_sub","lngLatZToWorldPosition","lngLatZ","viewport","projectFlat","X","Y","Z","distanceScales","pixelsPerMeter","projectPosition","position","coordinateSystem","coordinateOrigin","modelMatrix","fromCoordinateSystem","fromCoordinateOrigin","x","y","z","worldPosition","undefined","LNGLAT","LNGLAT_OFFSETS","METER_OFFSETS","addMetersToLngLat","originWorld"],"mappings":"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","sourcesContent":["/**\n * Projection utils\n * TODO: move to Viewport class?\n */\nimport {COORDINATE_SYSTEM} from '../../lib/constants';\nimport vec4_transformMat4 from 'gl-vec4/transformMat4';\nimport vec3_sub from 'gl-vec3/subtract';\n\nfunction lngLatZToWorldPosition(lngLatZ, viewport) {\n  const [X, Y] = viewport.projectFlat(lngLatZ);\n  const Z = (lngLatZ[2] || 0) * viewport.distanceScales.pixelsPerMeter[2];\n  return [X, Y, Z];\n}\n\n/**\n * Equivalent to project_position in project.glsl\n * projects a user supplied position to world position in the target coordinates system\n * @param {array} position - [x, y, z]\n * @param {object} params\n * @param {Viewport} params.viewport - the current viewport\n * @param {number} params.coordinateSystem - the coordinate system to project into\n * @param {array} params.coordinateOrigin - the coordinate origin to project into\n * @param {Matrix4} [params.modelMatrix] - the model matrix of the supplied position\n * @param {number} [params.fromCoordinateSystem] - the coordinate system that the\n *   supplied position is in. Default to the same as `coordinateSystem`.\n * @param {array} [params.fromCoordinateOrigin] - the coordinate origin that the\n *   supplied position is in. Default to the same as `coordinateOrigin`.\n */\nexport function projectPosition(\n  position,\n  {\n    // required\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    // optional\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  }\n) {\n  let [x, y, z] = position;\n  let worldPosition;\n\n  if (modelMatrix) {\n    [x, y, z] = vec4_transformMat4([], [x, y, z, 1.0], modelMatrix);\n  }\n  if (fromCoordinateSystem === undefined) {\n    fromCoordinateSystem = coordinateSystem;\n  }\n  if (fromCoordinateOrigin === undefined) {\n    fromCoordinateOrigin = coordinateOrigin;\n  }\n\n  // pre-project light coordinates\n  switch (fromCoordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n      worldPosition = lngLatZToWorldPosition([x, y, z], viewport);\n      break;\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      worldPosition = lngLatZToWorldPosition(\n        [\n          x + fromCoordinateOrigin[0],\n          y + fromCoordinateOrigin[1],\n          z + (fromCoordinateOrigin[2] || 0)\n        ],\n        viewport\n      );\n      break;\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      worldPosition = lngLatZToWorldPosition(\n        viewport.addMetersToLngLat(fromCoordinateOrigin, [x, y, z]),\n        viewport\n      );\n      break;\n\n    default:\n      worldPosition = [x, y, z];\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      const originWorld = lngLatZToWorldPosition(coordinateOrigin, viewport);\n      vec3_sub(worldPosition, worldPosition, originWorld);\n      worldPosition[1] = -worldPosition[1];\n      break;\n\n    default:\n  }\n\n  return worldPosition;\n}\n"],"file":"project-functions.js"}