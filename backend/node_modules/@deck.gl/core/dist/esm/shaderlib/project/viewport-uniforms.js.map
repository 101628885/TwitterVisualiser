{"version":3,"sources":["../../../../src/shaderlib/project/viewport-uniforms.js"],"names":["mat4_multiply","vec4_transformMat4","COORDINATE_SYSTEM","memoize","log","assert","PROJECT_COORDINATE_SYSTEM","ZERO_VECTOR","VECTOR_TO_POINT_MATRIX","IDENTITY_MATRIX","DEFAULT_PIXELS_PER_UNIT2","DEFAULT_COORDINATE_ORIGIN","LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD","getMemoizedViewportUniforms","calculateViewportUniforms","getShaderCoordinateSystem","coordinateSystem","fp64","LNG_LAT","LNGLAT_EXPERIMENTAL","LNGLAT_AUTO_OFFSET","LNGLAT","LNGLAT_DEPRECATED","METER_OFFSETS","METERS","LNGLAT_OFFSETS","IDENTITY","calculateMatrixAndOffset","viewport","coordinateOrigin","coordinateZoom","viewMatrixUncentered","viewMatrix","projectionMatrix","viewProjectionMatrix","projectionCenter","shaderCoordinateSystem","shaderCoordinateOrigin","lng","Math","fround","longitude","lat","latitude","positionPixels","projectFlat","pow","Error","cameraPos","cameraPosition","getUniformsFromViewport","devicePixelRatio","modelMatrix","wrapLongitude","projectionMode","positionOrigin","undefined","removed","Object","assign","project_uModelMatrix","zoom","distanceScales","getDistanceScales","viewportSize","width","height","uniforms","project_uCoordinateSystem","project_uCenter","project_uWrapLongitude","project_uAntimeridian","project_uViewportSize","project_uDevicePixelRatio","project_uFocalDistance","focalDistance","project_uPixelsPerMeter","pixelsPerMeter","project_uPixelsPerDegree","pixelsPerDegree","project_uPixelsPerUnit","project_uPixelsPerUnit2","project_uScale","scale","project_uViewProjectionMatrix","project_uCameraPosition","distanceScalesAtOrigin","pixelsPerMeter2","project_coordinate_origin","pixelsPerDegree2"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport mat4_multiply from 'gl-mat4/multiply';\nimport vec4_transformMat4 from 'gl-vec4/transformMat4';\n\nimport {COORDINATE_SYSTEM} from '../../lib/constants';\n\nimport memoize from '../../utils/memoize';\nimport log from '../../utils/log';\nimport assert from '../../utils/assert';\n\nimport {PROJECT_COORDINATE_SYSTEM} from './constants';\n\n// To quickly set a vector to zero\nconst ZERO_VECTOR = [0, 0, 0, 0];\n// 4x4 matrix that drops 4th component of vector\nconst VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nconst DEFAULT_PIXELS_PER_UNIT2 = [0, 0, 0];\nconst DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];\n\n// Based on viewport-mercator-project/test/fp32-limits.js\nconst LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD = 12;\n\nconst getMemoizedViewportUniforms = memoize(calculateViewportUniforms);\n\nfunction getShaderCoordinateSystem(coordinateSystem, fp64) {\n  if (fp64) {\n    // This is the only mode that works with fp64\n    return PROJECT_COORDINATE_SYSTEM.LNG_LAT;\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT_EXPERIMENTAL:\n      return PROJECT_COORDINATE_SYSTEM.LNGLAT_AUTO_OFFSET;\n\n    case COORDINATE_SYSTEM.LNGLAT:\n    case COORDINATE_SYSTEM.LNGLAT_DEPRECATED:\n    default:\n      return PROJECT_COORDINATE_SYSTEM.LNG_LAT;\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n    case COORDINATE_SYSTEM.METERS:\n      return PROJECT_COORDINATE_SYSTEM.METER_OFFSETS;\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return PROJECT_COORDINATE_SYSTEM.LNGLAT_OFFSETS;\n\n    case COORDINATE_SYSTEM.IDENTITY:\n      return PROJECT_COORDINATE_SYSTEM.IDENTITY;\n  }\n}\n\n// The code that utilizes Matrix4 does the same calculation as their mat4 counterparts,\n// has lower performance but provides error checking.\n// Uncomment when debugging\nfunction calculateMatrixAndOffset({\n  // UNCHANGED\n  viewport,\n  // NEW PARAMS\n  coordinateSystem,\n  coordinateOrigin,\n  coordinateZoom,\n  fp64\n}) {\n  const {viewMatrixUncentered} = viewport;\n  let {viewMatrix} = viewport;\n  const {projectionMatrix} = viewport;\n  let {viewProjectionMatrix} = viewport;\n\n  let projectionCenter;\n  let shaderCoordinateSystem = getShaderCoordinateSystem(coordinateSystem, fp64);\n  let shaderCoordinateOrigin = coordinateOrigin;\n\n  if (shaderCoordinateSystem === PROJECT_COORDINATE_SYSTEM.LNGLAT_AUTO_OFFSET) {\n    if (coordinateZoom < LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD) {\n      // Use LNG_LAT projection if not zooming\n      shaderCoordinateSystem = PROJECT_COORDINATE_SYSTEM.LNG_LAT;\n    } else {\n      // Use LNGLAT_AUTO_OFFSET\n      const lng = Math.fround(viewport.longitude);\n      const lat = Math.fround(viewport.latitude);\n      shaderCoordinateOrigin = [lng, lat];\n    }\n  }\n\n  switch (shaderCoordinateSystem) {\n    case PROJECT_COORDINATE_SYSTEM.IDENTITY:\n    case PROJECT_COORDINATE_SYSTEM.LNG_LAT:\n      projectionCenter = ZERO_VECTOR;\n      break;\n\n    // TODO: make lighting work for meter offset mode\n    case PROJECT_COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n    case PROJECT_COORDINATE_SYSTEM.METER_OFFSETS:\n    case PROJECT_COORDINATE_SYSTEM.LNGLAT_AUTO_OFFSET:\n      // Calculate transformed projectionCenter (using 64 bit precision JS)\n      // This is the key to offset mode precision\n      // (avoids doing this addition in 32 bit precision in GLSL)\n      const positionPixels = viewport.projectFlat(\n        shaderCoordinateOrigin,\n        Math.pow(2, coordinateZoom)\n      );\n      // projectionCenter = new Matrix4(viewProjectionMatrix)\n      //   .transformVector([positionPixels[0], positionPixels[1], 0.0, 1.0]);\n      projectionCenter = vec4_transformMat4(\n        [],\n        [positionPixels[0], positionPixels[1], 0.0, 1.0],\n        viewProjectionMatrix\n      );\n\n      // Always apply uncentered projection matrix if available (shader adds center)\n      viewMatrix = viewMatrixUncentered || viewMatrix;\n\n      // Zero out 4th coordinate (\"after\" model matrix) - avoids further translations\n      // viewMatrix = new Matrix4(viewMatrixUncentered || viewMatrix)\n      //   .multiplyRight(VECTOR_TO_POINT_MATRIX);\n      viewProjectionMatrix = mat4_multiply([], projectionMatrix, viewMatrix);\n      viewProjectionMatrix = mat4_multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);\n      break;\n\n    default:\n      throw new Error('Unknown projection mode');\n  }\n\n  return {\n    viewMatrix,\n    viewProjectionMatrix,\n    projectionCenter,\n    cameraPos: viewport.cameraPosition,\n    shaderCoordinateSystem,\n    shaderCoordinateOrigin\n  };\n}\n\n/**\n * Returns uniforms for shaders based on current projection\n * includes: projection matrix suitable for shaders\n *\n * TODO - Ensure this works with any viewport, not just WebMercatorViewports\n *\n * @param {WebMercatorViewport} viewport -\n * @return {Float32Array} - 4x4 projection matrix that can be used in shaders\n */\nexport function getUniformsFromViewport({\n  viewport,\n  devicePixelRatio = 1,\n  modelMatrix = null,\n  // Match Layer.defaultProps\n  coordinateSystem = COORDINATE_SYSTEM.LNGLAT,\n  coordinateOrigin = DEFAULT_COORDINATE_ORIGIN,\n  wrapLongitude = false,\n  fp64 = false,\n  // Deprecated\n  projectionMode,\n  positionOrigin\n} = {}) {\n  assert(viewport);\n\n  if (projectionMode !== undefined) {\n    log.removed('projectionMode', 'coordinateSystem');\n  }\n  if (positionOrigin !== undefined) {\n    log.removed('positionOrigin', 'coordinateOrigin');\n  }\n\n  return Object.assign(\n    {\n      project_uModelMatrix: modelMatrix || IDENTITY_MATRIX\n    },\n    getMemoizedViewportUniforms({\n      viewport,\n      devicePixelRatio,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      fp64\n    })\n  );\n}\n\nfunction calculateViewportUniforms({\n  viewport,\n  devicePixelRatio,\n  coordinateSystem,\n  coordinateOrigin,\n  wrapLongitude,\n  fp64\n}) {\n  const coordinateZoom = viewport.zoom;\n  assert(coordinateZoom >= 0);\n\n  const {\n    projectionCenter,\n    viewProjectionMatrix,\n    cameraPos,\n    shaderCoordinateSystem,\n    shaderCoordinateOrigin\n  } = calculateMatrixAndOffset({\n    coordinateSystem,\n    coordinateOrigin,\n    coordinateZoom,\n    viewport,\n    fp64\n  });\n\n  assert(viewProjectionMatrix, 'Viewport missing modelViewProjectionMatrix');\n\n  // Calculate projection pixels per unit\n  const distanceScales = viewport.getDistanceScales();\n\n  const viewportSize = [viewport.width * devicePixelRatio, viewport.height * devicePixelRatio];\n\n  const uniforms = {\n    // Projection mode values\n    project_uCoordinateSystem: shaderCoordinateSystem,\n    project_uCenter: projectionCenter,\n    project_uWrapLongitude: wrapLongitude,\n    project_uAntimeridian: (viewport.longitude || 0) - 180,\n\n    // Screen size\n    project_uViewportSize: viewportSize,\n    project_uDevicePixelRatio: devicePixelRatio,\n\n    // Distance at which screen pixels are projected\n    project_uFocalDistance: viewport.focalDistance || 1,\n    project_uPixelsPerMeter: distanceScales.pixelsPerMeter,\n    project_uPixelsPerDegree: distanceScales.pixelsPerDegree,\n    project_uPixelsPerUnit: distanceScales.pixelsPerMeter,\n    project_uPixelsPerUnit2: DEFAULT_PIXELS_PER_UNIT2,\n    project_uScale: viewport.scale, // This is the mercator scale (2 ** zoom)\n\n    project_uViewProjectionMatrix: viewProjectionMatrix,\n\n    // This is for lighting calculations\n    project_uCameraPosition: cameraPos\n  };\n\n  const distanceScalesAtOrigin = viewport.getDistanceScales(shaderCoordinateOrigin);\n\n  switch (shaderCoordinateSystem) {\n    case PROJECT_COORDINATE_SYSTEM.METER_OFFSETS:\n      uniforms.project_uPixelsPerUnit = distanceScalesAtOrigin.pixelsPerMeter;\n      uniforms.project_uPixelsPerUnit2 = distanceScalesAtOrigin.pixelsPerMeter2;\n      break;\n\n    case PROJECT_COORDINATE_SYSTEM.LNGLAT_AUTO_OFFSET:\n      uniforms.project_coordinate_origin = shaderCoordinateOrigin;\n    // eslint-disable-line no-fallthrough\n    case PROJECT_COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      uniforms.project_uPixelsPerUnit = distanceScalesAtOrigin.pixelsPerDegree;\n      uniforms.project_uPixelsPerUnit2 = distanceScalesAtOrigin.pixelsPerDegree2;\n      break;\n\n    default:\n      break;\n  }\n\n  return uniforms;\n}\n"],"file":"viewport-uniforms.js"}