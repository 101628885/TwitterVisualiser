function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import View from './view';
import Viewport from '../viewports/viewport';
import { Matrix4 } from 'math.gl';
import OrthographicController from '../controllers/orthographic-controller';

var OrthographicView =
/*#__PURE__*/
function (_View) {
  _inherits(OrthographicView, _View);

  function OrthographicView() {
    _classCallCheck(this, OrthographicView);

    return _possibleConstructorReturn(this, _getPrototypeOf(OrthographicView).apply(this, arguments));
  }

  _createClass(OrthographicView, [{
    key: "_getViewport",
    value: function _getViewport(_ref) {
      var x = _ref.x,
          y = _ref.y,
          width = _ref.width,
          height = _ref.height,
          viewState = _ref.viewState;
      // Get view matrix parameters from view state
      var _viewState$eye = viewState.eye,
          eye = _viewState$eye === void 0 ? [0, 0, 1] : _viewState$eye,
          _viewState$lookAt = viewState.lookAt,
          lookAt = _viewState$lookAt === void 0 ? [0, 0, 0] : _viewState$lookAt,
          _viewState$up = viewState.up,
          up = _viewState$up === void 0 ? [0, 1, 0] : _viewState$up,
          _viewState$offset = viewState.offset,
          offset = _viewState$offset === void 0 ? [0, 1] : _viewState$offset,
          _viewState$zoom = viewState.zoom,
          zoom = _viewState$zoom === void 0 ? 1 : _viewState$zoom; // Make sure Matrix4.ortho doesn't crash on 0 width/height

      width = width || 1;
      height = height || 1; // Get projection matrix parameters from the view itself
      // NOTE: automatically calculated from width and height if not provided

      var _this$props = this.props,
          _this$props$left = _this$props.left,
          left = _this$props$left === void 0 ? (-width / 2 + offset[0]) * zoom : _this$props$left,
          _this$props$top = _this$props.top,
          top = _this$props$top === void 0 ? (-height / 2 + offset[1]) * zoom : _this$props$top,
          _this$props$right = _this$props.right,
          right = _this$props$right === void 0 ? (width / 2 + offset[0]) * zoom : _this$props$right,
          _this$props$bottom = _this$props.bottom,
          bottom = _this$props$bottom === void 0 ? (height / 2 + offset[1]) * zoom : _this$props$bottom,
          _this$props$near = _this$props.near,
          near = _this$props$near === void 0 ? 1 : _this$props$near,
          _this$props$far = _this$props.far,
          far = _this$props$far === void 0 ? 100 : _this$props$far;
      return new Viewport({
        id: this.id,
        x: x,
        y: y,
        width: width,
        height: height,
        viewMatrix: new Matrix4().lookAt({
          eye: eye,
          lookAt: lookAt,
          up: up
        }),
        projectionMatrix: new Matrix4().ortho({
          left: left,
          right: right,
          bottom: bottom,
          top: top,
          near: near,
          far: far
        })
      });
    }
  }, {
    key: "controller",
    get: function get() {
      return this._getControllerProps({
        type: OrthographicController
      });
    }
  }]);

  return OrthographicView;
}(View);

export { OrthographicView as default };
OrthographicView.displayName = 'OrthographicView';
//# sourceMappingURL=orthographic-view.js.map