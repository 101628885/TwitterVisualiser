{"version":3,"sources":["../../../src/scatterplot-layer/scatterplot-layer.js"],"names":["fp64LowPart","fp64","DEFAULT_COLOR","defaultProps","radiusScale","radiusMinPixels","radiusMaxPixels","Number","MAX_SAFE_INTEGER","strokeWidth","outline","getPosition","x","position","getRadius","getColor","ScatterplotLayer","id","projectModule","use64bitProjection","vs","fs","modules","getAttributeManager","addInstanced","instancePositions","size","transition","accessor","instancePositions64xyLow","update","calculateInstancePositions64xyLow","instanceRadius","defaultValue","instanceColors","type","GL","UNSIGNED_BYTE","props","oldProps","changeFlags","gl","context","state","model","delete","setState","_getModel","invalidateAll","uniforms","render","Object","assign","positions","Model","getShaders","geometry","Geometry","drawMode","TRIANGLE_FAN","attributes","Float32Array","isInstanced","shaderCache","attribute","isFP64","use64bitPositions","constant","value","data","i","point","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  radiusScale: 1,\n  radiusMinPixels: 0, //  min point radius in pixels\n  radiusMaxPixels: Number.MAX_SAFE_INTEGER, // max point radius in pixels\n  strokeWidth: 1,\n  outline: false,\n  fp64: false,\n\n  getPosition: x => x.position,\n  getRadius: 1,\n  getColor: DEFAULT_COLOR\n};\n\nexport default class ScatterplotLayer extends Layer {\n  getShaders(id) {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'picking']};\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: 4,\n        transition: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {radiusScale, radiusMinPixels, radiusMaxPixels, outline, strokeWidth} = this.props;\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        outline: outline ? 1 : 0,\n        strokeWidth,\n        radiusScale,\n        radiusMinPixels,\n        radiusMaxPixels\n      })\n    );\n  }\n\n  _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];\n\n    return new Model(\n      gl,\n      Object.assign(this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n}\n\nScatterplotLayer.layerName = 'ScatterplotLayer';\nScatterplotLayer.defaultProps = defaultProps;\n"],"file":"scatterplot-layer.js"}