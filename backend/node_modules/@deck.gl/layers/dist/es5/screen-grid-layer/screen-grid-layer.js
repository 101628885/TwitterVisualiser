"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _core = require("@deck.gl/core");

var _constants = _interopRequireDefault(require("luma.gl/constants"));

var _luma = require("luma.gl");

var _screenGridLayerVertex = _interopRequireDefault(require("./screen-grid-layer-vertex.glsl"));

var _screenGridLayerVertexWebgl = _interopRequireDefault(require("./screen-grid-layer-vertex-webgl1.glsl"));

var _screenGridLayerFragment = _interopRequireDefault(require("./screen-grid-layer-fragment.glsl"));

var _screenGridLayerFragmentWebgl = _interopRequireDefault(require("./screen-grid-layer-fragment-webgl1.glsl"));

var _assert = _interopRequireDefault(require("assert"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var defaultColorRange = _core.experimental.defaultColorRange;
var DEFAULT_MINCOLOR = [0, 0, 0, 0];
var DEFAULT_MAXCOLOR = [0, 255, 0, 255];
var AGGREGATION_DATA_UBO_INDEX = 0;
var COLOR_PROPS = ["minColor", "maxColor", "colorRange", "colorDomain"];
var COLOR_RANGE_LENGTH = 6;
var defaultProps = {
  cellSizePixels: {
    value: 100,
    min: 1
  },
  cellMarginPixels: {
    value: 2,
    min: 0,
    max: 5
  },
  colorDomain: null,
  colorRange: defaultColorRange,
  getPosition: function getPosition(d) {
    return d.position;
  },
  getWeight: function getWeight(d) {
    return 1;
  },
  gpuAggregation: true
};

var ScreenGridLayer =
/*#__PURE__*/
function (_Layer) {
  _inherits(ScreenGridLayer, _Layer);

  function ScreenGridLayer() {
    _classCallCheck(this, ScreenGridLayer);

    return _possibleConstructorReturn(this, _getPrototypeOf(ScreenGridLayer).apply(this, arguments));
  }

  _createClass(ScreenGridLayer, [{
    key: "getShaders",
    value: function getShaders() {
      var shaders = (0, _luma.isWebGL2)(this.context.gl) ? {
        vs: _screenGridLayerVertex.default,
        fs: _screenGridLayerFragment.default
      } : {
        vs: _screenGridLayerVertexWebgl.default,
        fs: _screenGridLayerFragmentWebgl.default
      };
      shaders.modules = ['picking'];
      return shaders;
    }
  }, {
    key: "initializeState",
    value: function initializeState() {
      var attributeManager = this.getAttributeManager();
      var gl = this.context.gl;
      /* eslint-disable max-len */

      attributeManager.addInstanced({
        instancePositions: {
          size: 3,
          update: this.calculateInstancePositions
        },
        instanceCounts: {
          size: 4,
          transition: true,
          accessor: ['getPosition', 'getWeight'],
          update: this.calculateInstanceCounts,
          noAlloc: true
        }
      });
      /* eslint-disable max-len */

      var options = {
        id: "".concat(this.id, "-aggregator"),
        shaderCache: this.context.shaderCache
      };
      this.setState({
        model: this._getModel(gl),
        gpuGridAggregator: new _core._GPUGridAggregator(gl, options),
        maxCountBuffer: this._getMaxCountBuffer(gl),
        aggregationData: null
      });

      this._setupUniformBuffer();
    }
  }, {
    key: "shouldUpdateState",
    value: function shouldUpdateState(_ref) {
      var changeFlags = _ref.changeFlags;
      return changeFlags.somethingChanged;
    }
  }, {
    key: "updateState",
    value: function updateState(opts) {
      _get(_getPrototypeOf(ScreenGridLayer.prototype), "updateState", this).call(this, opts);

      this._updateUniforms(opts);

      if (opts.changeFlags.dataChanged) {
        this._processData();
      }

      var changeFlags = this._getAggregationChangeFlags(opts);

      if (changeFlags) {
        this._updateAggregation(changeFlags);
      }
    }
  }, {
    key: "draw",
    value: function draw(_ref2) {
      var uniforms = _ref2.uniforms;
      var gl = this.context.gl;
      var _this$props$parameter = this.props.parameters,
          parameters = _this$props$parameter === void 0 ? {} : _this$props$parameter;
      var minColor = this.props.minColor || DEFAULT_MINCOLOR;
      var maxColor = this.props.maxColor || DEFAULT_MAXCOLOR; // If colorDomain not specified we use default domain [1, maxCount]
      // maxCount value will be deduced from aggregated buffer in the vertex shader.

      var colorDomain = this.props.colorDomain || [1, 0];
      var _this$state = this.state,
          model = _this$state.model,
          maxCountBuffer = _this$state.maxCountBuffer,
          cellScale = _this$state.cellScale,
          shouldUseMinMax = _this$state.shouldUseMinMax,
          colorRange = _this$state.colorRange,
          maxWeight = _this$state.maxWeight;
      var layerUniforms = {
        minColor: minColor,
        maxColor: maxColor,
        cellScale: cellScale,
        colorRange: colorRange,
        colorDomain: colorDomain,
        shouldUseMinMax: shouldUseMinMax
      };

      if ((0, _luma.isWebGL2)(gl)) {
        maxCountBuffer.bind({
          target: _constants.default.UNIFORM_BUFFER
        });
      } else {
        layerUniforms.maxWeight = maxWeight;
      }

      uniforms = Object.assign(layerUniforms, uniforms);
      model.draw({
        uniforms: uniforms,
        parameters: Object.assign({
          depthTest: false,
          depthMask: false
        }, parameters)
      });

      if ((0, _luma.isWebGL2)(gl)) {
        maxCountBuffer.unbind();
      }
    }
  }, {
    key: "calculateInstancePositions",
    value: function calculateInstancePositions(attribute, _ref3) {
      var numInstances = _ref3.numInstances;
      var _this$context$viewpor = this.context.viewport,
          width = _this$context$viewpor.width,
          height = _this$context$viewpor.height;
      var cellSizePixels = this.props.cellSizePixels;
      var numCol = this.state.numCol;
      var value = attribute.value,
          size = attribute.size;

      for (var i = 0; i < numInstances; i++) {
        var x = i % numCol;
        var y = Math.floor(i / numCol);
        value[i * size + 0] = x * cellSizePixels / width * 2 - 1;
        value[i * size + 1] = 1 - y * cellSizePixels / height * 2;
        value[i * size + 2] = 0;
      }
    }
  }, {
    key: "calculateInstanceCounts",
    value: function calculateInstanceCounts(attribute, _ref4) {
      var numInstances = _ref4.numInstances;
      var countsBuffer = this.state.countsBuffer;
      attribute.update({
        buffer: countsBuffer
      });
    }
  }, {
    key: "getPickingInfo",
    value: function getPickingInfo(_ref5) {
      var info = _ref5.info,
          mode = _ref5.mode;
      var index = info.index;

      if (index >= 0) {
        var aggregationData = this.state.aggregationData;

        if (!aggregationData) {
          aggregationData = {
            countsData: this.state.countsBuffer.getData(),
            maxCountData: this.state.maxCountBuffer.getData()
          }; // Cache aggregationData to avoid multiple buffer reads.

          this.setState({
            aggregationData: aggregationData
          });
        }

        var _aggregationData = aggregationData,
            countsData = _aggregationData.countsData,
            maxCountData = _aggregationData.maxCountData; // Each instance (one cell) is aggregated into single pixel,
        // Get current instance's aggregation details.

        info.object = _core._GPUGridAggregator.getAggregationData({
          countsData: countsData,
          maxCountData: maxCountData,
          pixelIndex: index
        });
      }

      return info;
    } // HELPER Methods

  }, {
    key: "_getAggregationChangeFlags",
    value: function _getAggregationChangeFlags(_ref6) {
      var oldProps = _ref6.oldProps,
          props = _ref6.props,
          changeFlags = _ref6.changeFlags;
      var cellSizeChanged = props.cellSizePixels !== oldProps.cellSizePixels || props.cellMarginPixels !== oldProps.cellMarginPixels;
      var dataChanged = changeFlags.dataChanged;
      var viewportChanged = changeFlags.viewportChanged;

      if (cellSizeChanged || dataChanged || viewportChanged) {
        return {
          cellSizeChanged: cellSizeChanged,
          dataChanged: dataChanged,
          viewportChanged: viewportChanged
        };
      }

      return null;
    }
  }, {
    key: "_getModel",
    value: function _getModel(gl) {
      return new _luma.Model(gl, Object.assign({}, this.getShaders(), {
        id: this.props.id,
        geometry: new _luma.Geometry({
          drawMode: _constants.default.TRIANGLE_FAN,
          attributes: {
            vertices: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])
          }
        }),
        isInstanced: true,
        shaderCache: this.context.shaderCache
      }));
    } // Creates and returns a Uniform Buffer object to hold maxCount value.

  }, {
    key: "_getMaxCountBuffer",
    value: function _getMaxCountBuffer(gl) {
      return new _luma.Buffer(gl, {
        bytes: 4 * 4,
        // Four floats
        size: 4,
        index: AGGREGATION_DATA_UBO_INDEX
      });
    } // Process 'data' and build positions and weights Arrays.

  }, {
    key: "_processData",
    value: function _processData() {
      var _this$props = this.props,
          data = _this$props.data,
          getPosition = _this$props.getPosition,
          getWeight = _this$props.getWeight;
      var positions = [];
      var weights = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var point = _step.value;
          var position = getPosition(point);
          positions.push(position[0]);
          positions.push(position[1]);
          weights.push(getWeight(point));
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.setState({
        positions: positions,
        weights: weights
      });
    } // Set a binding point for the aggregation uniform block index

  }, {
    key: "_setupUniformBuffer",
    value: function _setupUniformBuffer() {
      var gl = this.context.gl; // For WebGL1, uniform buffer is not used.

      if (!(0, _luma.isWebGL2)(gl)) {
        return;
      }

      var programHandle = this.state.model.program.handle; // TODO: Replace with luma.gl api when ready.

      var uniformBlockIndex = gl.getUniformBlockIndex(programHandle, 'AggregationData');
      gl.uniformBlockBinding(programHandle, uniformBlockIndex, AGGREGATION_DATA_UBO_INDEX);
    }
  }, {
    key: "_shouldUseMinMax",
    value: function _shouldUseMinMax() {
      var _this$props2 = this.props,
          minColor = _this$props2.minColor,
          maxColor = _this$props2.maxColor,
          colorDomain = _this$props2.colorDomain,
          colorRange = _this$props2.colorRange;

      if (minColor || maxColor) {
        _core.log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();

        return true;
      } // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.
      // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.


      if (colorDomain || colorRange) {
        return false;
      } // None specified, use default minColor and maxColor


      return true;
    }
  }, {
    key: "_updateAggregation",
    value: function _updateAggregation(changeFlags) {
      var attributeManager = this.getAttributeManager();

      if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {
        this._updateGridParams();

        attributeManager.invalidateAll();
      }

      var _this$props3 = this.props,
          cellSizePixels = _this$props3.cellSizePixels,
          gpuAggregation = _this$props3.gpuAggregation;
      var _this$state2 = this.state,
          positions = _this$state2.positions,
          weights = _this$state2.weights,
          maxCountBuffer = _this$state2.maxCountBuffer,
          countsBuffer = _this$state2.countsBuffer;
      var projectPoints = this.context.viewport instanceof _core.WebMercatorViewport;
      var results = this.state.gpuGridAggregator.run({
        positions: positions,
        weights: weights,
        cellSize: [cellSizePixels, cellSizePixels],
        viewport: this.context.viewport,
        countsBuffer: countsBuffer,
        maxCountBuffer: maxCountBuffer,
        changeFlags: changeFlags,
        useGPU: gpuAggregation,
        projectPoints: projectPoints
      });
      var _results$maxWeight = results.maxWeight,
          maxWeight = _results$maxWeight === void 0 ? 0 : _results$maxWeight;
      this.setState({
        aggregationData: null,
        // Aggregation changed, enforce reading buffer data for picking.
        maxWeight: maxWeight // uniform to use under WebGL1

      });
      attributeManager.invalidate('instanceCounts');
    }
  }, {
    key: "_updateUniforms",
    value: function _updateUniforms(_ref7) {
      var oldProps = _ref7.oldProps,
          props = _ref7.props,
          changeFlags = _ref7.changeFlags;
      var newState = {};

      if (COLOR_PROPS.some(function (key) {
        return oldProps[key] !== props[key];
      })) {
        newState.shouldUseMinMax = this._shouldUseMinMax();
      }

      if (oldProps.colorRange !== props.colorRange) {
        var colorRangeUniform = [];
        (0, _assert.default)(props.colorRange && props.colorRange.length === COLOR_RANGE_LENGTH);
        props.colorRange.forEach(function (color) {
          colorRangeUniform.push(color[0], color[1], color[2], color[3] || 255);
        });
        newState.colorRange = colorRangeUniform;
      }

      if (oldProps.cellMarginPixels !== props.cellMarginPixels || oldProps.cellSizePixels !== props.cellSizePixels || changeFlags.viewportChanged) {
        var _this$context$viewpor2 = this.context.viewport,
            width = _this$context$viewpor2.width,
            height = _this$context$viewpor2.height;
        var _this$props4 = this.props,
            cellSizePixels = _this$props4.cellSizePixels,
            cellMarginPixels = _this$props4.cellMarginPixels;
        var margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;
        newState.cellScale = new Float32Array([(cellSizePixels - margin) / width * 2, -(cellSizePixels - margin) / height * 2, 1]);
      }

      this.setState(newState);
    }
  }, {
    key: "_updateGridParams",
    value: function _updateGridParams() {
      var _this$context$viewpor3 = this.context.viewport,
          width = _this$context$viewpor3.width,
          height = _this$context$viewpor3.height;
      var cellSizePixels = this.props.cellSizePixels;
      var gl = this.context.gl;
      var numCol = Math.ceil(width / cellSizePixels);
      var numRow = Math.ceil(height / cellSizePixels);
      var numInstances = numCol * numRow;
      var dataBytes = numInstances * 4 * 4;
      var countsBuffer = this.state.countsBuffer;

      if (countsBuffer) {
        countsBuffer.delete();
      }

      countsBuffer = new _luma.Buffer(gl, {
        size: 4,
        bytes: dataBytes,
        type: _constants.default.FLOAT,
        instanced: 1
      });
      this.setState({
        numCol: numCol,
        numRow: numRow,
        numInstances: numInstances,
        countsBuffer: countsBuffer
      });
    }
  }]);

  return ScreenGridLayer;
}(_core.Layer);

exports.default = ScreenGridLayer;
ScreenGridLayer.layerName = 'ScreenGridLayer';
ScreenGridLayer.defaultProps = defaultProps;
//# sourceMappingURL=screen-grid-layer.js.map