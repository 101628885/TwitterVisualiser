{"version":3,"sources":["../../../src/text-layer/font-atlas.js"],"names":["GL_TEXTURE_WRAP_S","GL_TEXTURE_WRAP_T","GL_CLAMP_TO_EDGE","MAX_CANVAS_WIDTH","DEFAULT_FONT_SIZE","DEFAULT_PADDING","BASELINE_SCALE","HEIGHT_SCALE","DEFAULT_CHAR_SET","i","push","String","fromCharCode","setTextStyle","ctx","fontFamily","fontSize","font","fillStyle","textBaseline","textAlign","makeFontAtlas","gl","characterSet","padding","canvas","document","createElement","getContext","row","x","fontHeight","mapping","Array","from","forEach","char","measureText","width","y","height","mask","fillText","scale","texture","Texture2D","pixels","parameters"],"mappings":"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","sourcesContent":["/* global document */\nimport {Texture2D} from 'luma.gl';\n\nconst GL_TEXTURE_WRAP_S = 0x2802;\nconst GL_TEXTURE_WRAP_T = 0x2803;\nconst GL_CLAMP_TO_EDGE = 0x812f;\nconst MAX_CANVAS_WIDTH = 1024;\nconst DEFAULT_FONT_SIZE = 64;\nconst DEFAULT_PADDING = 4;\n\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\n\nexport const DEFAULT_CHAR_SET = [];\nfor (let i = 32; i < 128; i++) {\n  DEFAULT_CHAR_SET.push(String.fromCharCode(i));\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize) {\n  ctx.font = `${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'baseline';\n  ctx.textAlign = 'left';\n}\n\nexport function makeFontAtlas(\n  gl,\n  {\n    fontFamily,\n    characterSet = DEFAULT_CHAR_SET,\n    fontSize = DEFAULT_FONT_SIZE,\n    padding = DEFAULT_PADDING\n  }\n) {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n\n  // measure texts\n  let row = 0;\n  let x = 0;\n  // TODO - use Advanced text metrics when they are adopted:\n  // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics\n  const fontHeight = fontSize * HEIGHT_SCALE;\n  setTextStyle(ctx, fontFamily, fontSize);\n  const mapping = {};\n\n  Array.from(characterSet).forEach(char => {\n    const {width} = ctx.measureText(char);\n\n    if (x + width > MAX_CANVAS_WIDTH) {\n      x = 0;\n      row++;\n    }\n    mapping[char] = {\n      x,\n      y: row * (fontHeight + padding),\n      width,\n      height: fontHeight,\n      mask: true\n    };\n    x += width + padding;\n  });\n\n  canvas.width = MAX_CANVAS_WIDTH;\n  canvas.height = (row + 1) * (fontHeight + padding);\n\n  setTextStyle(ctx, fontFamily, fontSize);\n  for (const char in mapping) {\n    ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n  }\n\n  return {\n    scale: HEIGHT_SCALE,\n    mapping,\n    texture: new Texture2D(gl, {\n      pixels: canvas,\n      // padding is added only between the characters but not for borders\n      // enforce CLAMP_TO_EDGE to avoid any artifacts.\n      parameters: {\n        [GL_TEXTURE_WRAP_S]: GL_CLAMP_TO_EDGE,\n        [GL_TEXTURE_WRAP_T]: GL_CLAMP_TO_EDGE\n      }\n    })\n  };\n}\n"],"file":"font-atlas.js"}