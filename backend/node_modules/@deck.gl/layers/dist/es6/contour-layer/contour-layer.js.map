{"version":3,"sources":["../../../src/contour-layer/contour-layer.js"],"names":["CompositeLayer","_GPUGridAggregator","GPUGridAggregator","_pointToDensityGridData","pointToDensityGridData","LineLayer","generateContours","DEFAULT_COLOR","DEFAULT_STROKE_WIDTH","DEFAULT_THRESHOLD","defaultProps","cellSize","type","min","max","value","getPosition","x","position","contours","threshold","fp64","ContourLayer","initializeState","gl","context","options","id","shaderCache","state","contourData","gridAggregator","updateState","oldProps","props","changeFlags","contoursDirty","dataChanged","setState","countsData","aggregateData","rebuildContours","getSubLayerClass","getSubLayerProps","data","getSourcePosition","d","start","getTargetPosition","end","getColor","onGetSublayerColor","bind","getStrokeWidth","onGetSublayerStrokeWidth","renderLayers","SubLayerClass","cellSizeMeters","gpuAggregation","coordinateSystem","gpuGridAggregator","viewport","countsBuffer","gridSize","gridOrigin","getData","getCellData","cellWeights","thresholds","map","segment","color","forEach","strokeWidth","some","contour","length","oldThresholds","_","i","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  CompositeLayer,\n  _GPUGridAggregator as GPUGridAggregator,\n  _pointToDensityGridData as pointToDensityGridData\n} from '@deck.gl/core';\nimport {LineLayer} from '@deck.gl/layers';\n\nimport {generateContours} from './contour-utils';\n\nconst DEFAULT_COLOR = [255, 255, 255];\nconst DEFAULT_STROKE_WIDTH = 1;\nconst DEFAULT_THRESHOLD = 1;\n\nconst defaultProps = {\n  // grid aggregation\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  getPosition: x => x.position,\n\n  // contour lines\n  contours: [{threshold: DEFAULT_THRESHOLD}],\n\n  fp64: false\n};\n\nexport default class ContourLayer extends CompositeLayer {\n  initializeState() {\n    const {gl} = this.context;\n    const options = {\n      id: `${this.id}-gpu-aggregator`,\n      shaderCache: this.context.shaderCache\n    };\n    this.state = {\n      contourData: [],\n      gridAggregator: new GPUGridAggregator(gl, options)\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    let contoursDirty = false;\n    if (changeFlags.dataChanged || oldProps.cellSize !== props.cellSize) {\n      contoursDirty = true;\n      // Clear countsData cache\n      this.setState({countsData: null});\n      this.aggregateData();\n    }\n\n    contoursDirty = contoursDirty || this.rebuildContours({oldProps, props});\n    if (contoursDirty) {\n      this.generateContours();\n    }\n  }\n\n  getSubLayerClass() {\n    return LineLayer;\n  }\n\n  getSubLayerProps() {\n    const {fp64} = this.props;\n\n    return super.getSubLayerProps({\n      id: 'contour-line-layer',\n      data: this.state.contourData,\n      fp64,\n      getSourcePosition: d => d.start,\n      getTargetPosition: d => d.end,\n      getColor: this.onGetSublayerColor.bind(this),\n      getStrokeWidth: this.onGetSublayerStrokeWidth.bind(this)\n    });\n  }\n\n  renderLayers() {\n    const SubLayerClass = this.getSubLayerClass();\n\n    return new SubLayerClass(this.getSubLayerProps());\n  }\n\n  // Private\n\n  aggregateData() {\n    const {\n      data,\n      cellSize: cellSizeMeters,\n      getPosition,\n      gpuAggregation,\n      fp64,\n      coordinateSystem\n    } = this.props;\n    const {countsData, countsBuffer, gridSize, gridOrigin, cellSize} = pointToDensityGridData({\n      data,\n      cellSizeMeters,\n      getPosition,\n      gpuAggregation,\n      gpuGridAggregator: this.state.gridAggregator,\n      fp64,\n      coordinateSystem,\n      viewport: this.context.viewport\n    });\n\n    this.setState({countsData, countsBuffer, gridSize, gridOrigin, cellSize});\n  }\n\n  generateContours() {\n    const {gridSize, gridOrigin, cellSize} = this.state;\n    let {countsData} = this.state;\n    if (!countsData) {\n      const {countsBuffer} = this.state;\n      countsData = countsBuffer.getData();\n      this.setState({countsData});\n    }\n\n    const {cellWeights} = GPUGridAggregator.getCellData({countsData});\n    const thresholds = this.props.contours.map(x => x.threshold);\n    const contourData = generateContours({\n      thresholds,\n      cellWeights,\n      gridSize,\n      gridOrigin,\n      cellSize\n    });\n\n    this.setState({contourData});\n  }\n\n  onGetSublayerColor(segment) {\n    const {contours} = this.props;\n    let color = DEFAULT_COLOR;\n    contours.forEach(data => {\n      if (data.threshold === segment.threshold) {\n        color = data.color || DEFAULT_COLOR;\n      }\n    });\n    return color;\n  }\n\n  onGetSublayerStrokeWidth(segment) {\n    const {contours} = this.props;\n    let strokeWidth = DEFAULT_STROKE_WIDTH;\n    // Linearly searches the contours, but there should only be few contours\n    contours.some(contour => {\n      if (contour.threshold === segment.threshold) {\n        strokeWidth = contour.strokeWidth || DEFAULT_STROKE_WIDTH;\n        return true;\n      }\n      return false;\n    });\n    return strokeWidth;\n  }\n\n  rebuildContours({oldProps, props}) {\n    if (oldProps.contours.length !== props.contours.length) {\n      return true;\n    }\n    const oldThresholds = oldProps.contours.map(x => x.threshold);\n    const thresholds = props.contours.map(x => x.threshold);\n\n    return thresholds.some((_, i) => thresholds[i] !== oldThresholds[i]);\n  }\n}\n\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;\n"],"file":"contour-layer.js"}