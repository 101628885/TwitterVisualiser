{"version":3,"sources":["../../../src/grid-cell-layer/grid-cell-layer.js"],"names":["Layer","GL","Model","CubeGeometry","fp64","fp64LowPart","vs","fs","DEFAULT_COLOR","defaultProps","cellSize","type","min","max","value","coverage","elevationScale","extruded","getPosition","x","position","getElevation","getColor","lightSettings","GridCellLayer","getShaders","projectModule","use64bitProjection","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","transition","accessor","instanceElevations","instancePositions64xyLow","update","calculateInstancePositions64xyLow","instanceColors","UNSIGNED_BYTE","defaultValue","updateState","props","oldProps","changeFlags","gl","context","state","model","delete","setState","_getModel","invalidateAll","Object","assign","id","geometry","isInstanced","shaderCache","draw","uniforms","render","attribute","isFP64","use64bitPositions","constant","Float32Array","data","i","point","layerName"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,KAAR,QAAoB,eAApB;AACA,OAAOC,EAAP,MAAe,mBAAf;AACA,SAAQC,KAAR,EAAeC,YAAf,EAA6BC,IAA7B,QAAwC,SAAxC;MACOC,W,GAAeD,I,CAAfC,W;AAEP,OAAOC,EAAP,MAAe,+BAAf;AACA,OAAOC,EAAP,MAAe,iCAAf;AAEA,MAAMC,aAAa,GAAG,CAAC,GAAD,EAAM,CAAN,EAAS,GAAT,EAAc,GAAd,CAAtB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AAACC,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,IAA9B;AAAoCC,IAAAA,KAAK,EAAE;AAA3C,GADS;AAEnBC,EAAAA,QAAQ,EAAE;AAACJ,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,GAAG,EAAE,CAA9B;AAAiCC,IAAAA,KAAK,EAAE;AAAxC,GAFS;AAGnBE,EAAAA,cAAc,EAAE;AAACL,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE,CAAtB;AAAyBE,IAAAA,KAAK,EAAE;AAAhC,GAHG;AAInBG,EAAAA,QAAQ,EAAE,IAJS;AAKnBb,EAAAA,IAAI,EAAE,KALa;AAOnBc,EAAAA,WAAW,EAAEC,CAAC,IAAIA,CAAC,CAACC,QAPD;AAQnBC,EAAAA,YAAY,EAAE,IARK;AASnBC,EAAAA,QAAQ,EAAEd,aATS;AAWnBe,EAAAA,aAAa,EAAE;AAXI,CAArB;AAcA,eAAe,MAAMC,aAAN,SAA4BxB,KAA5B,CAAkC;AAC/C;;;;;;;;;;;;AAaAyB,EAAAA,UAAU,GAAG;AACX,UAAMC,aAAa,GAAG,KAAKC,kBAAL,KAA4B,WAA5B,GAA0C,WAAhE;AACA,WAAO;AAACrB,MAAAA,EAAD;AAAKC,MAAAA,EAAL;AAASqB,MAAAA,OAAO,EAAE,CAACF,aAAD,EAAgB,UAAhB,EAA4B,SAA5B;AAAlB,KAAP;AACD;;AAEDG,EAAAA,eAAe,GAAG;AAChB,UAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;AACAD,IAAAA,gBAAgB,CAACE,YAAjB,CAA8B;AAC5BC,MAAAA,iBAAiB,EAAE;AACjBC,QAAAA,IAAI,EAAE,CADW;AAEjBC,QAAAA,UAAU,EAAE,IAFK;AAGjBC,QAAAA,QAAQ,EAAE;AAHO,OADS;AAM5BC,MAAAA,kBAAkB,EAAE;AAClBH,QAAAA,IAAI,EAAE,CADY;AAElBC,QAAAA,UAAU,EAAE,IAFM;AAGlBC,QAAAA,QAAQ,EAAE;AAHQ,OANQ;AAW5BE,MAAAA,wBAAwB,EAAE;AACxBJ,QAAAA,IAAI,EAAE,CADkB;AAExBE,QAAAA,QAAQ,EAAE,aAFc;AAGxBG,QAAAA,MAAM,EAAE,KAAKC;AAHW,OAXE;AAgB5BC,MAAAA,cAAc,EAAE;AACdP,QAAAA,IAAI,EAAE,CADQ;AAEdvB,QAAAA,IAAI,EAAEV,EAAE,CAACyC,aAFK;AAGdP,QAAAA,UAAU,EAAE,IAHE;AAIdC,QAAAA,QAAQ,EAAE,UAJI;AAKdO,QAAAA,YAAY,EAAEnC;AALA;AAhBY,KAA9B;AAwBD;;AAEDoC,EAAAA,WAAW,CAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,GAAD,EAAiC;AAC1C,UAAMH,WAAN,CAAkB;AAACC,MAAAA,KAAD;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA;AAAlB,KAAlB,EAD0C,CAE1C;;AACA,QAAIF,KAAK,CAACzC,IAAN,KAAe0C,QAAQ,CAAC1C,IAA5B,EAAkC;AAAA,YACzB4C,EADyB,GACnB,KAAKC,OADc,CACzBD,EADyB;;AAEhC,UAAI,KAAKE,KAAL,CAAWC,KAAf,EAAsB;AACpB,aAAKD,KAAL,CAAWC,KAAX,CAAiBC,MAAjB;AACD;;AACD,WAAKC,QAAL,CAAc;AAACF,QAAAA,KAAK,EAAE,KAAKG,SAAL,CAAeN,EAAf;AAAR,OAAd;AACA,WAAKjB,mBAAL,GAA2BwB,aAA3B;AACD;AACF;;AAEDD,EAAAA,SAAS,CAACN,EAAD,EAAK;AACZ,WAAO,IAAI9C,KAAJ,CACL8C,EADK,EAELQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKhC,UAAL,EAAlB,EAAqC;AACnCiC,MAAAA,EAAE,EAAE,KAAKb,KAAL,CAAWa,EADoB;AAEnCC,MAAAA,QAAQ,EAAE,IAAIxD,YAAJ,EAFyB;AAGnCyD,MAAAA,WAAW,EAAE,IAHsB;AAInCC,MAAAA,WAAW,EAAE,KAAKZ,OAAL,CAAaY;AAJS,KAArC,CAFK,CAAP;AASD;;AAEDC,EAAAA,IAAI,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAa;AAAA,wBACwC,KAAKlB,KAD7C;AAAA,UACRnC,QADQ,eACRA,QADQ;AAAA,UACEO,QADF,eACEA,QADF;AAAA,UACYD,cADZ,eACYA,cADZ;AAAA,UAC4BD,QAD5B,eAC4BA,QAD5B;AAGf,SAAKmC,KAAL,CAAWC,KAAX,CAAiBa,MAAjB,CACER,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBM,QAAlB,EAA4B;AAC1BrD,MAAAA,QAD0B;AAE1BO,MAAAA,QAF0B;AAG1BD,MAAAA,cAH0B;AAI1BD,MAAAA;AAJ0B,KAA5B,CADF;AAQD;;AAEDyB,EAAAA,iCAAiC,CAACyB,SAAD,EAAY;AAC3C,UAAMC,MAAM,GAAG,KAAKC,iBAAL,EAAf;AACAF,IAAAA,SAAS,CAACG,QAAV,GAAqB,CAACF,MAAtB;;AAEA,QAAI,CAACA,MAAL,EAAa;AACXD,MAAAA,SAAS,CAACnD,KAAV,GAAkB,IAAIuD,YAAJ,CAAiB,CAAjB,CAAlB;AACA;AACD;;AAP0C,yBASf,KAAKxB,KATU;AAAA,UASpCyB,IAToC,gBASpCA,IAToC;AAAA,UAS9BpD,WAT8B,gBAS9BA,WAT8B;AAAA,UAUpCJ,KAVoC,GAU3BmD,SAV2B,CAUpCnD,KAVoC;AAW3C,QAAIyD,CAAC,GAAG,CAAR;;AACA,SAAK,MAAMC,KAAX,IAAoBF,IAApB,EAA0B;AACxB,YAAMlD,QAAQ,GAAGF,WAAW,CAACsD,KAAD,CAA5B;AACA1D,MAAAA,KAAK,CAACyD,CAAC,EAAF,CAAL,GAAalE,WAAW,CAACe,QAAQ,CAAC,CAAD,CAAT,CAAxB;AACAN,MAAAA,KAAK,CAACyD,CAAC,EAAF,CAAL,GAAalE,WAAW,CAACe,QAAQ,CAAC,CAAD,CAAT,CAAxB;AACD;AACF;;AAtG8C;AAyGjDI,aAAa,CAACiD,SAAd,GAA0B,eAA1B;AACAjD,aAAa,CAACf,YAAd,GAA6BA,YAA7B","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, CubeGeometry, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './grid-cell-layer-vertex.glsl';\nimport fs from './grid-cell-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [255, 0, 255, 255];\n\nconst defaultProps = {\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  extruded: true,\n  fp64: false,\n\n  getPosition: x => x.position,\n  getElevation: 1000,\n  getColor: DEFAULT_COLOR,\n\n  lightSettings: {}\n};\n\nexport default class GridCellLayer extends Layer {\n  /**\n   * A generic GridLayer that takes latitude longitude delta of cells as a uniform\n   * and the min lat lng of cells. grid can be 3d when pass in a height\n   * and set enable3d to true\n   *\n   * @param {array} props.data -\n   * @param {boolean} props.extruded - enable grid elevation\n   * @param {number} props.cellSize - grid cell size in meters\n   * @param {function} props.getPosition - position accessor, returned as [minLng, minLat]\n   * @param {function} props.getElevation - elevation accessor\n   * @param {function} props.getColor - color accessor, returned as [r, g, b, a]\n   */\n\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    // Re-generate model if geometry changed\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new CubeGeometry(),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {cellSize, extruded, elevationScale, coverage} = this.props;\n\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        cellSize,\n        extruded,\n        elevationScale,\n        coverage\n      })\n    );\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n}\n\nGridCellLayer.layerName = 'GridCellLayer';\nGridCellLayer.defaultProps = defaultProps;\n"],"file":"grid-cell-layer.js"}