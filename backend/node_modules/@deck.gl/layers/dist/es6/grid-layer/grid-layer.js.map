{"version":3,"sources":["../../../src/grid-layer/grid-layer.js"],"names":["CompositeLayer","experimental","BinSorter","defaultColorRange","getQuantizeScale","getLinearScale","GridCellLayer","pointToDensityGridData","nop","defaultProps","colorDomain","colorRange","getColorValue","points","length","lowerPercentile","type","min","max","value","upperPercentile","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","elevationLowerPercentile","elevationUpperPercentile","elevationScale","onSetElevationDomain","cellSize","coverage","getPosition","x","position","extruded","fp64","lightSettings","GridLayer","initializeState","state","layerData","sortedColorBins","sortedElevationBins","colorValueDomain","elevationValueDomain","colorScaleFunc","elevationScaleFunc","dimensionUpdaters","getDimensionUpdaters","updateState","oldProps","props","changeFlags","reprojectNeeded","needsReProjectPoints","dataChanged","getLayerData","dimensionChanges","getDimensionChanges","forEach","f","apply","getColor","id","triggers","updater","getSortedColorBins","getColorValueDomain","getColorScale","getElevation","getSortedElevationBins","getElevationValueDomain","getElevationScale","updaters","dimensionKey","needUpdate","find","item","some","t","push","getPickingInfo","info","isPicked","picked","index","object","cell","colorValue","binMap","elevationValue","Object","assign","Boolean","getUpdateTriggers","updateTriggers","step","prop","data","setState","getSortedBins","getValueDomain","getValueRange","_onGetSublayerColor","cv","isColorValueInDomain","color","Number","isFinite","_onGetSublayerElevation","ev","isElevationValueInDomain","getSubLayerProps","transitions","bind","getSubLayerClass","renderLayers","SubLayerClass","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, experimental} from '@deck.gl/core';\nconst {BinSorter, defaultColorRange, getQuantizeScale, getLinearScale} = experimental;\n\nimport GridCellLayer from '../grid-cell-layer/grid-cell-layer';\n\nimport {pointToDensityGridData} from './grid-aggregator';\n\nfunction nop() {}\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: points => points.length,\n  lowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  upperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: points => points.length,\n  elevationLowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  elevationUpperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  elevationScale: 1,\n  onSetElevationDomain: nop,\n\n  // grid\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: x => x.position,\n  extruded: false,\n  fp64: false,\n\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\nexport default class GridLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      layerData: [],\n      sortedColorBins: null,\n      sortedElevationBins: null,\n      colorValueDomain: null,\n      elevationValueDomain: null,\n      colorScaleFunc: nop,\n      elevationScaleFunc: nop,\n      dimensionUpdaters: this.getDimensionUpdaters()\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const reprojectNeeded = this.needsReProjectPoints(oldProps, props);\n\n    if (changeFlags.dataChanged || reprojectNeeded) {\n      // project data into hexagons, and get sortedBins\n      this.getLayerData();\n    } else {\n      const dimensionChanges = this.getDimensionChanges(oldProps, props) || [];\n      dimensionChanges.forEach(f => typeof f === 'function' && f.apply(this));\n    }\n  }\n\n  needsReProjectPoints(oldProps, props) {\n    return oldProps.cellSize !== props.cellSize || oldProps.getPosition !== props.getPosition;\n  }\n\n  getDimensionUpdaters() {\n    // dimension updaters are sequential,\n    // if the first one needs to be called, the 2nd and 3rd one will automatically\n    // be called. e.g. if ColorValue needs to be updated, getColorValueDomain and getColorScale\n    // will automatically be called\n    return {\n      getColor: [\n        {\n          id: 'value',\n          triggers: ['getColorValue'],\n          updater: this.getSortedColorBins\n        },\n        {\n          id: 'domain',\n          triggers: ['lowerPercentile', 'upperPercentile'],\n          updater: this.getColorValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['colorDomain', 'colorRange'],\n          updater: this.getColorScale\n        }\n      ],\n      getElevation: [\n        {\n          id: 'value',\n          triggers: ['getElevationValue'],\n          updater: this.getSortedElevationBins\n        },\n        {\n          id: 'domain',\n          triggers: ['elevationLowerPercentile', 'elevationUpperPercentile'],\n          updater: this.getElevationValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['elevationDomain', 'elevationRange'],\n          updater: this.getElevationScale\n        }\n      ]\n    };\n  }\n\n  getDimensionChanges(oldProps, props) {\n    const {dimensionUpdaters} = this.state;\n    const updaters = [];\n\n    // get dimension to be updated\n    for (const dimensionKey in dimensionUpdaters) {\n      // return the first triggered updater for each dimension\n      const needUpdate = dimensionUpdaters[dimensionKey].find(item =>\n        item.triggers.some(t => oldProps[t] !== props[t])\n      );\n\n      if (needUpdate) {\n        updaters.push(needUpdate.updater);\n      }\n    }\n\n    return updaters.length ? updaters : null;\n  }\n\n  getPickingInfo({info}) {\n    const {sortedColorBins, sortedElevationBins} = this.state;\n\n    const isPicked = info.picked && info.index > -1;\n    let object = null;\n\n    if (isPicked) {\n      const cell = this.state.layerData[info.index];\n\n      const colorValue =\n        sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n      const elevationValue =\n        sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n      object = Object.assign(\n        {\n          colorValue,\n          elevationValue\n        },\n        cell\n      );\n    }\n\n    // add bin colorValue and elevationValue to info\n    return Object.assign(info, {\n      picked: Boolean(object),\n      // override object with picked cell\n      object\n    });\n  }\n\n  getUpdateTriggers() {\n    const {dimensionUpdaters} = this.state;\n\n    // merge all dimension triggers\n    const updateTriggers = {};\n\n    for (const dimensionKey in dimensionUpdaters) {\n      updateTriggers[dimensionKey] = {};\n\n      for (const step of dimensionUpdaters[dimensionKey]) {\n        step.triggers.forEach(prop => {\n          updateTriggers[dimensionKey][prop] = this.props[prop];\n        });\n      }\n    }\n\n    return updateTriggers;\n  }\n\n  getLayerData() {\n    const {data, cellSize, getPosition} = this.props;\n    const {layerData} = pointToDensityGridData(data, cellSize, getPosition);\n\n    this.setState({layerData});\n    this.getSortedBins();\n  }\n\n  getValueDomain() {\n    this.getColorValueDomain();\n    this.getElevationValueDomain();\n  }\n\n  getSortedBins() {\n    this.getSortedColorBins();\n    this.getSortedElevationBins();\n  }\n\n  getSortedColorBins() {\n    const {getColorValue} = this.props;\n    const sortedColorBins = new BinSorter(this.state.layerData || [], getColorValue);\n\n    this.setState({sortedColorBins});\n    this.getColorValueDomain();\n  }\n\n  getSortedElevationBins() {\n    const {getElevationValue} = this.props;\n    const sortedElevationBins = new BinSorter(this.state.layerData || [], getElevationValue);\n    this.setState({sortedElevationBins});\n    this.getElevationValueDomain();\n  }\n\n  getColorValueDomain() {\n    const {lowerPercentile, upperPercentile, onSetColorDomain} = this.props;\n\n    this.state.colorValueDomain = this.state.sortedColorBins.getValueRange([\n      lowerPercentile,\n      upperPercentile\n    ]);\n\n    if (typeof onSetColorDomain === 'function') {\n      onSetColorDomain(this.state.colorValueDomain);\n    }\n\n    this.getColorScale();\n  }\n\n  getElevationValueDomain() {\n    const {elevationLowerPercentile, elevationUpperPercentile, onSetElevationDomain} = this.props;\n\n    this.state.elevationValueDomain = this.state.sortedElevationBins.getValueRange([\n      elevationLowerPercentile,\n      elevationUpperPercentile\n    ]);\n\n    if (typeof onSetElevationDomain === 'function') {\n      onSetElevationDomain(this.state.elevationValueDomain);\n    }\n\n    this.getElevationScale();\n  }\n\n  getColorScale() {\n    const {colorRange} = this.props;\n    const colorDomain = this.props.colorDomain || this.state.colorValueDomain;\n\n    this.state.colorScaleFunc = getQuantizeScale(colorDomain, colorRange);\n  }\n\n  getElevationScale() {\n    const {elevationRange} = this.props;\n    const elevationDomain = this.props.elevationDomain || this.state.elevationValueDomain;\n\n    this.state.elevationScaleFunc = getLinearScale(elevationDomain, elevationRange);\n  }\n\n  _onGetSublayerColor(cell) {\n    const {sortedColorBins, colorScaleFunc, colorValueDomain} = this.state;\n\n    const cv = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n    const colorDomain = this.props.colorDomain || colorValueDomain;\n\n    const isColorValueInDomain = cv >= colorDomain[0] && cv <= colorDomain[colorDomain.length - 1];\n\n    // if cell value is outside domain, set alpha to 0\n    const color = isColorValueInDomain ? colorScaleFunc(cv) : [0, 0, 0, 0];\n\n    // add alpha to color if not defined in colorRange\n    color[3] = Number.isFinite(color[3]) ? color[3] : 255;\n\n    return color;\n  }\n\n  _onGetSublayerElevation(cell) {\n    const {sortedElevationBins, elevationScaleFunc, elevationValueDomain} = this.state;\n    const ev =\n      sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n    const elevationDomain = this.props.elevationDomain || elevationValueDomain;\n\n    const isElevationValueInDomain =\n      ev >= elevationDomain[0] && ev <= elevationDomain[elevationDomain.length - 1];\n\n    // if cell value is outside domain, set elevation to -1\n    return isElevationValueInDomain ? elevationScaleFunc(ev) : -1;\n  }\n\n  // for subclassing, override this method to return\n  // customized sub layer props\n  getSubLayerProps() {\n    const {\n      elevationScale,\n      fp64,\n      extruded,\n      cellSize,\n      coverage,\n      lightSettings,\n      transitions\n    } = this.props;\n\n    // return props to the sublayer constructor\n    return super.getSubLayerProps({\n      id: 'grid-cell',\n      data: this.state.layerData,\n\n      fp64,\n      cellSize,\n      coverage,\n      lightSettings,\n      elevationScale,\n      extruded,\n\n      getColor: this._onGetSublayerColor.bind(this),\n      getElevation: this._onGetSublayerElevation.bind(this),\n      transitions: transitions && {\n        getColor: transitions.getColorValue,\n        getElevation: transitions.getElevationValue\n      },\n      updateTriggers: this.getUpdateTriggers()\n    });\n  }\n\n  // for subclassing, override this method to return\n  // customized sub layer class\n  getSubLayerClass() {\n    return GridCellLayer;\n  }\n\n  renderLayers() {\n    const SubLayerClass = this.getSubLayerClass();\n\n    return new SubLayerClass(this.getSubLayerProps());\n  }\n}\n\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;\n"],"file":"grid-layer.js"}