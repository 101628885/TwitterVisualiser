{"version":3,"sources":["../../../src/hexagon-layer/hexagon-aggregator.js"],"names":["hexbin","pointToHexbin","data","radius","getPosition","viewport","radiusInPixel","getRadiusInPixel","screenPoints","pt","push","Object","assign","screenCoord","projectFlat","newHexbin","x","d","y","hexagonBins","hexagons","map","hex","index","centroid","unprojectFlat","points","getDistanceScales","pixelsPerMeter"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,MAAR,QAAqB,WAArB;AAEA;;;;;;;;;;AASA,OAAO,SAASC,aAAT,CAAuB;AAACC,EAAAA,IAAD;AAAOC,EAAAA,MAAP;AAAeC,EAAAA;AAAf,CAAvB,EAAoDC,QAApD,EAA8D;AACnE;AACA,QAAMC,aAAa,GAAGC,gBAAgB,CAACJ,MAAD,EAASE,QAAT,CAAtC,CAFmE,CAInE;;AACA,QAAMG,YAAY,GAAG,EAArB;;AACA,OAAK,MAAMC,EAAX,IAAiBP,IAAjB,EAAuB;AACrBM,IAAAA,YAAY,CAACE,IAAb,CACEC,MAAM,CAACC,MAAP,CACE;AACEC,MAAAA,WAAW,EAAER,QAAQ,CAACS,WAAT,CAAqBV,WAAW,CAACK,EAAD,CAAhC;AADf,KADF,EAIEA,EAJF,CADF;AAQD;;AAED,QAAMM,SAAS,GAAGf,MAAM,GACrBG,MADe,CACRG,aADQ,EAEfU,CAFe,CAEbC,CAAC,IAAIA,CAAC,CAACJ,WAAF,CAAc,CAAd,CAFQ,EAGfK,CAHe,CAGbD,CAAC,IAAIA,CAAC,CAACJ,WAAF,CAAc,CAAd,CAHQ,CAAlB;AAKA,QAAMM,WAAW,GAAGJ,SAAS,CAACP,YAAD,CAA7B;AAEA,SAAO;AACLY,IAAAA,QAAQ,EAAED,WAAW,CAACE,GAAZ,CAAgB,CAACC,GAAD,EAAMC,KAAN,MAAiB;AACzCC,MAAAA,QAAQ,EAAEnB,QAAQ,CAACoB,aAAT,CAAuB,CAACH,GAAG,CAACN,CAAL,EAAQM,GAAG,CAACJ,CAAZ,CAAvB,CAD+B;AAEzCQ,MAAAA,MAAM,EAAEJ,GAFiC;AAGzCC,MAAAA;AAHyC,KAAjB,CAAhB;AADL,GAAP;AAOD;AAED;;;;;;;;AAOA,OAAO,SAAShB,gBAAT,CAA0BJ,MAA1B,EAAkCE,QAAlC,EAA4C;AAAA,gCACxBA,QAAQ,CAACsB,iBAAT,EADwB;AAAA,QAC1CC,cAD0C,yBAC1CA,cAD0C,EAGjD;;;AACA,SAAOzB,MAAM,GAAGyB,cAAc,CAAC,CAAD,CAA9B;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {hexbin} from 'd3-hexbin';\n\n/**\n * Use d3-hexbin to performs hexagonal binning from geo points to hexagons\n * @param {Iterable} data - array of points\n * @param {Number} radius - hexagon radius in meter\n * @param {function} getPosition - get points lon lat\n * @param {Object} viewport - current viewport object\n\n * @return {Object} - hexagons and countRange\n */\nexport function pointToHexbin({data, radius, getPosition}, viewport) {\n  // get hexagon radius in mercator world unit\n  const radiusInPixel = getRadiusInPixel(radius, viewport);\n\n  // add world space coordinates to points\n  const screenPoints = [];\n  for (const pt of data) {\n    screenPoints.push(\n      Object.assign(\n        {\n          screenCoord: viewport.projectFlat(getPosition(pt))\n        },\n        pt\n      )\n    );\n  }\n\n  const newHexbin = hexbin()\n    .radius(radiusInPixel)\n    .x(d => d.screenCoord[0])\n    .y(d => d.screenCoord[1]);\n\n  const hexagonBins = newHexbin(screenPoints);\n\n  return {\n    hexagons: hexagonBins.map((hex, index) => ({\n      centroid: viewport.unprojectFlat([hex.x, hex.y]),\n      points: hex,\n      index\n    }))\n  };\n}\n\n/**\n * Get radius in mercator world space coordinates from meter\n * @param {Number} radius - in meter\n * @param {Object} viewport - current viewport object\n\n * @return {Number} radius in mercator world spcae coordinates\n */\nexport function getRadiusInPixel(radius, viewport) {\n  const {pixelsPerMeter} = viewport.getDistanceScales();\n\n  // x, y distance should be the same\n  return radius * pixelsPerMeter[0];\n}\n"],"file":"hexagon-aggregator.js"}