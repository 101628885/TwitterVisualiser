{"version":3,"sources":["../../../src/icon-layer/icon-layer.js"],"names":["Layer","GL","Model","Geometry","Texture2D","loadTextures","fp64","fp64LowPart","vs","fs","DEFAULT_COLOR","DEFAULT_TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","DEFAULT_TEXTURE_MAG_FILTER","LINEAR","defaultProps","iconAtlas","iconMapping","type","value","async","sizeScale","getPosition","x","position","getIcon","icon","getColor","getSize","getAngle","IconLayer","getShaders","projectModule","use64bitProjection","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","transition","accessor","instancePositions64xyLow","update","calculateInstancePositions64xyLow","instanceSizes","defaultValue","instanceOffsets","calculateInstanceOffsets","instanceIconFrames","calculateInstanceIconFrames","instanceColorModes","UNSIGNED_BYTE","calculateInstanceColorMode","instanceColors","instanceAngles","updateState","oldProps","props","changeFlags","invalidate","setParameters","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","setState","iconsTexture","context","gl","urls","then","texture","state","model","delete","_getModel","invalidateAll","draw","uniforms","render","Object","assign","iconsTextureDim","width","height","positions","id","geometry","drawMode","TRIANGLE_FAN","attributes","Float32Array","isInstanced","shaderCache","attribute","isFP64","use64bitPositions","constant","data","i","point","object","rect","anchorX","anchorY","colorMode","mask","y","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Layer} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, Texture2D, loadTextures, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_TEXTURE_MIN_FILTER = GL.LINEAR_MIPMAP_LINEAR;\n// GL.LINEAR is the default value but explicitly set it here\nconst DEFAULT_TEXTURE_MAG_FILTER = GL.LINEAR;\n\n/*\n * @param {object} props\n * @param {Texture2D | string} props.iconAtlas - atlas image url or texture\n * @param {object} props.iconMapping - icon names mapped to icon definitions\n * @param {object} props.iconMapping[icon_name].x - x position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].y - y position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].width - width of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].height - height of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].anchorX - x anchor of icon on the atlas image,\n *   default to width / 2\n * @param {object} props.iconMapping[icon_name].anchorY - y anchor of icon on the atlas image,\n *   default to height / 2\n * @param {object} props.iconMapping[icon_name].mask - whether icon is treated as a transparency\n *   mask. If true, user defined color is applied. If false, original color from the image is\n *   applied. Default to false.\n * @param {number} props.size - icon size in pixels\n * @param {func} props.getPosition - returns anchor position of the icon, in [lng, lat, z]\n * @param {func} props.getIcon - returns icon name as a string\n * @param {func} props.getSize - returns icon size multiplier as a number\n * @param {func} props.getColor - returns color of the icon in [r, g, b, a]. Only works on icons\n *   with mask: true.\n * @param {func} props.getAngle - returns rotating angle (in degree) of the icon.\n */\nconst defaultProps = {\n  iconAtlas: null,\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: 1,\n  fp64: false,\n\n  getPosition: x => x.position,\n  getIcon: x => x.icon,\n  getColor: DEFAULT_COLOR,\n  getSize: 1,\n  getAngle: 0\n};\n\nexport default class IconLayer extends Layer {\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'picking']};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {size: 2, accessor: 'getIcon', update: this.calculateInstanceOffsets},\n      instanceIconFrames: {size: 4, accessor: 'getIcon', update: this.calculateInstanceIconFrames},\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        update: this.calculateInstanceColorMode\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const {iconAtlas, iconMapping} = props;\n\n    if (oldProps.iconMapping !== iconMapping) {\n      const attributeManager = this.getAttributeManager();\n      attributeManager.invalidate('instanceOffsets');\n      attributeManager.invalidate('instanceIconFrames');\n      attributeManager.invalidate('instanceColorModes');\n    }\n\n    if (oldProps.iconAtlas !== iconAtlas) {\n      if (iconAtlas instanceof Texture2D) {\n        iconAtlas.setParameters({\n          [GL.TEXTURE_MIN_FILTER]: DEFAULT_TEXTURE_MIN_FILTER,\n          [GL.TEXTURE_MAG_FILTER]: DEFAULT_TEXTURE_MAG_FILTER\n        });\n        this.setState({iconsTexture: iconAtlas});\n      } else if (typeof iconAtlas === 'string') {\n        loadTextures(this.context.gl, {\n          urls: [iconAtlas]\n        }).then(([texture]) => {\n          texture.setParameters({\n            [GL.TEXTURE_MIN_FILTER]: DEFAULT_TEXTURE_MIN_FILTER,\n            [GL.TEXTURE_MAG_FILTER]: DEFAULT_TEXTURE_MAG_FILTER\n          });\n          this.setState({iconsTexture: texture});\n        });\n      }\n    }\n\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {sizeScale} = this.props;\n    const {iconsTexture} = this.state;\n\n    if (iconsTexture) {\n      this.state.model.render(\n        Object.assign({}, uniforms, {\n          iconsTexture,\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n          sizeScale\n        })\n      );\n    }\n  }\n\n  _getModel(gl) {\n    const positions = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n\n  calculateInstanceOffsets(attribute) {\n    const {data, iconMapping, getIcon} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const icon = getIcon(object);\n      const rect = iconMapping[icon] || {};\n      value[i++] = rect.width / 2 - rect.anchorX || 0;\n      value[i++] = rect.height / 2 - rect.anchorY || 0;\n    }\n  }\n\n  calculateInstanceColorMode(attribute) {\n    const {data, iconMapping, getIcon} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const icon = getIcon(object);\n      const colorMode = iconMapping[icon] && iconMapping[icon].mask;\n      value[i++] = colorMode ? 1 : 0;\n    }\n  }\n\n  calculateInstanceIconFrames(attribute) {\n    const {data, iconMapping, getIcon} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const icon = getIcon(object);\n      const rect = iconMapping[icon] || {};\n      value[i++] = rect.x || 0;\n      value[i++] = rect.y || 0;\n      value[i++] = rect.width || 0;\n      value[i++] = rect.height || 0;\n    }\n  }\n}\n\nIconLayer.layerName = 'IconLayer';\nIconLayer.defaultProps = defaultProps;\n"],"file":"icon-layer.js"}