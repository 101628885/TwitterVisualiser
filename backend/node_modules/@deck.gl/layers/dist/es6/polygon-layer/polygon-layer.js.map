{"version":3,"sources":["../../../src/polygon-layer/polygon-layer.js"],"names":["CompositeLayer","SolidPolygonLayer","PathLayer","Polygon","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","elevationScale","wireframe","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","lineDashJustified","fp64","getPolygon","f","polygon","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","lightSettings","PolygonLayer","initializeState","state","paths","updateState","oldProps","props","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","data","forEach","object","complexPolygon","normalize","push","path","getPickingInfo","info","Object","assign","_getAccessor","accessor","x","renderLayers","transitions","updateTriggers","hasData","length","polygonLayer","getSubLayerProps","id","polygonLineLayer","getWidth","getColor","getDashArray","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getPath","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  lineDashJustified: false,\n  fp64: false,\n\n  getPolygon: f => f.polygon,\n  // Polygon fill color\n  getFillColor: defaultFillColor,\n  // Point, line and polygon outline color\n  getLineColor: defaultLineColor,\n  // Line and polygon outline accessors\n  getLineWidth: 1,\n  // Line dash array accessor\n  getLineDashArray: null,\n  // Polygon extrusion accessor\n  getElevation: 1000,\n\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\nexport default class PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: []\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged) {\n      const {data, getPolygon} = this.props;\n      this.state.paths = [];\n      data.forEach(object => {\n        const complexPolygon = Polygon.normalize(getPolygon(object));\n        complexPolygon.forEach(polygon =>\n          this.state.paths.push({\n            path: polygon,\n            object\n          })\n        );\n      });\n    }\n  }\n\n  getPickingInfo({info}) {\n    return Object.assign(info, {\n      // override object with picked data\n      object: (info.object && info.object.object) || info.object\n    });\n  }\n\n  _getAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      return x => accessor(x.object);\n    }\n    return accessor;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    // Layer composition props\n    const {data, stroked, filled, extruded, wireframe, elevationScale, transitions} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      fp64\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      lightSettings\n    } = this.props;\n\n    const {paths} = this.state;\n\n    const hasData = data && data.length > 0;\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      hasData &&\n      new SolidPolygonLayer(\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: {\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          extruded,\n          elevationScale,\n\n          fp64,\n          filled,\n          wireframe,\n\n          getPolygon,\n          getElevation,\n          getFillColor,\n          getLineColor,\n\n          lightSettings,\n          transitions\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      hasData &&\n      new PathLayer(\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n\n          fp64,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getPath: x => x.path,\n          getColor: this._getAccessor(getLineColor),\n          getWidth: this._getAccessor(getLineWidth),\n          getDashArray: this._getAccessor(getLineDashArray)\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;\n"],"file":"polygon-layer.js"}