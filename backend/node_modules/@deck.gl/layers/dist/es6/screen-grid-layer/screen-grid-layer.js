// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
import { Layer, experimental, WebMercatorViewport, _GPUGridAggregator as GPUGridAggregator, log } from '@deck.gl/core';
const defaultColorRange = experimental.defaultColorRange;
import GL from 'luma.gl/constants';
import { Model, Geometry, Buffer, isWebGL2 } from 'luma.gl';
import vs from './screen-grid-layer-vertex.glsl';
import vs_WebGL1 from './screen-grid-layer-vertex-webgl1.glsl';
import fs from './screen-grid-layer-fragment.glsl';
import fs_WebGL1 from './screen-grid-layer-fragment-webgl1.glsl';
import assert from 'assert';
const DEFAULT_MINCOLOR = [0, 0, 0, 0];
const DEFAULT_MAXCOLOR = [0, 255, 0, 255];
const AGGREGATION_DATA_UBO_INDEX = 0;
const COLOR_PROPS = [`minColor`, `maxColor`, `colorRange`, `colorDomain`];
const COLOR_RANGE_LENGTH = 6;
const defaultProps = {
  cellSizePixels: {
    value: 100,
    min: 1
  },
  cellMarginPixels: {
    value: 2,
    min: 0,
    max: 5
  },
  colorDomain: null,
  colorRange: defaultColorRange,
  getPosition: d => d.position,
  getWeight: d => 1,
  gpuAggregation: true
};
export default class ScreenGridLayer extends Layer {
  getShaders() {
    const shaders = isWebGL2(this.context.gl) ? {
      vs,
      fs
    } : {
      vs: vs_WebGL1,
      fs: fs_WebGL1
    };
    shaders.modules = ['picking'];
    return shaders;
  }

  initializeState() {
    const attributeManager = this.getAttributeManager();
    const gl = this.context.gl;
    /* eslint-disable max-len */

    attributeManager.addInstanced({
      instancePositions: {
        size: 3,
        update: this.calculateInstancePositions
      },
      instanceCounts: {
        size: 4,
        transition: true,
        accessor: ['getPosition', 'getWeight'],
        update: this.calculateInstanceCounts,
        noAlloc: true
      }
    });
    /* eslint-disable max-len */

    const options = {
      id: `${this.id}-aggregator`,
      shaderCache: this.context.shaderCache
    };
    this.setState({
      model: this._getModel(gl),
      gpuGridAggregator: new GPUGridAggregator(gl, options),
      maxCountBuffer: this._getMaxCountBuffer(gl),
      aggregationData: null
    });

    this._setupUniformBuffer();
  }

  shouldUpdateState({
    changeFlags
  }) {
    return changeFlags.somethingChanged;
  }

  updateState(opts) {
    super.updateState(opts);

    this._updateUniforms(opts);

    if (opts.changeFlags.dataChanged) {
      this._processData();
    }

    const changeFlags = this._getAggregationChangeFlags(opts);

    if (changeFlags) {
      this._updateAggregation(changeFlags);
    }
  }

  draw({
    uniforms
  }) {
    const gl = this.context.gl;
    const _this$props$parameter = this.props.parameters,
          parameters = _this$props$parameter === void 0 ? {} : _this$props$parameter;
    const minColor = this.props.minColor || DEFAULT_MINCOLOR;
    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR; // If colorDomain not specified we use default domain [1, maxCount]
    // maxCount value will be deduced from aggregated buffer in the vertex shader.

    const colorDomain = this.props.colorDomain || [1, 0];
    const _this$state = this.state,
          model = _this$state.model,
          maxCountBuffer = _this$state.maxCountBuffer,
          cellScale = _this$state.cellScale,
          shouldUseMinMax = _this$state.shouldUseMinMax,
          colorRange = _this$state.colorRange,
          maxWeight = _this$state.maxWeight;
    const layerUniforms = {
      minColor,
      maxColor,
      cellScale,
      colorRange,
      colorDomain,
      shouldUseMinMax
    };

    if (isWebGL2(gl)) {
      maxCountBuffer.bind({
        target: GL.UNIFORM_BUFFER
      });
    } else {
      layerUniforms.maxWeight = maxWeight;
    }

    uniforms = Object.assign(layerUniforms, uniforms);
    model.draw({
      uniforms,
      parameters: Object.assign({
        depthTest: false,
        depthMask: false
      }, parameters)
    });

    if (isWebGL2(gl)) {
      maxCountBuffer.unbind();
    }
  }

  calculateInstancePositions(attribute, {
    numInstances
  }) {
    const _this$context$viewpor = this.context.viewport,
          width = _this$context$viewpor.width,
          height = _this$context$viewpor.height;
    const cellSizePixels = this.props.cellSizePixels;
    const numCol = this.state.numCol;
    const value = attribute.value,
          size = attribute.size;

    for (let i = 0; i < numInstances; i++) {
      const x = i % numCol;
      const y = Math.floor(i / numCol);
      value[i * size + 0] = x * cellSizePixels / width * 2 - 1;
      value[i * size + 1] = 1 - y * cellSizePixels / height * 2;
      value[i * size + 2] = 0;
    }
  }

  calculateInstanceCounts(attribute, {
    numInstances
  }) {
    const countsBuffer = this.state.countsBuffer;
    attribute.update({
      buffer: countsBuffer
    });
  }

  getPickingInfo({
    info,
    mode
  }) {
    const index = info.index;

    if (index >= 0) {
      let aggregationData = this.state.aggregationData;

      if (!aggregationData) {
        aggregationData = {
          countsData: this.state.countsBuffer.getData(),
          maxCountData: this.state.maxCountBuffer.getData()
        }; // Cache aggregationData to avoid multiple buffer reads.

        this.setState({
          aggregationData
        });
      }

      const _aggregationData = aggregationData,
            countsData = _aggregationData.countsData,
            maxCountData = _aggregationData.maxCountData; // Each instance (one cell) is aggregated into single pixel,
      // Get current instance's aggregation details.

      info.object = GPUGridAggregator.getAggregationData({
        countsData,
        maxCountData,
        pixelIndex: index
      });
    }

    return info;
  } // HELPER Methods


  _getAggregationChangeFlags({
    oldProps,
    props,
    changeFlags
  }) {
    const cellSizeChanged = props.cellSizePixels !== oldProps.cellSizePixels || props.cellMarginPixels !== oldProps.cellMarginPixels;
    const dataChanged = changeFlags.dataChanged;
    const viewportChanged = changeFlags.viewportChanged;

    if (cellSizeChanged || dataChanged || viewportChanged) {
      return {
        cellSizeChanged,
        dataChanged,
        viewportChanged
      };
    }

    return null;
  }

  _getModel(gl) {
    return new Model(gl, Object.assign({}, this.getShaders(), {
      id: this.props.id,
      geometry: new Geometry({
        drawMode: GL.TRIANGLE_FAN,
        attributes: {
          vertices: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])
        }
      }),
      isInstanced: true,
      shaderCache: this.context.shaderCache
    }));
  } // Creates and returns a Uniform Buffer object to hold maxCount value.


  _getMaxCountBuffer(gl) {
    return new Buffer(gl, {
      bytes: 4 * 4,
      // Four floats
      size: 4,
      index: AGGREGATION_DATA_UBO_INDEX
    });
  } // Process 'data' and build positions and weights Arrays.


  _processData() {
    const _this$props = this.props,
          data = _this$props.data,
          getPosition = _this$props.getPosition,
          getWeight = _this$props.getWeight;
    const positions = [];
    const weights = [];

    for (const point of data) {
      const position = getPosition(point);
      positions.push(position[0]);
      positions.push(position[1]);
      weights.push(getWeight(point));
    }

    this.setState({
      positions,
      weights
    });
  } // Set a binding point for the aggregation uniform block index


  _setupUniformBuffer() {
    const gl = this.context.gl; // For WebGL1, uniform buffer is not used.

    if (!isWebGL2(gl)) {
      return;
    }

    const programHandle = this.state.model.program.handle; // TODO: Replace with luma.gl api when ready.

    const uniformBlockIndex = gl.getUniformBlockIndex(programHandle, 'AggregationData');
    gl.uniformBlockBinding(programHandle, uniformBlockIndex, AGGREGATION_DATA_UBO_INDEX);
  }

  _shouldUseMinMax() {
    const _this$props2 = this.props,
          minColor = _this$props2.minColor,
          maxColor = _this$props2.maxColor,
          colorDomain = _this$props2.colorDomain,
          colorRange = _this$props2.colorRange;

    if (minColor || maxColor) {
      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();
      return true;
    } // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.
    // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.


    if (colorDomain || colorRange) {
      return false;
    } // None specified, use default minColor and maxColor


    return true;
  }

  _updateAggregation(changeFlags) {
    const attributeManager = this.getAttributeManager();

    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {
      this._updateGridParams();

      attributeManager.invalidateAll();
    }

    const _this$props3 = this.props,
          cellSizePixels = _this$props3.cellSizePixels,
          gpuAggregation = _this$props3.gpuAggregation;
    const _this$state2 = this.state,
          positions = _this$state2.positions,
          weights = _this$state2.weights,
          maxCountBuffer = _this$state2.maxCountBuffer,
          countsBuffer = _this$state2.countsBuffer;
    const projectPoints = this.context.viewport instanceof WebMercatorViewport;
    const results = this.state.gpuGridAggregator.run({
      positions,
      weights,
      cellSize: [cellSizePixels, cellSizePixels],
      viewport: this.context.viewport,
      countsBuffer,
      maxCountBuffer,
      changeFlags,
      useGPU: gpuAggregation,
      projectPoints
    });
    const _results$maxWeight = results.maxWeight,
          maxWeight = _results$maxWeight === void 0 ? 0 : _results$maxWeight;
    this.setState({
      aggregationData: null,
      // Aggregation changed, enforce reading buffer data for picking.
      maxWeight // uniform to use under WebGL1

    });
    attributeManager.invalidate('instanceCounts');
  }

  _updateUniforms({
    oldProps,
    props,
    changeFlags
  }) {
    const newState = {};

    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {
      newState.shouldUseMinMax = this._shouldUseMinMax();
    }

    if (oldProps.colorRange !== props.colorRange) {
      const colorRangeUniform = [];
      assert(props.colorRange && props.colorRange.length === COLOR_RANGE_LENGTH);
      props.colorRange.forEach(color => {
        colorRangeUniform.push(color[0], color[1], color[2], color[3] || 255);
      });
      newState.colorRange = colorRangeUniform;
    }

    if (oldProps.cellMarginPixels !== props.cellMarginPixels || oldProps.cellSizePixels !== props.cellSizePixels || changeFlags.viewportChanged) {
      const _this$context$viewpor2 = this.context.viewport,
            width = _this$context$viewpor2.width,
            height = _this$context$viewpor2.height;
      const _this$props4 = this.props,
            cellSizePixels = _this$props4.cellSizePixels,
            cellMarginPixels = _this$props4.cellMarginPixels;
      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;
      newState.cellScale = new Float32Array([(cellSizePixels - margin) / width * 2, -(cellSizePixels - margin) / height * 2, 1]);
    }

    this.setState(newState);
  }

  _updateGridParams() {
    const _this$context$viewpor3 = this.context.viewport,
          width = _this$context$viewpor3.width,
          height = _this$context$viewpor3.height;
    const cellSizePixels = this.props.cellSizePixels;
    const gl = this.context.gl;
    const numCol = Math.ceil(width / cellSizePixels);
    const numRow = Math.ceil(height / cellSizePixels);
    const numInstances = numCol * numRow;
    const dataBytes = numInstances * 4 * 4;
    let countsBuffer = this.state.countsBuffer;

    if (countsBuffer) {
      countsBuffer.delete();
    }

    countsBuffer = new Buffer(gl, {
      size: 4,
      bytes: dataBytes,
      type: GL.FLOAT,
      instanced: 1
    });
    this.setState({
      numCol,
      numRow,
      numInstances,
      countsBuffer
    });
  }

}
ScreenGridLayer.layerName = 'ScreenGridLayer';
ScreenGridLayer.defaultProps = defaultProps;
//# sourceMappingURL=screen-grid-layer.js.map