{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-layer.js"],"names":["Layer","experimental","WebMercatorViewport","_GPUGridAggregator","GPUGridAggregator","log","defaultColorRange","GL","Model","Geometry","Buffer","isWebGL2","vs","vs_WebGL1","fs","fs_WebGL1","assert","DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","AGGREGATION_DATA_UBO_INDEX","COLOR_PROPS","COLOR_RANGE_LENGTH","defaultProps","cellSizePixels","value","min","cellMarginPixels","max","colorDomain","colorRange","getPosition","d","position","getWeight","gpuAggregation","ScreenGridLayer","getShaders","shaders","context","gl","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","update","calculateInstancePositions","instanceCounts","transition","accessor","calculateInstanceCounts","noAlloc","options","id","shaderCache","setState","model","_getModel","gpuGridAggregator","maxCountBuffer","_getMaxCountBuffer","aggregationData","_setupUniformBuffer","shouldUpdateState","changeFlags","somethingChanged","updateState","opts","_updateUniforms","dataChanged","_processData","_getAggregationChangeFlags","_updateAggregation","draw","uniforms","props","parameters","minColor","maxColor","state","cellScale","shouldUseMinMax","maxWeight","layerUniforms","bind","target","UNIFORM_BUFFER","Object","assign","depthTest","depthMask","unbind","attribute","numInstances","viewport","width","height","numCol","i","x","y","Math","floor","countsBuffer","buffer","getPickingInfo","info","mode","index","countsData","getData","maxCountData","object","getAggregationData","pixelIndex","oldProps","cellSizeChanged","viewportChanged","geometry","drawMode","TRIANGLE_FAN","attributes","vertices","Float32Array","isInstanced","bytes","data","positions","weights","point","push","programHandle","program","handle","uniformBlockIndex","getUniformBlockIndex","uniformBlockBinding","_shouldUseMinMax","deprecated","_updateGridParams","invalidateAll","projectPoints","results","run","cellSize","useGPU","invalidate","newState","some","key","colorRangeUniform","length","forEach","color","margin","ceil","numRow","dataBytes","delete","type","FLOAT","instanced","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  experimental,\n  WebMercatorViewport,\n  _GPUGridAggregator as GPUGridAggregator,\n  log\n} from '@deck.gl/core';\nconst {defaultColorRange} = experimental;\n\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, Buffer, isWebGL2} from 'luma.gl';\n\nimport vs from './screen-grid-layer-vertex.glsl';\nimport vs_WebGL1 from './screen-grid-layer-vertex-webgl1.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nimport fs_WebGL1 from './screen-grid-layer-fragment-webgl1.glsl';\nimport assert from 'assert';\n\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst AGGREGATION_DATA_UBO_INDEX = 0;\nconst COLOR_PROPS = [`minColor`, `maxColor`, `colorRange`, `colorDomain`];\nconst COLOR_RANGE_LENGTH = 6;\n\nconst defaultProps = {\n  cellSizePixels: {value: 100, min: 1},\n  cellMarginPixels: {value: 2, min: 0, max: 5},\n\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  getPosition: d => d.position,\n  getWeight: d => 1,\n\n  gpuAggregation: true\n};\n\nexport default class ScreenGridLayer extends Layer {\n  getShaders() {\n    const shaders = isWebGL2(this.context.gl) ? {vs, fs} : {vs: vs_WebGL1, fs: fs_WebGL1};\n    shaders.modules = ['picking'];\n    return shaders;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    const {gl} = this.context;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {size: 3, update: this.calculateInstancePositions},\n      instanceCounts: {\n        size: 4,\n        transition: true,\n        accessor: ['getPosition', 'getWeight'],\n        update: this.calculateInstanceCounts,\n        noAlloc: true\n      }\n    });\n    /* eslint-disable max-len */\n\n    const options = {\n      id: `${this.id}-aggregator`,\n      shaderCache: this.context.shaderCache\n    };\n    this.setState({\n      model: this._getModel(gl),\n      gpuGridAggregator: new GPUGridAggregator(gl, options),\n      maxCountBuffer: this._getMaxCountBuffer(gl),\n      aggregationData: null\n    });\n\n    this._setupUniformBuffer();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n\n    this._updateUniforms(opts);\n\n    if (opts.changeFlags.dataChanged) {\n      this._processData();\n    }\n\n    const changeFlags = this._getAggregationChangeFlags(opts);\n\n    if (changeFlags) {\n      this._updateAggregation(changeFlags);\n    }\n  }\n\n  draw({uniforms}) {\n    const {gl} = this.context;\n    const {parameters = {}} = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n\n    // If colorDomain not specified we use default domain [1, maxCount]\n    // maxCount value will be deduced from aggregated buffer in the vertex shader.\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {model, maxCountBuffer, cellScale, shouldUseMinMax, colorRange, maxWeight} = this.state;\n    const layerUniforms = {\n      minColor,\n      maxColor,\n      cellScale,\n      colorRange,\n      colorDomain,\n      shouldUseMinMax\n    };\n\n    if (isWebGL2(gl)) {\n      maxCountBuffer.bind({target: GL.UNIFORM_BUFFER});\n    } else {\n      layerUniforms.maxWeight = maxWeight;\n    }\n    uniforms = Object.assign(layerUniforms, uniforms);\n    model.draw({\n      uniforms,\n      parameters: Object.assign(\n        {\n          depthTest: false,\n          depthMask: false\n        },\n        parameters\n      )\n    });\n    if (isWebGL2(gl)) {\n      maxCountBuffer.unbind();\n    }\n  }\n\n  calculateInstancePositions(attribute, {numInstances}) {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const {numCol} = this.state;\n    const {value, size} = attribute;\n\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = ((x * cellSizePixels) / width) * 2 - 1;\n      value[i * size + 1] = 1 - ((y * cellSizePixels) / height) * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n\n  calculateInstanceCounts(attribute, {numInstances}) {\n    const {countsBuffer} = this.state;\n    attribute.update({\n      buffer: countsBuffer\n    });\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    if (index >= 0) {\n      let {aggregationData} = this.state;\n      if (!aggregationData) {\n        aggregationData = {\n          countsData: this.state.countsBuffer.getData(),\n          maxCountData: this.state.maxCountBuffer.getData()\n        };\n        // Cache aggregationData to avoid multiple buffer reads.\n        this.setState({aggregationData});\n      }\n      const {countsData, maxCountData} = aggregationData;\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData({\n        countsData,\n        maxCountData,\n        pixelIndex: index\n      });\n    }\n\n    return info;\n  }\n\n  // HELPER Methods\n\n  _getAggregationChangeFlags({oldProps, props, changeFlags}) {\n    const cellSizeChanged =\n      props.cellSizePixels !== oldProps.cellSizePixels ||\n      props.cellMarginPixels !== oldProps.cellMarginPixels;\n    const dataChanged = changeFlags.dataChanged;\n    const viewportChanged = changeFlags.viewportChanged;\n\n    if (cellSizeChanged || dataChanged || viewportChanged) {\n      return {cellSizeChanged, dataChanged, viewportChanged};\n    }\n\n    return null;\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            vertices: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  // Creates and returns a Uniform Buffer object to hold maxCount value.\n  _getMaxCountBuffer(gl) {\n    return new Buffer(gl, {\n      bytes: 4 * 4, // Four floats\n      size: 4,\n      index: AGGREGATION_DATA_UBO_INDEX\n    });\n  }\n\n  // Process 'data' and build positions and weights Arrays.\n  _processData() {\n    const {data, getPosition, getWeight} = this.props;\n    const positions = [];\n    const weights = [];\n\n    for (const point of data) {\n      const position = getPosition(point);\n      positions.push(position[0]);\n      positions.push(position[1]);\n      weights.push(getWeight(point));\n    }\n\n    this.setState({positions, weights});\n  }\n\n  // Set a binding point for the aggregation uniform block index\n  _setupUniformBuffer() {\n    const gl = this.context.gl;\n    // For WebGL1, uniform buffer is not used.\n    if (!isWebGL2(gl)) {\n      return;\n    }\n    const programHandle = this.state.model.program.handle;\n\n    // TODO: Replace with luma.gl api when ready.\n    const uniformBlockIndex = gl.getUniformBlockIndex(programHandle, 'AggregationData');\n    gl.uniformBlockBinding(programHandle, uniformBlockIndex, AGGREGATION_DATA_UBO_INDEX);\n  }\n\n  _shouldUseMinMax() {\n    const {minColor, maxColor, colorDomain, colorRange} = this.props;\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n    // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n    // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    // None specified, use default minColor and maxColor\n    return true;\n  }\n\n  _updateAggregation(changeFlags) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this._updateGridParams();\n      attributeManager.invalidateAll();\n    }\n    const {cellSizePixels, gpuAggregation} = this.props;\n\n    const {positions, weights, maxCountBuffer, countsBuffer} = this.state;\n\n    const projectPoints = this.context.viewport instanceof WebMercatorViewport;\n    const results = this.state.gpuGridAggregator.run({\n      positions,\n      weights,\n      cellSize: [cellSizePixels, cellSizePixels],\n      viewport: this.context.viewport,\n      countsBuffer,\n      maxCountBuffer,\n      changeFlags,\n      useGPU: gpuAggregation,\n      projectPoints\n    });\n\n    const {maxWeight = 0} = results;\n    this.setState({\n      aggregationData: null, // Aggregation changed, enforce reading buffer data for picking.\n      maxWeight // uniform to use under WebGL1\n    });\n\n    attributeManager.invalidate('instanceCounts');\n  }\n\n  _updateUniforms({oldProps, props, changeFlags}) {\n    const newState = {};\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      newState.shouldUseMinMax = this._shouldUseMinMax();\n    }\n\n    if (oldProps.colorRange !== props.colorRange) {\n      const colorRangeUniform = [];\n      assert(props.colorRange && props.colorRange.length === COLOR_RANGE_LENGTH);\n      props.colorRange.forEach(color => {\n        colorRangeUniform.push(color[0], color[1], color[2], color[3] || 255);\n      });\n      newState.colorRange = colorRangeUniform;\n    }\n\n    if (\n      oldProps.cellMarginPixels !== props.cellMarginPixels ||\n      oldProps.cellSizePixels !== props.cellSizePixels ||\n      changeFlags.viewportChanged\n    ) {\n      const {width, height} = this.context.viewport;\n      const {cellSizePixels, cellMarginPixels} = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n\n      newState.cellScale = new Float32Array([\n        ((cellSizePixels - margin) / width) * 2,\n        (-(cellSizePixels - margin) / height) * 2,\n        1\n      ]);\n    }\n    this.setState(newState);\n  }\n\n  _updateGridParams() {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const {gl} = this.context;\n\n    const numCol = Math.ceil(width / cellSizePixels);\n    const numRow = Math.ceil(height / cellSizePixels);\n    const numInstances = numCol * numRow;\n    const dataBytes = numInstances * 4 * 4;\n    let countsBuffer = this.state.countsBuffer;\n    if (countsBuffer) {\n      countsBuffer.delete();\n    }\n\n    countsBuffer = new Buffer(gl, {\n      size: 4,\n      bytes: dataBytes,\n      type: GL.FLOAT,\n      instanced: 1\n    });\n\n    this.setState({\n      numCol,\n      numRow,\n      numInstances,\n      countsBuffer\n    });\n  }\n}\n\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;\n"],"file":"screen-grid-layer.js"}