{"version":3,"sources":["../../../src/solid-polygon-layer/polygon-tesselator.js"],"names":["Polygon","experimental","fillArray","fp64","fp64Module","fp64LowPart","getPickingColor","index","DEFAULT_COLOR","PolygonTesselator","constructor","polygons","IndexType","map","polygon","normalize","pointCount","getPointCount","bufferLayout","getVertexCount","Uint16Array","Error","attributes","pickingColors","calculatePickingColors","updatePositions","extruded","positions","Float32Array","vertexValid","Uint8ClampedArray","fill","positions64xyLow","cache","indices","calculateIndices","elevations","key","getElevation","x","values","updateElevations","colors","getColor","updateColors","reduce","points","getTriangleCount","triangles","getPolygonOffsets","offsets","Array","length","offset","forEach","i","Uint32Array","indexCount","attribute","polygonIndex","getSurfaceIndices","loop","vertex","vertexIndex","y","z","complexPolygon","height","vertexCount","target","source","start","count","color","isNaN"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Handles tesselation of polygons with holes\n// - 2D surfaces\n// - 2D outlines\n// - 3D surfaces (top and sides only)\n// - 3D wireframes (not yet)\nimport * as Polygon from './polygon';\nimport {experimental} from '@deck.gl/core';\nconst {fillArray} = experimental;\nimport {fp64 as fp64Module} from 'luma.gl';\nconst {fp64LowPart} = fp64Module;\n\n// Maybe deck.gl or luma.gl needs to export this\nfunction getPickingColor(index) {\n  index++;\n  return [index & 255, (index >> 8) & 255, (index >> 16) & 255];\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255]; // Black\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport class PolygonTesselator {\n  constructor({polygons, IndexType}) {\n    // Normalize all polygons\n    polygons = polygons.map(polygon => Polygon.normalize(polygon));\n\n    // Count all polygon vertices\n    const pointCount = getPointCount(polygons);\n\n    this.polygons = polygons;\n    this.pointCount = pointCount;\n    this.bufferLayout = polygons.map(polygon => Polygon.getVertexCount(polygon));\n    this.IndexType = IndexType;\n\n    // TODO: dynamically decide IndexType in tesselator?\n    // Check if the vertex count excedes index type limit\n    if (IndexType === Uint16Array && pointCount > 65535) {\n      throw new Error(\"Vertex count exceeds browser's limit\");\n    }\n\n    this.attributes = {\n      pickingColors: calculatePickingColors({polygons, pointCount})\n    };\n  }\n\n  updatePositions({fp64, extruded}) {\n    const {attributes, polygons, pointCount} = this;\n\n    attributes.positions = attributes.positions || new Float32Array(pointCount * 3);\n    attributes.vertexValid = attributes.vertexValid || new Uint8ClampedArray(pointCount).fill(1);\n\n    if (fp64) {\n      // We only need x, y component\n      attributes.positions64xyLow = attributes.positions64xyLow || new Float32Array(pointCount * 2);\n    }\n\n    updatePositions({cache: attributes, polygons, extruded, fp64});\n  }\n\n  indices() {\n    const {polygons, IndexType} = this;\n    return calculateIndices({polygons, IndexType});\n  }\n\n  positions() {\n    return this.attributes.positions;\n  }\n  positions64xyLow() {\n    return this.attributes.positions64xyLow;\n  }\n\n  vertexValid() {\n    return this.attributes.vertexValid;\n  }\n\n  elevations({key = 'elevations', getElevation = x => 100} = {}) {\n    const {attributes, polygons, pointCount} = this;\n    const values = updateElevations({cache: attributes[key], polygons, pointCount, getElevation});\n    attributes[key] = values;\n    return values;\n  }\n\n  colors({key = 'colors', getColor = x => DEFAULT_COLOR} = {}) {\n    const {attributes, polygons, pointCount} = this;\n    const values = updateColors({cache: attributes[key], polygons, pointCount, getColor});\n    attributes[key] = values;\n    return values;\n  }\n\n  pickingColors() {\n    return this.attributes.pickingColors;\n  }\n}\n\n// Count number of points in a list of complex polygons\nfunction getPointCount(polygons) {\n  return polygons.reduce((points, polygon) => points + Polygon.getVertexCount(polygon), 0);\n}\n\n// COunt number of triangles in a list of complex polygons\nfunction getTriangleCount(polygons) {\n  return polygons.reduce((triangles, polygon) => triangles + Polygon.getTriangleCount(polygon), 0);\n}\n\n// Returns the offsets of each complex polygon in the combined array of all polygons\nfunction getPolygonOffsets(polygons) {\n  const offsets = new Array(polygons.length + 1);\n  offsets[0] = 0;\n  let offset = 0;\n  polygons.forEach((polygon, i) => {\n    offset += Polygon.getVertexCount(polygon);\n    offsets[i + 1] = offset;\n  });\n  return offsets;\n}\n\nfunction calculateIndices({polygons, IndexType = Uint32Array}) {\n  // Calculate length of index array (3 * number of triangles)\n  const indexCount = 3 * getTriangleCount(polygons);\n  const offsets = getPolygonOffsets(polygons);\n\n  // Allocate the attribute\n  const attribute = new IndexType(indexCount);\n\n  // 1. get triangulated indices for the internal areas\n  // 2. offset them by the number of indices in previous polygons\n  let i = 0;\n  polygons.forEach((polygon, polygonIndex) => {\n    for (const index of Polygon.getSurfaceIndices(polygon)) {\n      attribute[i++] = index + offsets[polygonIndex];\n    }\n  });\n\n  return attribute;\n}\n\nfunction updatePositions({\n  cache: {positions, positions64xyLow, vertexValid},\n  polygons,\n  extruded,\n  fp64\n}) {\n  // Flatten out all the vertices of all the sub subPolygons\n  let i = 0;\n  polygons.forEach((polygon, polygonIndex) => {\n    polygon.forEach(loop => {\n      loop.forEach((vertex, vertexIndex) => {\n        // eslint-disable-line\n        const x = vertex[0];\n        const y = vertex[1];\n        const z = vertex[2] || 0;\n\n        positions[i * 3] = x;\n        positions[i * 3 + 1] = y;\n        positions[i * 3 + 2] = z;\n        if (fp64) {\n          positions64xyLow[i * 2] = fp64LowPart(x);\n          positions64xyLow[i * 2 + 1] = fp64LowPart(y);\n        }\n        i++;\n      });\n      /* We are reusing the some buffer for `nextPositions` by offsetting one vertex\n       * to the left. As a result,\n       * the last vertex of each loop overlaps with the first vertex of the next loop.\n       * `vertexValid` is used to mark the end of each loop so we don't draw these\n       * segments:\n        positions      A0 A1 A2 A3 A4 B0 B1 B2 C0 ...\n        nextPositions  A1 A2 A3 A4 B0 B1 B2 C0 C1 ...\n        vertexValid    1  1  1  1  0  1  1  0  1 ...\n       */\n      vertexValid[i - 1] = 0;\n    });\n  });\n}\n\nfunction updateElevations({cache, polygons, pointCount, getElevation}) {\n  const elevations = cache || new Float32Array(pointCount);\n  let i = 0;\n  polygons.forEach((complexPolygon, polygonIndex) => {\n    // Calculate polygon color\n    const height = getElevation(polygonIndex);\n\n    const vertexCount = Polygon.getVertexCount(complexPolygon);\n    fillArray({target: elevations, source: [height], start: i, count: vertexCount});\n    i += vertexCount;\n  });\n  return elevations;\n}\n\nfunction updateColors({cache, polygons, pointCount, getColor}) {\n  const colors = cache || new Uint8ClampedArray(pointCount * 4);\n  let i = 0;\n  polygons.forEach((complexPolygon, polygonIndex) => {\n    // Calculate polygon color\n    const color = getColor(polygonIndex);\n    if (isNaN(color[3])) {\n      color[3] = 255;\n    }\n\n    const vertexCount = Polygon.getVertexCount(complexPolygon);\n    fillArray({target: colors, source: color, start: i, count: vertexCount});\n    i += color.length * vertexCount;\n  });\n  return colors;\n}\n\nfunction calculatePickingColors({polygons, pointCount}) {\n  const attribute = new Uint8ClampedArray(pointCount * 3);\n  let i = 0;\n  polygons.forEach((complexPolygon, polygonIndex) => {\n    const color = getPickingColor(polygonIndex);\n    const vertexCount = Polygon.getVertexCount(complexPolygon);\n    fillArray({target: attribute, source: color, start: i, count: vertexCount});\n    i += color.length * vertexCount;\n  });\n  return attribute;\n}\n"],"file":"polygon-tesselator.js"}