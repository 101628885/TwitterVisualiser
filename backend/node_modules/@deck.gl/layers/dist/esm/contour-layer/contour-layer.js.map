{"version":3,"sources":["../../../src/contour-layer/contour-layer.js"],"names":["CompositeLayer","_GPUGridAggregator","GPUGridAggregator","_pointToDensityGridData","pointToDensityGridData","LineLayer","generateContours","DEFAULT_COLOR","DEFAULT_STROKE_WIDTH","DEFAULT_THRESHOLD","defaultProps","cellSize","type","min","max","value","getPosition","x","position","contours","threshold","fp64","ContourLayer","gl","context","options","id","shaderCache","state","contourData","gridAggregator","oldProps","props","changeFlags","contoursDirty","dataChanged","setState","countsData","aggregateData","rebuildContours","data","getSourcePosition","d","start","getTargetPosition","end","getColor","onGetSublayerColor","bind","getStrokeWidth","onGetSublayerStrokeWidth","SubLayerClass","getSubLayerClass","getSubLayerProps","cellSizeMeters","gpuAggregation","coordinateSystem","gpuGridAggregator","viewport","countsBuffer","gridSize","gridOrigin","getData","getCellData","cellWeights","thresholds","map","segment","color","forEach","strokeWidth","some","contour","length","oldThresholds","_","i","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  CompositeLayer,\n  _GPUGridAggregator as GPUGridAggregator,\n  _pointToDensityGridData as pointToDensityGridData\n} from '@deck.gl/core';\nimport {LineLayer} from '@deck.gl/layers';\n\nimport {generateContours} from './contour-utils';\n\nconst DEFAULT_COLOR = [255, 255, 255];\nconst DEFAULT_STROKE_WIDTH = 1;\nconst DEFAULT_THRESHOLD = 1;\n\nconst defaultProps = {\n  // grid aggregation\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  getPosition: x => x.position,\n\n  // contour lines\n  contours: [{threshold: DEFAULT_THRESHOLD}],\n\n  fp64: false\n};\n\nexport default class ContourLayer extends CompositeLayer {\n  initializeState() {\n    const {gl} = this.context;\n    const options = {\n      id: `${this.id}-gpu-aggregator`,\n      shaderCache: this.context.shaderCache\n    };\n    this.state = {\n      contourData: [],\n      gridAggregator: new GPUGridAggregator(gl, options)\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    let contoursDirty = false;\n    if (changeFlags.dataChanged || oldProps.cellSize !== props.cellSize) {\n      contoursDirty = true;\n      // Clear countsData cache\n      this.setState({countsData: null});\n      this.aggregateData();\n    }\n\n    contoursDirty = contoursDirty || this.rebuildContours({oldProps, props});\n    if (contoursDirty) {\n      this.generateContours();\n    }\n  }\n\n  getSubLayerClass() {\n    return LineLayer;\n  }\n\n  getSubLayerProps() {\n    const {fp64} = this.props;\n\n    return super.getSubLayerProps({\n      id: 'contour-line-layer',\n      data: this.state.contourData,\n      fp64,\n      getSourcePosition: d => d.start,\n      getTargetPosition: d => d.end,\n      getColor: this.onGetSublayerColor.bind(this),\n      getStrokeWidth: this.onGetSublayerStrokeWidth.bind(this)\n    });\n  }\n\n  renderLayers() {\n    const SubLayerClass = this.getSubLayerClass();\n\n    return new SubLayerClass(this.getSubLayerProps());\n  }\n\n  // Private\n\n  aggregateData() {\n    const {\n      data,\n      cellSize: cellSizeMeters,\n      getPosition,\n      gpuAggregation,\n      fp64,\n      coordinateSystem\n    } = this.props;\n    const {countsData, countsBuffer, gridSize, gridOrigin, cellSize} = pointToDensityGridData({\n      data,\n      cellSizeMeters,\n      getPosition,\n      gpuAggregation,\n      gpuGridAggregator: this.state.gridAggregator,\n      fp64,\n      coordinateSystem,\n      viewport: this.context.viewport\n    });\n\n    this.setState({countsData, countsBuffer, gridSize, gridOrigin, cellSize});\n  }\n\n  generateContours() {\n    const {gridSize, gridOrigin, cellSize} = this.state;\n    let {countsData} = this.state;\n    if (!countsData) {\n      const {countsBuffer} = this.state;\n      countsData = countsBuffer.getData();\n      this.setState({countsData});\n    }\n\n    const {cellWeights} = GPUGridAggregator.getCellData({countsData});\n    const thresholds = this.props.contours.map(x => x.threshold);\n    const contourData = generateContours({\n      thresholds,\n      cellWeights,\n      gridSize,\n      gridOrigin,\n      cellSize\n    });\n\n    this.setState({contourData});\n  }\n\n  onGetSublayerColor(segment) {\n    const {contours} = this.props;\n    let color = DEFAULT_COLOR;\n    contours.forEach(data => {\n      if (data.threshold === segment.threshold) {\n        color = data.color || DEFAULT_COLOR;\n      }\n    });\n    return color;\n  }\n\n  onGetSublayerStrokeWidth(segment) {\n    const {contours} = this.props;\n    let strokeWidth = DEFAULT_STROKE_WIDTH;\n    // Linearly searches the contours, but there should only be few contours\n    contours.some(contour => {\n      if (contour.threshold === segment.threshold) {\n        strokeWidth = contour.strokeWidth || DEFAULT_STROKE_WIDTH;\n        return true;\n      }\n      return false;\n    });\n    return strokeWidth;\n  }\n\n  rebuildContours({oldProps, props}) {\n    if (oldProps.contours.length !== props.contours.length) {\n      return true;\n    }\n    const oldThresholds = oldProps.contours.map(x => x.threshold);\n    const thresholds = props.contours.map(x => x.threshold);\n\n    return thresholds.some((_, i) => thresholds[i] !== oldThresholds[i]);\n  }\n}\n\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;\n"],"file":"contour-layer.js"}