import * as MarchingSquares from './marching-squares';
import assert from 'assert'; // Given all the cell weights, generates contours for each threshold.

export function generateContours(_ref) {
  var thresholds = _ref.thresholds,
      colors = _ref.colors,
      cellWeights = _ref.cellWeights,
      gridSize = _ref.gridSize,
      gridOrigin = _ref.gridOrigin,
      cellSize = _ref.cellSize;
  var contourSegments = [];
  var width = gridSize[0];
  var height = gridSize[1];
  thresholds.forEach(function (threshold, index) {
    for (var x = -1; x < width; x++) {
      for (var y = -1; y < height; y++) {
        // Get the MarchingSquares code based on neighbor cell weights.
        var code = MarchingSquares.getCode({
          cellWeights: cellWeights,
          thresholdValue: threshold,
          x: x,
          y: y,
          width: width,
          height: height
        }); // Get the intersection vertices based on MarchingSquares code.

        var vertices = MarchingSquares.getVertices({
          gridOrigin: gridOrigin,
          cellSize: cellSize,
          x: x,
          y: y,
          width: width,
          height: height,
          code: code
        }); // We should always get even number of vertices

        assert(vertices.length % 2 === 0);

        for (var i = 0; i < vertices.length; i += 2) {
          contourSegments.push({
            start: vertices[i],
            end: vertices[i + 1],
            threshold: threshold
          });
        }
      }
    }
  });
  return contourSegments;
}
//# sourceMappingURL=contour-utils.js.map