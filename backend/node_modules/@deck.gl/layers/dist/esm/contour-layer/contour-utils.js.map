{"version":3,"sources":["../../../src/contour-layer/contour-utils.js"],"names":["MarchingSquares","assert","generateContours","thresholds","colors","cellWeights","gridSize","gridOrigin","cellSize","contourSegments","width","height","forEach","threshold","index","x","y","code","getCode","thresholdValue","vertices","getVertices","length","i","push","start","end"],"mappings":"AAAA,OAAO,KAAKA,eAAZ,MAAiC,oBAAjC;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;;AACA,OAAO,SAASC,gBAAT,OAOJ;AAAA,MANDC,UAMC,QANDA,UAMC;AAAA,MALDC,MAKC,QALDA,MAKC;AAAA,MAJDC,WAIC,QAJDA,WAIC;AAAA,MAHDC,QAGC,QAHDA,QAGC;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADDC,QACC,QADDA,QACC;AACD,MAAMC,eAAe,GAAG,EAAxB;AACA,MAAMC,KAAK,GAAGJ,QAAQ,CAAC,CAAD,CAAtB;AACA,MAAMK,MAAM,GAAGL,QAAQ,CAAC,CAAD,CAAvB;AAEAH,EAAAA,UAAU,CAACS,OAAX,CAAmB,UAACC,SAAD,EAAYC,KAAZ,EAAsB;AACvC,SAAK,IAAIC,CAAC,GAAG,CAAC,CAAd,EAAiBA,CAAC,GAAGL,KAArB,EAA4BK,CAAC,EAA7B,EAAiC;AAC/B,WAAK,IAAIC,CAAC,GAAG,CAAC,CAAd,EAAiBA,CAAC,GAAGL,MAArB,EAA6BK,CAAC,EAA9B,EAAkC;AAChC;AACA,YAAMC,IAAI,GAAGjB,eAAe,CAACkB,OAAhB,CAAwB;AACnCb,UAAAA,WAAW,EAAXA,WADmC;AAEnCc,UAAAA,cAAc,EAAEN,SAFmB;AAGnCE,UAAAA,CAAC,EAADA,CAHmC;AAInCC,UAAAA,CAAC,EAADA,CAJmC;AAKnCN,UAAAA,KAAK,EAALA,KALmC;AAMnCC,UAAAA,MAAM,EAANA;AANmC,SAAxB,CAAb,CAFgC,CAUhC;;AACA,YAAMS,QAAQ,GAAGpB,eAAe,CAACqB,WAAhB,CAA4B;AAC3Cd,UAAAA,UAAU,EAAVA,UAD2C;AAE3CC,UAAAA,QAAQ,EAARA,QAF2C;AAG3CO,UAAAA,CAAC,EAADA,CAH2C;AAI3CC,UAAAA,CAAC,EAADA,CAJ2C;AAK3CN,UAAAA,KAAK,EAALA,KAL2C;AAM3CC,UAAAA,MAAM,EAANA,MAN2C;AAO3CM,UAAAA,IAAI,EAAJA;AAP2C,SAA5B,CAAjB,CAXgC,CAoBhC;;AACAhB,QAAAA,MAAM,CAACmB,QAAQ,CAACE,MAAT,GAAkB,CAAlB,KAAwB,CAAzB,CAAN;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACE,MAA7B,EAAqCC,CAAC,IAAI,CAA1C,EAA6C;AAC3Cd,UAAAA,eAAe,CAACe,IAAhB,CAAqB;AACnBC,YAAAA,KAAK,EAAEL,QAAQ,CAACG,CAAD,CADI;AAEnBG,YAAAA,GAAG,EAAEN,QAAQ,CAACG,CAAC,GAAG,CAAL,CAFM;AAGnBV,YAAAA,SAAS,EAATA;AAHmB,WAArB;AAKD;AACF;AACF;AACF,GAjCD;AAkCA,SAAOJ,eAAP;AACD","sourcesContent":["import * as MarchingSquares from './marching-squares';\nimport assert from 'assert';\n\n// Given all the cell weights, generates contours for each threshold.\nexport function generateContours({\n  thresholds,\n  colors,\n  cellWeights,\n  gridSize,\n  gridOrigin,\n  cellSize\n}) {\n  const contourSegments = [];\n  const width = gridSize[0];\n  const height = gridSize[1];\n\n  thresholds.forEach((threshold, index) => {\n    for (let x = -1; x < width; x++) {\n      for (let y = -1; y < height; y++) {\n        // Get the MarchingSquares code based on neighbor cell weights.\n        const code = MarchingSquares.getCode({\n          cellWeights,\n          thresholdValue: threshold,\n          x,\n          y,\n          width,\n          height\n        });\n        // Get the intersection vertices based on MarchingSquares code.\n        const vertices = MarchingSquares.getVertices({\n          gridOrigin,\n          cellSize,\n          x,\n          y,\n          width,\n          height,\n          code\n        });\n        // We should always get even number of vertices\n        assert(vertices.length % 2 === 0);\n        for (let i = 0; i < vertices.length; i += 2) {\n          contourSegments.push({\n            start: vertices[i],\n            end: vertices[i + 1],\n            threshold\n          });\n        }\n      }\n    }\n  });\n  return contourSegments;\n}\n"],"file":"contour-utils.js"}