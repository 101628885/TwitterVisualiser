{"version":3,"sources":["../../../src/contour-layer/marching-squares.js"],"names":["assert","OFFSET","N","E","S","W","CODE_OFFSET_MAP","getCode","cellWeights","thresholdValue","x","y","width","height","isLeftBoundary","isRightBoundary","isBottomBoundary","isTopBoundary","top","topRight","right","current","code","getVertices","gridOrigin","cellSize","offsets","rX","rY","refVertexX","refVertexY","vertices","forEach","xyOffsets","offset","vX","vY","push"],"mappings":"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","sourcesContent":["// All utility mehtods needed to implement Marching Squres algorithm\n// Ref: https://en.wikipedia.org/wiki/Marching_squares\nimport assert from 'assert';\n\n// Table to map code to the intersection offsets\n// All offsets are relative to the center of marching cell (which is top right corner of grid-cell)\nconst OFFSET = {\n  N: [0, 0.5],\n  E: [0.5, 0],\n  S: [0, -0.5],\n  W: [-0.5, 0]\n};\n\n// Note: above wiki page invertes white/black dots for generating the code, we don't\nconst CODE_OFFSET_MAP = {\n  0: [],\n  1: [[OFFSET.W, OFFSET.S]],\n  2: [[OFFSET.S, OFFSET.E]],\n  3: [[OFFSET.W, OFFSET.E]],\n  4: [[OFFSET.N, OFFSET.E]],\n  5: [[OFFSET.W, OFFSET.N], [OFFSET.S, OFFSET.E]],\n  6: [[OFFSET.N, OFFSET.S]],\n  7: [[OFFSET.W, OFFSET.N]],\n  8: [[OFFSET.W, OFFSET.N]],\n  9: [[OFFSET.N, OFFSET.S]],\n  10: [[OFFSET.W, OFFSET.S], [OFFSET.N, OFFSET.E]],\n  11: [[OFFSET.N, OFFSET.E]],\n  12: [[OFFSET.W, OFFSET.E]],\n  13: [[OFFSET.S, OFFSET.E]],\n  14: [[OFFSET.W, OFFSET.S]],\n  15: []\n};\n\n// Returns marching square code for given cell\n/* eslint-disable complexity */\nexport function getCode({cellWeights, thresholdValue, x, y, width, height}) {\n  // Assumptions\n  // Origin is on bottom-left , and X increase to right, Y to top\n  // When processing one cell, we process 4 cells, by extending row to top and on column to right\n  // to create a 2X2 cell grid\n\n  assert(x >= -1 && x < width);\n  assert(y >= -1 && y < height);\n\n  const isLeftBoundary = x < 0;\n  const isRightBoundary = x >= width - 1;\n  const isBottomBoundary = y < 0;\n  const isTopBoundary = y >= height - 1;\n\n  const top =\n    isLeftBoundary || isTopBoundary\n      ? 0\n      : cellWeights[(y + 1) * width + x] - thresholdValue >= 0\n        ? 1\n        : 0;\n  const topRight =\n    isRightBoundary || isTopBoundary\n      ? 0\n      : cellWeights[(y + 1) * width + x + 1] - thresholdValue >= 0\n        ? 1\n        : 0;\n  const right = isRightBoundary ? 0 : cellWeights[y * width + x + 1] - thresholdValue >= 0 ? 1 : 0;\n  const current =\n    isLeftBoundary || isBottomBoundary\n      ? 0\n      : cellWeights[y * width + x] - thresholdValue >= 0\n        ? 1\n        : 0;\n\n  const code = (top << 3) | (topRight << 2) | (right << 1) | current;\n\n  assert(code >= 0 && code < 16);\n\n  return code;\n}\n/* eslint-enable complexity */\n\n// Returns intersection vertices for given cellindex\n// [x, y] refers current marchng cell, reference vertex is always top-right corner\nexport function getVertices({gridOrigin, cellSize, x, y, code}) {\n  const offsets = CODE_OFFSET_MAP[code];\n\n  // Reference vertex is at top-right move to top-right corner\n  assert(x >= -1);\n  assert(y >= -1);\n\n  const rX = (x + 1) * cellSize[0];\n  const rY = (y + 1) * cellSize[1];\n\n  const refVertexX = gridOrigin[0] + rX;\n  const refVertexY = gridOrigin[1] + rY;\n\n  const vertices = [];\n  offsets.forEach(xyOffsets => {\n    xyOffsets.forEach(offset => {\n      const vX = refVertexX + offset[0] * cellSize[0];\n      const vY = refVertexY + offset[1] * cellSize[1];\n      vertices.push([vX, vY]);\n    });\n  });\n\n  return vertices;\n}\n"],"file":"marching-squares.js"}