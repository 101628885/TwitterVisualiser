{"version":3,"sources":["../../../src/hexagon-layer/hexagon-layer.js"],"names":["CompositeLayer","log","experimental","HexagonCellLayer","BinSorter","getQuantizeScale","getLinearScale","defaultColorRange","pointToHexbin","nop","defaultProps","colorDomain","colorRange","getColorValue","points","length","lowerPercentile","upperPercentile","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","elevationLowerPercentile","elevationUpperPercentile","elevationScale","type","min","value","onSetElevationDomain","radius","coverage","max","extruded","hexagonAggregator","getPosition","x","position","fp64","lightSettings","HexagonLayer","props","once","Number","isFinite","state","hexagons","hexagonVertices","sortedColorBins","sortedElevationBins","colorValueDomain","elevationValueDomain","colorScaleFunc","elevationScaleFunc","dimensionUpdaters","getDimensionUpdaters","changeFlags","propsOrDataChanged","viewportChanged","oldProps","dimensionChanges","getDimensionChanges","needsReProjectPoints","getHexagons","forEach","f","apply","dataChanged","getColor","id","triggers","updater","getSortedColorBins","getColorValueDomain","getColorScale","getElevation","getSortedElevationBins","getElevationValueDomain","getElevationScale","updaters","dimensionKey","needUpdate","find","item","some","t","push","viewport","context","isGeospatial","setState","getSortedBins","info","isPicked","picked","index","object","cell","colorValue","binMap","elevationValue","Object","assign","Boolean","updateTriggers","step","prop","getValueRange","cv","isColorValueInDomain","color","ev","isElevationValueInDomain","transitions","data","angle","Math","PI","_onGetSublayerColor","bind","_onGetSublayerElevation","getUpdateTriggers","SubLayerClass","getSubLayerClass","getSubLayerProps","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log, experimental} from '@deck.gl/core';\nimport HexagonCellLayer from '../hexagon-cell-layer/hexagon-cell-layer';\n\nconst {BinSorter, getQuantizeScale, getLinearScale, defaultColorRange} = experimental;\n\nimport {pointToHexbin} from './hexagon-aggregator';\n\nfunction nop() {}\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: points => points.length,\n  lowerPercentile: 0,\n  upperPercentile: 100,\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: points => points.length,\n  elevationLowerPercentile: 0,\n  elevationUpperPercentile: 100,\n  elevationScale: {type: 'number', min: 0, value: 1},\n  onSetElevationDomain: nop,\n\n  radius: 1000,\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: x => x.position,\n  fp64: false,\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\nexport default class HexagonLayer extends CompositeLayer {\n  constructor(props) {\n    if (!props.hexagonAggregator && !props.radius) {\n      log.once(\n        0,\n        'HexagonLayer: Default hexagonAggregator requires radius prop to be set, ' +\n          'Now using 1000 meter as default'\n      )();\n\n      props.radius = defaultProps.radius;\n    }\n\n    if (\n      Number.isFinite(props.upperPercentile) &&\n      (props.upperPercentile > 100 || props.upperPercentile < 0)\n    ) {\n      log.once(\n        0,\n        'HexagonLayer: upperPercentile should be between 0 and 100. ' + 'Assign to 100 by default'\n      )();\n\n      props.upperPercentile = defaultProps.upperPercentile;\n    }\n\n    if (\n      Number.isFinite(props.lowerPercentile) &&\n      (props.lowerPercentile > 100 || props.lowerPercentile < 0)\n    ) {\n      log.once(\n        0,\n        'HexagonLayer: lowerPercentile should be between 0 and 100. ' + 'Assign to 0 by default'\n      )();\n\n      props.lowerPercentile = defaultProps.upperPercentile;\n    }\n\n    if (props.lowerPercentile >= props.upperPercentile) {\n      log.once(\n        0,\n        'HexagonLayer: lowerPercentile should not be bigger than ' +\n          'upperPercentile. Assign to 0 by default'\n      )();\n\n      props.lowerPercentile = defaultProps.lowerPercentile;\n    }\n\n    super(props);\n  }\n\n  initializeState() {\n    this.state = {\n      hexagons: [],\n      hexagonVertices: null,\n      sortedColorBins: null,\n      sortedElevationBins: null,\n      colorValueDomain: null,\n      elevationValueDomain: null,\n      colorScaleFunc: nop,\n      elevationScaleFunc: nop,\n      dimensionUpdaters: this.getDimensionUpdaters()\n    };\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return (\n      changeFlags.propsOrDataChanged ||\n      // if viewport is changed and aggregation to hexbins has not happened yet.\n      (changeFlags.viewportChanged && this.state.hexagons.length === 0)\n    );\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const dimensionChanges = this.getDimensionChanges(oldProps, props);\n\n    if (this.needsReProjectPoints(oldProps, props, changeFlags)) {\n      // project data into hexagons, and get sortedColorBins\n      this.getHexagons();\n    } else if (dimensionChanges) {\n      dimensionChanges.forEach(f => typeof f === 'function' && f.apply(this));\n    }\n  }\n\n  needsReProjectPoints(oldProps, props, changeFlags) {\n    return (\n      changeFlags.dataChanged ||\n      this.state.hexagons.length === 0 ||\n      oldProps.radius !== props.radius ||\n      oldProps.hexagonAggregator !== props.hexagonAggregator\n    );\n  }\n\n  getDimensionUpdaters() {\n    // dimension updaters are sequential,\n    // if the first one needs to be called, the 2nd and 3rd one will automatically\n    // be called. e.g. if ColorValue needs to be updated, getColorValueDomain and getColorScale\n    // will automatically be called\n    return {\n      getColor: [\n        {\n          id: 'value',\n          triggers: ['getColorValue'],\n          updater: this.getSortedColorBins\n        },\n        {\n          id: 'domain',\n          triggers: ['lowerPercentile', 'upperPercentile'],\n          updater: this.getColorValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['colorDomain', 'colorRange'],\n          updater: this.getColorScale\n        }\n      ],\n      getElevation: [\n        {\n          id: 'value',\n          triggers: ['getElevationValue'],\n          updater: this.getSortedElevationBins\n        },\n        {\n          id: 'domain',\n          triggers: ['elevationLowerPercentile', 'elevationUpperPercentile'],\n          updater: this.getElevationValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['elevationDomain', 'elevationRange'],\n          updater: this.getElevationScale\n        }\n      ]\n    };\n  }\n\n  getDimensionChanges(oldProps, props) {\n    const {dimensionUpdaters} = this.state;\n    const updaters = [];\n\n    // get dimension to be updated\n    for (const dimensionKey in dimensionUpdaters) {\n      // return the first triggered updater for each dimension\n      const needUpdate = dimensionUpdaters[dimensionKey].find(item =>\n        item.triggers.some(t => oldProps[t] !== props[t])\n      );\n\n      if (needUpdate) {\n        updaters.push(needUpdate.updater);\n      }\n    }\n\n    return updaters.length ? updaters : null;\n  }\n\n  getHexagons() {\n    const {viewport} = this.context;\n    // layer is first initialzed with defautl viewport which could be non geospatial\n    if (viewport.isGeospatial) {\n      const {hexagonAggregator} = this.props;\n      const {hexagons, hexagonVertices} = hexagonAggregator(this.props, viewport);\n      this.setState({hexagons, hexagonVertices});\n      this.getSortedBins();\n    }\n  }\n\n  getPickingInfo({info}) {\n    const {sortedColorBins, sortedElevationBins} = this.state;\n    const isPicked = info.picked && info.index > -1;\n\n    let object = null;\n    if (isPicked) {\n      const cell = this.state.hexagons[info.index];\n\n      const colorValue =\n        sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n      const elevationValue =\n        sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n      object = Object.assign(\n        {\n          colorValue,\n          elevationValue\n        },\n        cell\n      );\n    }\n\n    // add bin colorValue and elevationValue to info\n    return Object.assign(info, {\n      picked: Boolean(object),\n      // override object with picked cell\n      object\n    });\n  }\n\n  getUpdateTriggers() {\n    const {dimensionUpdaters} = this.state;\n\n    // merge all dimension triggers\n    const updateTriggers = {};\n\n    for (const dimensionKey in dimensionUpdaters) {\n      updateTriggers[dimensionKey] = {};\n\n      for (const step of dimensionUpdaters[dimensionKey]) {\n        step.triggers.forEach(prop => {\n          updateTriggers[dimensionKey][prop] = this.props[prop];\n        });\n      }\n    }\n\n    return updateTriggers;\n  }\n\n  getValueDomain() {\n    this.getColorValueDomain();\n    this.getElevationValueDomain();\n  }\n\n  getSortedBins() {\n    this.getSortedColorBins();\n    this.getSortedElevationBins();\n  }\n\n  getSortedColorBins() {\n    const {getColorValue} = this.props;\n    const sortedColorBins = new BinSorter(this.state.hexagons || [], getColorValue);\n\n    this.setState({sortedColorBins});\n    this.getColorValueDomain();\n  }\n\n  getSortedElevationBins() {\n    const {getElevationValue} = this.props;\n    const sortedElevationBins = new BinSorter(this.state.hexagons || [], getElevationValue);\n    this.setState({sortedElevationBins});\n    this.getElevationValueDomain();\n  }\n\n  getColorValueDomain() {\n    const {lowerPercentile, upperPercentile, onSetColorDomain} = this.props;\n\n    this.state.colorValueDomain = this.state.sortedColorBins.getValueRange([\n      lowerPercentile,\n      upperPercentile\n    ]);\n\n    if (typeof onSetColorDomain === 'function') {\n      onSetColorDomain(this.state.colorValueDomain);\n    }\n\n    this.getColorScale();\n  }\n\n  getElevationValueDomain() {\n    const {elevationLowerPercentile, elevationUpperPercentile, onSetElevationDomain} = this.props;\n\n    this.state.elevationValueDomain = this.state.sortedElevationBins.getValueRange([\n      elevationLowerPercentile,\n      elevationUpperPercentile\n    ]);\n\n    if (typeof onSetElevationDomain === 'function') {\n      onSetElevationDomain(this.state.elevationValueDomain);\n    }\n\n    this.getElevationScale();\n  }\n\n  getColorScale() {\n    const {colorRange} = this.props;\n    const colorDomain = this.props.colorDomain || this.state.colorValueDomain;\n\n    this.state.colorScaleFunc = getQuantizeScale(colorDomain, colorRange);\n  }\n\n  getElevationScale() {\n    const {elevationRange} = this.props;\n    const elevationDomain = this.props.elevationDomain || this.state.elevationValueDomain;\n\n    this.state.elevationScaleFunc = getLinearScale(elevationDomain, elevationRange);\n  }\n\n  _onGetSublayerColor(cell) {\n    const {sortedColorBins, colorScaleFunc, colorValueDomain} = this.state;\n\n    const cv = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n    const colorDomain = this.props.colorDomain || colorValueDomain;\n\n    const isColorValueInDomain = cv >= colorDomain[0] && cv <= colorDomain[colorDomain.length - 1];\n\n    // if cell value is outside domain, set alpha to 0\n    const color = isColorValueInDomain ? colorScaleFunc(cv) : [0, 0, 0, 0];\n\n    // add alpha to color if not defined in colorRange\n    color[3] = Number.isFinite(color[3]) ? color[3] : 255;\n\n    return color;\n  }\n\n  _onGetSublayerElevation(cell) {\n    const {sortedElevationBins, elevationScaleFunc, elevationValueDomain} = this.state;\n    const ev =\n      sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n    const elevationDomain = this.props.elevationDomain || elevationValueDomain;\n\n    const isElevationValueInDomain =\n      ev >= elevationDomain[0] && ev <= elevationDomain[elevationDomain.length - 1];\n\n    // if cell value is outside domain, set elevation to -1\n    return isElevationValueInDomain ? elevationScaleFunc(ev) : -1;\n  }\n\n  // for subclassing, override this method to return\n  // customized sub layer props\n  getSubLayerProps() {\n    const {\n      radius,\n      elevationScale,\n      extruded,\n      coverage,\n      lightSettings,\n      fp64,\n      transitions\n    } = this.props;\n\n    // return props to the sublayer constructor\n    return super.getSubLayerProps({\n      id: 'hexagon-cell',\n      data: this.state.hexagons,\n\n      fp64,\n      hexagonVertices: this.state.hexagonVertices,\n      radius,\n      elevationScale,\n      angle: Math.PI / 2,\n      extruded,\n      coverage,\n      lightSettings,\n\n      getColor: this._onGetSublayerColor.bind(this),\n      getElevation: this._onGetSublayerElevation.bind(this),\n      transitions: transitions && {\n        getColor: transitions.getColorValue,\n        getElevation: transitions.getElevationValue\n      },\n      updateTriggers: this.getUpdateTriggers()\n    });\n  }\n\n  // for subclassing, override this method to return\n  // customized sub layer class\n  getSubLayerClass() {\n    return HexagonCellLayer;\n  }\n\n  renderLayers() {\n    const SubLayerClass = this.getSubLayerClass();\n\n    return new SubLayerClass(this.getSubLayerProps());\n  }\n}\n\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;\n"],"file":"hexagon-layer.js"}