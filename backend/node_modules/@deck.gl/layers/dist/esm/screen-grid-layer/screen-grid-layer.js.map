{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-layer.js"],"names":["Layer","experimental","WebMercatorViewport","_GPUGridAggregator","GPUGridAggregator","log","defaultColorRange","GL","Model","Geometry","Buffer","isWebGL2","vs","vs_WebGL1","fs","fs_WebGL1","assert","DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","AGGREGATION_DATA_UBO_INDEX","COLOR_PROPS","COLOR_RANGE_LENGTH","defaultProps","cellSizePixels","value","min","cellMarginPixels","max","colorDomain","colorRange","getPosition","d","position","getWeight","gpuAggregation","ScreenGridLayer","shaders","context","gl","modules","attributeManager","getAttributeManager","addInstanced","instancePositions","size","update","calculateInstancePositions","instanceCounts","transition","accessor","calculateInstanceCounts","noAlloc","options","id","shaderCache","setState","model","_getModel","gpuGridAggregator","maxCountBuffer","_getMaxCountBuffer","aggregationData","_setupUniformBuffer","changeFlags","somethingChanged","opts","_updateUniforms","dataChanged","_processData","_getAggregationChangeFlags","_updateAggregation","uniforms","props","parameters","minColor","maxColor","state","cellScale","shouldUseMinMax","maxWeight","layerUniforms","bind","target","UNIFORM_BUFFER","Object","assign","draw","depthTest","depthMask","unbind","attribute","numInstances","viewport","width","height","numCol","i","x","y","Math","floor","countsBuffer","buffer","info","mode","index","countsData","getData","maxCountData","object","getAggregationData","pixelIndex","oldProps","cellSizeChanged","viewportChanged","getShaders","geometry","drawMode","TRIANGLE_FAN","attributes","vertices","Float32Array","isInstanced","bytes","data","positions","weights","point","push","programHandle","program","handle","uniformBlockIndex","getUniformBlockIndex","uniformBlockBinding","deprecated","_updateGridParams","invalidateAll","projectPoints","results","run","cellSize","useGPU","invalidate","newState","some","key","_shouldUseMinMax","colorRangeUniform","length","forEach","color","margin","ceil","numRow","dataBytes","delete","type","FLOAT","instanced","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  experimental,\n  WebMercatorViewport,\n  _GPUGridAggregator as GPUGridAggregator,\n  log\n} from '@deck.gl/core';\nconst {defaultColorRange} = experimental;\n\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, Buffer, isWebGL2} from 'luma.gl';\n\nimport vs from './screen-grid-layer-vertex.glsl';\nimport vs_WebGL1 from './screen-grid-layer-vertex-webgl1.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nimport fs_WebGL1 from './screen-grid-layer-fragment-webgl1.glsl';\nimport assert from 'assert';\n\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst AGGREGATION_DATA_UBO_INDEX = 0;\nconst COLOR_PROPS = [`minColor`, `maxColor`, `colorRange`, `colorDomain`];\nconst COLOR_RANGE_LENGTH = 6;\n\nconst defaultProps = {\n  cellSizePixels: {value: 100, min: 1},\n  cellMarginPixels: {value: 2, min: 0, max: 5},\n\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  getPosition: d => d.position,\n  getWeight: d => 1,\n\n  gpuAggregation: true\n};\n\nexport default class ScreenGridLayer extends Layer {\n  getShaders() {\n    const shaders = isWebGL2(this.context.gl) ? {vs, fs} : {vs: vs_WebGL1, fs: fs_WebGL1};\n    shaders.modules = ['picking'];\n    return shaders;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    const {gl} = this.context;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {size: 3, update: this.calculateInstancePositions},\n      instanceCounts: {\n        size: 4,\n        transition: true,\n        accessor: ['getPosition', 'getWeight'],\n        update: this.calculateInstanceCounts,\n        noAlloc: true\n      }\n    });\n    /* eslint-disable max-len */\n\n    const options = {\n      id: `${this.id}-aggregator`,\n      shaderCache: this.context.shaderCache\n    };\n    this.setState({\n      model: this._getModel(gl),\n      gpuGridAggregator: new GPUGridAggregator(gl, options),\n      maxCountBuffer: this._getMaxCountBuffer(gl),\n      aggregationData: null\n    });\n\n    this._setupUniformBuffer();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n\n    this._updateUniforms(opts);\n\n    if (opts.changeFlags.dataChanged) {\n      this._processData();\n    }\n\n    const changeFlags = this._getAggregationChangeFlags(opts);\n\n    if (changeFlags) {\n      this._updateAggregation(changeFlags);\n    }\n  }\n\n  draw({uniforms}) {\n    const {gl} = this.context;\n    const {parameters = {}} = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n\n    // If colorDomain not specified we use default domain [1, maxCount]\n    // maxCount value will be deduced from aggregated buffer in the vertex shader.\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {model, maxCountBuffer, cellScale, shouldUseMinMax, colorRange, maxWeight} = this.state;\n    const layerUniforms = {\n      minColor,\n      maxColor,\n      cellScale,\n      colorRange,\n      colorDomain,\n      shouldUseMinMax\n    };\n\n    if (isWebGL2(gl)) {\n      maxCountBuffer.bind({target: GL.UNIFORM_BUFFER});\n    } else {\n      layerUniforms.maxWeight = maxWeight;\n    }\n    uniforms = Object.assign(layerUniforms, uniforms);\n    model.draw({\n      uniforms,\n      parameters: Object.assign(\n        {\n          depthTest: false,\n          depthMask: false\n        },\n        parameters\n      )\n    });\n    if (isWebGL2(gl)) {\n      maxCountBuffer.unbind();\n    }\n  }\n\n  calculateInstancePositions(attribute, {numInstances}) {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const {numCol} = this.state;\n    const {value, size} = attribute;\n\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = ((x * cellSizePixels) / width) * 2 - 1;\n      value[i * size + 1] = 1 - ((y * cellSizePixels) / height) * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n\n  calculateInstanceCounts(attribute, {numInstances}) {\n    const {countsBuffer} = this.state;\n    attribute.update({\n      buffer: countsBuffer\n    });\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    if (index >= 0) {\n      let {aggregationData} = this.state;\n      if (!aggregationData) {\n        aggregationData = {\n          countsData: this.state.countsBuffer.getData(),\n          maxCountData: this.state.maxCountBuffer.getData()\n        };\n        // Cache aggregationData to avoid multiple buffer reads.\n        this.setState({aggregationData});\n      }\n      const {countsData, maxCountData} = aggregationData;\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData({\n        countsData,\n        maxCountData,\n        pixelIndex: index\n      });\n    }\n\n    return info;\n  }\n\n  // HELPER Methods\n\n  _getAggregationChangeFlags({oldProps, props, changeFlags}) {\n    const cellSizeChanged =\n      props.cellSizePixels !== oldProps.cellSizePixels ||\n      props.cellMarginPixels !== oldProps.cellMarginPixels;\n    const dataChanged = changeFlags.dataChanged;\n    const viewportChanged = changeFlags.viewportChanged;\n\n    if (cellSizeChanged || dataChanged || viewportChanged) {\n      return {cellSizeChanged, dataChanged, viewportChanged};\n    }\n\n    return null;\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            vertices: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  // Creates and returns a Uniform Buffer object to hold maxCount value.\n  _getMaxCountBuffer(gl) {\n    return new Buffer(gl, {\n      bytes: 4 * 4, // Four floats\n      size: 4,\n      index: AGGREGATION_DATA_UBO_INDEX\n    });\n  }\n\n  // Process 'data' and build positions and weights Arrays.\n  _processData() {\n    const {data, getPosition, getWeight} = this.props;\n    const positions = [];\n    const weights = [];\n\n    for (const point of data) {\n      const position = getPosition(point);\n      positions.push(position[0]);\n      positions.push(position[1]);\n      weights.push(getWeight(point));\n    }\n\n    this.setState({positions, weights});\n  }\n\n  // Set a binding point for the aggregation uniform block index\n  _setupUniformBuffer() {\n    const gl = this.context.gl;\n    // For WebGL1, uniform buffer is not used.\n    if (!isWebGL2(gl)) {\n      return;\n    }\n    const programHandle = this.state.model.program.handle;\n\n    // TODO: Replace with luma.gl api when ready.\n    const uniformBlockIndex = gl.getUniformBlockIndex(programHandle, 'AggregationData');\n    gl.uniformBlockBinding(programHandle, uniformBlockIndex, AGGREGATION_DATA_UBO_INDEX);\n  }\n\n  _shouldUseMinMax() {\n    const {minColor, maxColor, colorDomain, colorRange} = this.props;\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n    // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n    // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    // None specified, use default minColor and maxColor\n    return true;\n  }\n\n  _updateAggregation(changeFlags) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this._updateGridParams();\n      attributeManager.invalidateAll();\n    }\n    const {cellSizePixels, gpuAggregation} = this.props;\n\n    const {positions, weights, maxCountBuffer, countsBuffer} = this.state;\n\n    const projectPoints = this.context.viewport instanceof WebMercatorViewport;\n    const results = this.state.gpuGridAggregator.run({\n      positions,\n      weights,\n      cellSize: [cellSizePixels, cellSizePixels],\n      viewport: this.context.viewport,\n      countsBuffer,\n      maxCountBuffer,\n      changeFlags,\n      useGPU: gpuAggregation,\n      projectPoints\n    });\n\n    const {maxWeight = 0} = results;\n    this.setState({\n      aggregationData: null, // Aggregation changed, enforce reading buffer data for picking.\n      maxWeight // uniform to use under WebGL1\n    });\n\n    attributeManager.invalidate('instanceCounts');\n  }\n\n  _updateUniforms({oldProps, props, changeFlags}) {\n    const newState = {};\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      newState.shouldUseMinMax = this._shouldUseMinMax();\n    }\n\n    if (oldProps.colorRange !== props.colorRange) {\n      const colorRangeUniform = [];\n      assert(props.colorRange && props.colorRange.length === COLOR_RANGE_LENGTH);\n      props.colorRange.forEach(color => {\n        colorRangeUniform.push(color[0], color[1], color[2], color[3] || 255);\n      });\n      newState.colorRange = colorRangeUniform;\n    }\n\n    if (\n      oldProps.cellMarginPixels !== props.cellMarginPixels ||\n      oldProps.cellSizePixels !== props.cellSizePixels ||\n      changeFlags.viewportChanged\n    ) {\n      const {width, height} = this.context.viewport;\n      const {cellSizePixels, cellMarginPixels} = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n\n      newState.cellScale = new Float32Array([\n        ((cellSizePixels - margin) / width) * 2,\n        (-(cellSizePixels - margin) / height) * 2,\n        1\n      ]);\n    }\n    this.setState(newState);\n  }\n\n  _updateGridParams() {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const {gl} = this.context;\n\n    const numCol = Math.ceil(width / cellSizePixels);\n    const numRow = Math.ceil(height / cellSizePixels);\n    const numInstances = numCol * numRow;\n    const dataBytes = numInstances * 4 * 4;\n    let countsBuffer = this.state.countsBuffer;\n    if (countsBuffer) {\n      countsBuffer.delete();\n    }\n\n    countsBuffer = new Buffer(gl, {\n      size: 4,\n      bytes: dataBytes,\n      type: GL.FLOAT,\n      instanced: 1\n    });\n\n    this.setState({\n      numCol,\n      numRow,\n      numInstances,\n      countsBuffer\n    });\n  }\n}\n\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;\n"],"file":"screen-grid-layer.js"}