{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.js"],"names":["Layer","GL","Model","Geometry","hasFeature","FEATURES","PolygonTesselator","vs","fs","DEFAULT_COLOR","defaultProps","filled","extruded","wireframe","fp64","elevationScale","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","lightSettings","ATTRIBUTE_TRANSITION","enter","value","chunk","length","subarray","SolidPolygonLayer","projectModule","use64bitProjection","modules","gl","context","setState","numInstances","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","remove","add","indices","size","isIndexed","update","calculateIndices","positions","transition","accessor","calculatePositions","positions64xyLow","calculatePositionsLow","vertexValid","type","UNSIGNED_BYTE","calculateVertexValid","elevations","calculateElevations","fillColors","alias","calculateFillColors","defaultValue","lineColors","calculateLineColors","pickingColors","calculatePickingColors","uniforms","props","state","topModel","sideModel","renderUniforms","Object","assign","Boolean","setUniforms","setDrawMode","LINE_STRIP","render","isWireframe","TRIANGLE_FAN","updateParams","updateGeometry","oldProps","regenerateModels","models","forEach","model","delete","_getModels","invalidateAll","changeFlags","geometryConfigChanged","dataChanged","updateTriggersChanged","all","polygons","data","map","polygonTesselator","_getPolygonTesselator","pointCount","updatePositions","use64bitPositions","attributes","getChangedAttributes","clearChangedFlags","vertexCount","setVertexCount","setAttributes","setInstanceCount","newAttributes","attributeName","attribute","isInstanced","buffer","getBuffer","nextPositions","id","offset","nextPositions64xyLow","getShaders","geometry","drawMode","TRIANGLES","vertexPositions","constant","Float32Array","isSideVertex","shaderCache","LINES","filter","bufferLayout","isFP64","polygonIndex","elevation","colors","key","getColor","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, hasFeature, FEATURES} from 'luma.gl';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport {PolygonTesselator} from './polygon-tesselator';\n\nimport vs from './solid-polygon-layer-vertex.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  fp64: false,\n\n  // elevation multiplier\n  elevationScale: 1,\n\n  // Accessor for polygon geometry\n  getPolygon: f => f.polygon,\n  // Accessor for extrusion height\n  getElevation: 1000,\n  // Accessor for colors\n  getFillColor: DEFAULT_COLOR,\n  getLineColor: DEFAULT_COLOR,\n\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    this.setState({\n      numInstances: 0,\n      IndexType: hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc\n      },\n      positions64xyLow: {size: 2, update: this.calculatePositionsLow, noAlloc},\n      vertexValid: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        update: this.calculateElevations,\n        noAlloc\n      },\n      fillColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        update: this.calculateFillColors,\n        defaultValue: DEFAULT_COLOR,\n        noAlloc\n      },\n      lineColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        update: this.calculateLineColors,\n        defaultValue: DEFAULT_COLOR,\n        noAlloc\n      },\n      pickingColors: {size: 3, type: GL.UNSIGNED_BYTE, update: this.calculatePickingColors, noAlloc}\n    });\n    /* eslint-enable max-len */\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel} = this.state;\n\n    const renderUniforms = Object.assign({}, uniforms, {\n      extruded: Boolean(extruded),\n      elevationScale\n    });\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.render({isWireframe: true});\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.render({isWireframe: false});\n      }\n    }\n    if (topModel) {\n      topModel.render(renderUniforms);\n    }\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      props.fp64 !== oldProps.fp64 ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      if (this.state.models) {\n        this.state.models.forEach(model => model.delete());\n      }\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      // TODO - avoid creating a temporary array here: let the tesselator iterate\n      const polygons = props.data.map(props.getPolygon);\n      const polygonTesselator = this._getPolygonTesselator(polygons, this.state.IndexType);\n\n      this.setState({\n        polygonTesselator,\n        numInstances: polygonTesselator.pointCount\n      });\n\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (\n      geometryConfigChanged ||\n      props.extruded !== oldProps.extruded ||\n      props.fp64 !== oldProps.fp64\n    ) {\n      this.state.polygonTesselator.updatePositions({\n        fp64: this.use64bitPositions(),\n        extruded: props.extruded\n      });\n    }\n  }\n\n  // \"Experimental\" method indended to make it easier to support non-nested arrays in subclasses\n  _getPolygonTesselator(polygons, IndexType) {\n    return new PolygonTesselator({polygons, IndexType: this.state.IndexType});\n  }\n\n  updateAttributes(props) {\n    super.updateAttributes(props);\n    const attributes = this.getAttributeManager().getChangedAttributes({clearChangedFlags: true});\n    const {topModel, sideModel, vertexCount, numInstances} = this.state;\n\n    if (topModel) {\n      topModel.setVertexCount(vertexCount);\n      topModel.setAttributes(attributes);\n    }\n    if (sideModel) {\n      // Remove one to account for the offset\n      sideModel.setInstanceCount(numInstances - 1);\n      const newAttributes = {};\n      for (const attributeName in attributes) {\n        const attribute = attributes[attributeName];\n\n        if (attributeName !== 'indices') {\n          // Apply layout override to the attribute.\n          newAttributes[attributeName] = Object.assign({}, attribute, {\n            isInstanced: true,\n            buffer: attribute.getBuffer()\n          });\n        }\n      }\n      if (newAttributes.positions) {\n        newAttributes.nextPositions = Object.assign(\n          {},\n          newAttributes.positions,\n          {id: 'nextPositions', offset: 12} // 1 vertex * 3 floats * 4 bits\n        );\n      }\n      if (newAttributes.positions64xyLow) {\n        newAttributes.nextPositions64xyLow = Object.assign(\n          {},\n          newAttributes.positions64xyLow,\n          {id: 'nextPositions64xyLow', offset: 8} // 1 vertex * 2 floats * 4 bits\n        );\n      }\n      sideModel.setAttributes(newAttributes);\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      topModel = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-top`,\n          geometry: new Geometry({\n            drawMode: GL.TRIANGLES,\n            attributes: {\n              vertexPositions: {size: 2, constant: true, value: new Float32Array([0, 1])},\n              nextPositions: {size: 3, constant: true, value: new Float32Array(3)},\n              nextPositions64xyLow: {size: 2, constant: true, value: new Float32Array(2)}\n            }\n          }),\n          uniforms: {\n            isWireframe: false,\n            isSideVertex: false\n          },\n          vertexCount: 0,\n          isIndexed: true,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (extruded) {\n      sideModel = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-side`,\n          geometry: new Geometry({\n            drawMode: GL.LINES,\n            vertexCount: 4,\n            attributes: {\n              // top right - top left - bootom left - bottom right\n              vertexPositions: {size: 2, value: new Float32Array([1, 1, 0, 1, 0, 0, 1, 0])}\n            }\n          }),\n          uniforms: {\n            isSideVertex: true\n          },\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  calculateIndices(attribute) {\n    attribute.value = this.state.polygonTesselator.indices();\n    const vertexCount = attribute.value.length / attribute.size;\n    this.setState({vertexCount});\n  }\n\n  calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.positions();\n  }\n  calculatePositionsLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.positions64xyLow();\n  }\n\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.vertexValid();\n  }\n\n  calculateElevations(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n\n    const {extruded, getElevation} = this.props;\n    if (extruded && typeof getElevation === 'function') {\n      attribute.constant = false;\n      attribute.value = polygonTesselator.elevations({\n        getElevation: polygonIndex => getElevation(this.props.data[polygonIndex])\n      });\n    } else {\n      const elevation = extruded ? getElevation : 0;\n      attribute.constant = true;\n      attribute.value = new Float32Array([elevation]);\n    }\n  }\n\n  calculateFillColors(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.colors({\n      key: 'fillColors',\n      getColor: polygonIndex => this.props.getFillColor(this.props.data[polygonIndex])\n    });\n  }\n  calculateLineColors(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.colors({\n      key: 'lineColors',\n      getColor: polygonIndex => this.props.getLineColor(this.props.data[polygonIndex])\n    });\n  }\n\n  // Override the default picking colors calculation\n  calculatePickingColors(attribute) {\n    attribute.value = this.state.polygonTesselator.pickingColors();\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"],"file":"solid-polygon-layer.js"}