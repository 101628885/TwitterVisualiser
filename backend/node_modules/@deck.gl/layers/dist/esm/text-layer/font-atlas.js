function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* global document */
import { Texture2D } from 'luma.gl';
var GL_TEXTURE_WRAP_S = 0x2802;
var GL_TEXTURE_WRAP_T = 0x2803;
var GL_CLAMP_TO_EDGE = 0x812f;
var MAX_CANVAS_WIDTH = 1024;
var DEFAULT_FONT_SIZE = 64;
var DEFAULT_PADDING = 4;
var BASELINE_SCALE = 0.9;
var HEIGHT_SCALE = 1.2;
export var DEFAULT_CHAR_SET = [];

for (var i = 32; i < 128; i++) {
  DEFAULT_CHAR_SET.push(String.fromCharCode(i));
}

function setTextStyle(ctx, fontFamily, fontSize) {
  ctx.font = "".concat(fontSize, "px ").concat(fontFamily);
  ctx.fillStyle = '#000';
  ctx.textBaseline = 'baseline';
  ctx.textAlign = 'left';
}

export function makeFontAtlas(gl, _ref) {
  var _parameters;

  var fontFamily = _ref.fontFamily,
      _ref$characterSet = _ref.characterSet,
      characterSet = _ref$characterSet === void 0 ? DEFAULT_CHAR_SET : _ref$characterSet,
      _ref$fontSize = _ref.fontSize,
      fontSize = _ref$fontSize === void 0 ? DEFAULT_FONT_SIZE : _ref$fontSize,
      _ref$padding = _ref.padding,
      padding = _ref$padding === void 0 ? DEFAULT_PADDING : _ref$padding;
  var canvas = document.createElement('canvas');
  var ctx = canvas.getContext('2d'); // measure texts

  var row = 0;
  var x = 0; // TODO - use Advanced text metrics when they are adopted:
  // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics

  var fontHeight = fontSize * HEIGHT_SCALE;
  setTextStyle(ctx, fontFamily, fontSize);
  var mapping = {};
  Array.from(characterSet).forEach(function (char) {
    var _ctx$measureText = ctx.measureText(char),
        width = _ctx$measureText.width;

    if (x + width > MAX_CANVAS_WIDTH) {
      x = 0;
      row++;
    }

    mapping[char] = {
      x: x,
      y: row * (fontHeight + padding),
      width: width,
      height: fontHeight,
      mask: true
    };
    x += width + padding;
  });
  canvas.width = MAX_CANVAS_WIDTH;
  canvas.height = (row + 1) * (fontHeight + padding);
  setTextStyle(ctx, fontFamily, fontSize);

  for (var char in mapping) {
    ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);
  }

  return {
    scale: HEIGHT_SCALE,
    mapping: mapping,
    texture: new Texture2D(gl, {
      pixels: canvas,
      // padding is added only between the characters but not for borders
      // enforce CLAMP_TO_EDGE to avoid any artifacts.
      parameters: (_parameters = {}, _defineProperty(_parameters, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE), _defineProperty(_parameters, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE), _parameters)
    })
  };
}
//# sourceMappingURL=font-atlas.js.map