"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = extractJSXLayers;

var _react = _interopRequireWildcard(require("react"));

var _inheritsFrom = require("./inherits-from");

var _core = require("@deck.gl/core");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

// recursively wrap render callbacks in `View`
function wrapInView(node) {
  if (!node) {
    return node;
  }

  if (typeof node === 'function') {
    // React.Children does not traverse functions.
    // All render callbacks must be protected under a <View>
    return (0, _react.createElement)(_core.View, {}, node);
  }

  if (Array.isArray(node)) {
    return node.map(wrapInView);
  }

  if ((0, _inheritsFrom.inheritsFrom)(node.type, _core.View)) {
    return node;
  }

  return node;
} // extracts any deck.gl layers masquerading as react elements from props.children


function extractJSXLayers(_ref) {
  var children = _ref.children,
      layers = _ref.layers,
      views = _ref.views;
  var reactChildren = []; // extract real react elements (i.e. not deck.gl layers)

  var jsxLayers = []; // extracted layer from react children, will add to deck.gl layer array

  var jsxViews = {}; // React.children

  _react.default.Children.forEach(wrapInView(children), function (reactElement) {
    if (reactElement) {
      // For some reason Children.forEach doesn't filter out `null`s
      var ElementType = reactElement.type;

      if ((0, _inheritsFrom.inheritsFrom)(ElementType, _core.Layer)) {
        var layer = new ElementType(reactElement.props);
        jsxLayers.push(layer);
      } else {
        reactChildren.push(reactElement);
      } // empty id => default view


      if (ElementType !== _core.View && (0, _inheritsFrom.inheritsFrom)(ElementType, _core.View) && reactElement.props.id) {
        var view = new ElementType(reactElement.props);
        jsxViews[view.id] = view;
      }
    }
  }); // Avoid modifying views if no JSX views were found


  if (Object.keys(jsxViews).length > 0) {
    // If a view is specified in both views prop and JSX, use the one in views
    if (Array.isArray(views)) {
      views.forEach(function (view) {
        jsxViews[view.id] = view;
      });
    } else if (views) {
      jsxViews[views.id] = views;
    }

    views = Object.values(jsxViews);
  } // Avoid modifying layers array if no JSX layers were found


  layers = jsxLayers.length > 0 ? jsxLayers.concat(_toConsumableArray(layers)) : layers;
  return {
    layers: layers,
    children: reactChildren,
    views: views
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9leHRyYWN0LWpzeC1sYXllcnMuanMiXSwibmFtZXMiOlsid3JhcEluVmlldyIsIm5vZGUiLCJWaWV3IiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwidHlwZSIsImV4dHJhY3RKU1hMYXllcnMiLCJjaGlsZHJlbiIsImxheWVycyIsInZpZXdzIiwicmVhY3RDaGlsZHJlbiIsImpzeExheWVycyIsImpzeFZpZXdzIiwiUmVhY3QiLCJDaGlsZHJlbiIsImZvckVhY2giLCJyZWFjdEVsZW1lbnQiLCJFbGVtZW50VHlwZSIsIkxheWVyIiwibGF5ZXIiLCJwcm9wcyIsInB1c2giLCJpZCIsInZpZXciLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwidmFsdWVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7OztBQUVBO0FBQ0EsU0FBU0EsVUFBVCxDQUFvQkMsSUFBcEIsRUFBMEI7QUFDeEIsTUFBSSxDQUFDQSxJQUFMLEVBQVc7QUFDVCxXQUFPQSxJQUFQO0FBQ0Q7O0FBQ0QsTUFBSSxPQUFPQSxJQUFQLEtBQWdCLFVBQXBCLEVBQWdDO0FBQzlCO0FBQ0E7QUFDQSxXQUFPLDBCQUFjQyxVQUFkLEVBQW9CLEVBQXBCLEVBQXdCRCxJQUF4QixDQUFQO0FBQ0Q7O0FBQ0QsTUFBSUUsS0FBSyxDQUFDQyxPQUFOLENBQWNILElBQWQsQ0FBSixFQUF5QjtBQUN2QixXQUFPQSxJQUFJLENBQUNJLEdBQUwsQ0FBU0wsVUFBVCxDQUFQO0FBQ0Q7O0FBQ0QsTUFBSSxnQ0FBYUMsSUFBSSxDQUFDSyxJQUFsQixFQUF3QkosVUFBeEIsQ0FBSixFQUFtQztBQUNqQyxXQUFPRCxJQUFQO0FBQ0Q7O0FBQ0QsU0FBT0EsSUFBUDtBQUNELEMsQ0FFRDs7O0FBQ2UsU0FBU00sZ0JBQVQsT0FBcUQ7QUFBQSxNQUExQkMsUUFBMEIsUUFBMUJBLFFBQTBCO0FBQUEsTUFBaEJDLE1BQWdCLFFBQWhCQSxNQUFnQjtBQUFBLE1BQVJDLEtBQVEsUUFBUkEsS0FBUTtBQUNsRSxNQUFNQyxhQUFhLEdBQUcsRUFBdEIsQ0FEa0UsQ0FDeEM7O0FBQzFCLE1BQU1DLFNBQVMsR0FBRyxFQUFsQixDQUZrRSxDQUU1Qzs7QUFDdEIsTUFBTUMsUUFBUSxHQUFHLEVBQWpCLENBSGtFLENBS2xFOztBQUNBQyxpQkFBTUMsUUFBTixDQUFlQyxPQUFmLENBQXVCaEIsVUFBVSxDQUFDUSxRQUFELENBQWpDLEVBQTZDLFVBQUFTLFlBQVksRUFBSTtBQUMzRCxRQUFJQSxZQUFKLEVBQWtCO0FBQ2hCO0FBQ0EsVUFBTUMsV0FBVyxHQUFHRCxZQUFZLENBQUNYLElBQWpDOztBQUNBLFVBQUksZ0NBQWFZLFdBQWIsRUFBMEJDLFdBQTFCLENBQUosRUFBc0M7QUFDcEMsWUFBTUMsS0FBSyxHQUFHLElBQUlGLFdBQUosQ0FBZ0JELFlBQVksQ0FBQ0ksS0FBN0IsQ0FBZDtBQUNBVCxRQUFBQSxTQUFTLENBQUNVLElBQVYsQ0FBZUYsS0FBZjtBQUNELE9BSEQsTUFHTztBQUNMVCxRQUFBQSxhQUFhLENBQUNXLElBQWQsQ0FBbUJMLFlBQW5CO0FBQ0QsT0FSZSxDQVVoQjs7O0FBQ0EsVUFBSUMsV0FBVyxLQUFLaEIsVUFBaEIsSUFBd0IsZ0NBQWFnQixXQUFiLEVBQTBCaEIsVUFBMUIsQ0FBeEIsSUFBMkRlLFlBQVksQ0FBQ0ksS0FBYixDQUFtQkUsRUFBbEYsRUFBc0Y7QUFDcEYsWUFBTUMsSUFBSSxHQUFHLElBQUlOLFdBQUosQ0FBZ0JELFlBQVksQ0FBQ0ksS0FBN0IsQ0FBYjtBQUNBUixRQUFBQSxRQUFRLENBQUNXLElBQUksQ0FBQ0QsRUFBTixDQUFSLEdBQW9CQyxJQUFwQjtBQUNEO0FBQ0Y7QUFDRixHQWpCRCxFQU5rRSxDQXlCbEU7OztBQUNBLE1BQUlDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZYixRQUFaLEVBQXNCYyxNQUF0QixHQUErQixDQUFuQyxFQUFzQztBQUNwQztBQUNBLFFBQUl4QixLQUFLLENBQUNDLE9BQU4sQ0FBY00sS0FBZCxDQUFKLEVBQTBCO0FBQ3hCQSxNQUFBQSxLQUFLLENBQUNNLE9BQU4sQ0FBYyxVQUFBUSxJQUFJLEVBQUk7QUFDcEJYLFFBQUFBLFFBQVEsQ0FBQ1csSUFBSSxDQUFDRCxFQUFOLENBQVIsR0FBb0JDLElBQXBCO0FBQ0QsT0FGRDtBQUdELEtBSkQsTUFJTyxJQUFJZCxLQUFKLEVBQVc7QUFDaEJHLE1BQUFBLFFBQVEsQ0FBQ0gsS0FBSyxDQUFDYSxFQUFQLENBQVIsR0FBcUJiLEtBQXJCO0FBQ0Q7O0FBQ0RBLElBQUFBLEtBQUssR0FBR2UsTUFBTSxDQUFDRyxNQUFQLENBQWNmLFFBQWQsQ0FBUjtBQUNELEdBcENpRSxDQXNDbEU7OztBQUNBSixFQUFBQSxNQUFNLEdBQUdHLFNBQVMsQ0FBQ2UsTUFBVixHQUFtQixDQUFuQixHQUEyQmYsU0FBM0IsMkJBQXlDSCxNQUF6QyxLQUFtREEsTUFBNUQ7QUFFQSxTQUFPO0FBQUNBLElBQUFBLE1BQU0sRUFBTkEsTUFBRDtBQUFTRCxJQUFBQSxRQUFRLEVBQUVHLGFBQW5CO0FBQWtDRCxJQUFBQSxLQUFLLEVBQUxBO0FBQWxDLEdBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge2NyZWF0ZUVsZW1lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7aW5oZXJpdHNGcm9tfSBmcm9tICcuL2luaGVyaXRzLWZyb20nO1xuaW1wb3J0IHtMYXllciwgVmlld30gZnJvbSAnQGRlY2suZ2wvY29yZSc7XG5cbi8vIHJlY3Vyc2l2ZWx5IHdyYXAgcmVuZGVyIGNhbGxiYWNrcyBpbiBgVmlld2BcbmZ1bmN0aW9uIHdyYXBJblZpZXcobm9kZSkge1xuICBpZiAoIW5vZGUpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICBpZiAodHlwZW9mIG5vZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBSZWFjdC5DaGlsZHJlbiBkb2VzIG5vdCB0cmF2ZXJzZSBmdW5jdGlvbnMuXG4gICAgLy8gQWxsIHJlbmRlciBjYWxsYmFja3MgbXVzdCBiZSBwcm90ZWN0ZWQgdW5kZXIgYSA8Vmlldz5cbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChWaWV3LCB7fSwgbm9kZSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZS5tYXAod3JhcEluVmlldyk7XG4gIH1cbiAgaWYgKGluaGVyaXRzRnJvbShub2RlLnR5cGUsIFZpZXcpKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8vIGV4dHJhY3RzIGFueSBkZWNrLmdsIGxheWVycyBtYXNxdWVyYWRpbmcgYXMgcmVhY3QgZWxlbWVudHMgZnJvbSBwcm9wcy5jaGlsZHJlblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0cmFjdEpTWExheWVycyh7Y2hpbGRyZW4sIGxheWVycywgdmlld3N9KSB7XG4gIGNvbnN0IHJlYWN0Q2hpbGRyZW4gPSBbXTsgLy8gZXh0cmFjdCByZWFsIHJlYWN0IGVsZW1lbnRzIChpLmUuIG5vdCBkZWNrLmdsIGxheWVycylcbiAgY29uc3QganN4TGF5ZXJzID0gW107IC8vIGV4dHJhY3RlZCBsYXllciBmcm9tIHJlYWN0IGNoaWxkcmVuLCB3aWxsIGFkZCB0byBkZWNrLmdsIGxheWVyIGFycmF5XG4gIGNvbnN0IGpzeFZpZXdzID0ge307XG5cbiAgLy8gUmVhY3QuY2hpbGRyZW5cbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCh3cmFwSW5WaWV3KGNoaWxkcmVuKSwgcmVhY3RFbGVtZW50ID0+IHtcbiAgICBpZiAocmVhY3RFbGVtZW50KSB7XG4gICAgICAvLyBGb3Igc29tZSByZWFzb24gQ2hpbGRyZW4uZm9yRWFjaCBkb2Vzbid0IGZpbHRlciBvdXQgYG51bGxgc1xuICAgICAgY29uc3QgRWxlbWVudFR5cGUgPSByZWFjdEVsZW1lbnQudHlwZTtcbiAgICAgIGlmIChpbmhlcml0c0Zyb20oRWxlbWVudFR5cGUsIExheWVyKSkge1xuICAgICAgICBjb25zdCBsYXllciA9IG5ldyBFbGVtZW50VHlwZShyZWFjdEVsZW1lbnQucHJvcHMpO1xuICAgICAgICBqc3hMYXllcnMucHVzaChsYXllcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWFjdENoaWxkcmVuLnB1c2gocmVhY3RFbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gZW1wdHkgaWQgPT4gZGVmYXVsdCB2aWV3XG4gICAgICBpZiAoRWxlbWVudFR5cGUgIT09IFZpZXcgJiYgaW5oZXJpdHNGcm9tKEVsZW1lbnRUeXBlLCBWaWV3KSAmJiByZWFjdEVsZW1lbnQucHJvcHMuaWQpIHtcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBFbGVtZW50VHlwZShyZWFjdEVsZW1lbnQucHJvcHMpO1xuICAgICAgICBqc3hWaWV3c1t2aWV3LmlkXSA9IHZpZXc7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyBBdm9pZCBtb2RpZnlpbmcgdmlld3MgaWYgbm8gSlNYIHZpZXdzIHdlcmUgZm91bmRcbiAgaWYgKE9iamVjdC5rZXlzKGpzeFZpZXdzKS5sZW5ndGggPiAwKSB7XG4gICAgLy8gSWYgYSB2aWV3IGlzIHNwZWNpZmllZCBpbiBib3RoIHZpZXdzIHByb3AgYW5kIEpTWCwgdXNlIHRoZSBvbmUgaW4gdmlld3NcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2aWV3cykpIHtcbiAgICAgIHZpZXdzLmZvckVhY2godmlldyA9PiB7XG4gICAgICAgIGpzeFZpZXdzW3ZpZXcuaWRdID0gdmlldztcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodmlld3MpIHtcbiAgICAgIGpzeFZpZXdzW3ZpZXdzLmlkXSA9IHZpZXdzO1xuICAgIH1cbiAgICB2aWV3cyA9IE9iamVjdC52YWx1ZXMoanN4Vmlld3MpO1xuICB9XG5cbiAgLy8gQXZvaWQgbW9kaWZ5aW5nIGxheWVycyBhcnJheSBpZiBubyBKU1ggbGF5ZXJzIHdlcmUgZm91bmRcbiAgbGF5ZXJzID0ganN4TGF5ZXJzLmxlbmd0aCA+IDAgPyBbLi4uanN4TGF5ZXJzLCAuLi5sYXllcnNdIDogbGF5ZXJzO1xuXG4gIHJldHVybiB7bGF5ZXJzLCBjaGlsZHJlbjogcmVhY3RDaGlsZHJlbiwgdmlld3N9O1xufVxuIl19