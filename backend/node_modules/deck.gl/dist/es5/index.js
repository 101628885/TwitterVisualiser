"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "COORDINATE_SYSTEM", {
  enumerable: true,
  get: function get() {
    return _core.COORDINATE_SYSTEM;
  }
});
Object.defineProperty(exports, "Deck", {
  enumerable: true,
  get: function get() {
    return _core.Deck;
  }
});
Object.defineProperty(exports, "Layer", {
  enumerable: true,
  get: function get() {
    return _core.Layer;
  }
});
Object.defineProperty(exports, "CompositeLayer", {
  enumerable: true,
  get: function get() {
    return _core.CompositeLayer;
  }
});
Object.defineProperty(exports, "View", {
  enumerable: true,
  get: function get() {
    return _core.View;
  }
});
Object.defineProperty(exports, "MapView", {
  enumerable: true,
  get: function get() {
    return _core.MapView;
  }
});
Object.defineProperty(exports, "FirstPersonView", {
  enumerable: true,
  get: function get() {
    return _core.FirstPersonView;
  }
});
Object.defineProperty(exports, "ThirdPersonView", {
  enumerable: true,
  get: function get() {
    return _core.ThirdPersonView;
  }
});
Object.defineProperty(exports, "OrbitView", {
  enumerable: true,
  get: function get() {
    return _core.OrbitView;
  }
});
Object.defineProperty(exports, "PerspectiveView", {
  enumerable: true,
  get: function get() {
    return _core.PerspectiveView;
  }
});
Object.defineProperty(exports, "OrthographicView", {
  enumerable: true,
  get: function get() {
    return _core.OrthographicView;
  }
});
Object.defineProperty(exports, "Viewport", {
  enumerable: true,
  get: function get() {
    return _core.Viewport;
  }
});
Object.defineProperty(exports, "WebMercatorViewport", {
  enumerable: true,
  get: function get() {
    return _core.WebMercatorViewport;
  }
});
Object.defineProperty(exports, "Controller", {
  enumerable: true,
  get: function get() {
    return _core.Controller;
  }
});
Object.defineProperty(exports, "MapController", {
  enumerable: true,
  get: function get() {
    return _core.MapController;
  }
});
Object.defineProperty(exports, "AttributeManager", {
  enumerable: true,
  get: function get() {
    return _core.AttributeManager;
  }
});
Object.defineProperty(exports, "project", {
  enumerable: true,
  get: function get() {
    return _core.project;
  }
});
Object.defineProperty(exports, "project64", {
  enumerable: true,
  get: function get() {
    return _core.project64;
  }
});
Object.defineProperty(exports, "lighting", {
  enumerable: true,
  get: function get() {
    return _core.lighting;
  }
});
Object.defineProperty(exports, "LayerManager", {
  enumerable: true,
  get: function get() {
    return _core.LayerManager;
  }
});
Object.defineProperty(exports, "log", {
  enumerable: true,
  get: function get() {
    return _core.log;
  }
});
Object.defineProperty(exports, "_OrbitController", {
  enumerable: true,
  get: function get() {
    return _core._OrbitController;
  }
});
Object.defineProperty(exports, "_FirstPersonController", {
  enumerable: true,
  get: function get() {
    return _core._FirstPersonController;
  }
});
Object.defineProperty(exports, "TRANSITION_EVENTS", {
  enumerable: true,
  get: function get() {
    return _core.TRANSITION_EVENTS;
  }
});
Object.defineProperty(exports, "LinearInterpolator", {
  enumerable: true,
  get: function get() {
    return _core.LinearInterpolator;
  }
});
Object.defineProperty(exports, "FlyToInterpolator", {
  enumerable: true,
  get: function get() {
    return _core.FlyToInterpolator;
  }
});
Object.defineProperty(exports, "_EffectManager", {
  enumerable: true,
  get: function get() {
    return _core._EffectManager;
  }
});
Object.defineProperty(exports, "_Effect", {
  enumerable: true,
  get: function get() {
    return _core._Effect;
  }
});
Object.defineProperty(exports, "_ReflectionEffect", {
  enumerable: true,
  get: function get() {
    return _core._ReflectionEffect;
  }
});
Object.defineProperty(exports, "ArcLayer", {
  enumerable: true,
  get: function get() {
    return _layers.ArcLayer;
  }
});
Object.defineProperty(exports, "IconLayer", {
  enumerable: true,
  get: function get() {
    return _layers.IconLayer;
  }
});
Object.defineProperty(exports, "LineLayer", {
  enumerable: true,
  get: function get() {
    return _layers.LineLayer;
  }
});
Object.defineProperty(exports, "PointCloudLayer", {
  enumerable: true,
  get: function get() {
    return _layers.PointCloudLayer;
  }
});
Object.defineProperty(exports, "ScatterplotLayer", {
  enumerable: true,
  get: function get() {
    return _layers.ScatterplotLayer;
  }
});
Object.defineProperty(exports, "ScreenGridLayer", {
  enumerable: true,
  get: function get() {
    return _layers.ScreenGridLayer;
  }
});
Object.defineProperty(exports, "GridLayer", {
  enumerable: true,
  get: function get() {
    return _layers.GridLayer;
  }
});
Object.defineProperty(exports, "GridCellLayer", {
  enumerable: true,
  get: function get() {
    return _layers.GridCellLayer;
  }
});
Object.defineProperty(exports, "HexagonLayer", {
  enumerable: true,
  get: function get() {
    return _layers.HexagonLayer;
  }
});
Object.defineProperty(exports, "HexagonCellLayer", {
  enumerable: true,
  get: function get() {
    return _layers.HexagonCellLayer;
  }
});
Object.defineProperty(exports, "PathLayer", {
  enumerable: true,
  get: function get() {
    return _layers.PathLayer;
  }
});
Object.defineProperty(exports, "PolygonLayer", {
  enumerable: true,
  get: function get() {
    return _layers.PolygonLayer;
  }
});
Object.defineProperty(exports, "GeoJsonLayer", {
  enumerable: true,
  get: function get() {
    return _layers.GeoJsonLayer;
  }
});
Object.defineProperty(exports, "TextLayer", {
  enumerable: true,
  get: function get() {
    return _layers.TextLayer;
  }
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _react.default;
  }
});
Object.defineProperty(exports, "DeckGL", {
  enumerable: true,
  get: function get() {
    return _react.DeckGL;
  }
});
exports.experimental = void 0;

var _core = require("@deck.gl/core");

var _layers = require("@deck.gl/layers");

var _react = _interopRequireWildcard(require("@deck.gl/react"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/* eslint-disable max-len */
var experimental = {}; //
// CORE LIBRARY
//

exports.experimental = experimental;
// Experimental Data Accessor Helpers
// INTERNAL - TODO remove from experimental exports
var BinSorter = _core.experimental.BinSorter,
    linearScale = _core.experimental.linearScale,
    getLinearScale = _core.experimental.getLinearScale,
    quantizeScale = _core.experimental.quantizeScale,
    getQuantizeScale = _core.experimental.getQuantizeScale,
    defaultColorRange = _core.experimental.defaultColorRange,
    flattenVertices = _core.experimental.flattenVertices,
    fillArray = _core.experimental.fillArray;
Object.assign(experimental, {
  // For layers
  BinSorter: BinSorter,
  linearScale: linearScale,
  getLinearScale: getLinearScale,
  quantizeScale: quantizeScale,
  getQuantizeScale: getQuantizeScale,
  defaultColorRange: defaultColorRange,
  flattenVertices: flattenVertices,
  fillArray: fillArray
}); //
// CORE LAYERS PACKAGE
//
//# sourceMappingURL=index.js.map