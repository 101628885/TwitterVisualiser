{"version":3,"sources":["../../../src/core/animation-loop-proxy.js"],"names":["AnimationLoopProxy","opts","self","animationLoop","AnimationLoop","Object","assign","offScreen","useDevicePixels","autoResizeDrawingBuffer","canvas","addEventListener","evt","data","command","start","stop","width","height","worker","onInitialize","onFinalize","props","_stopped","_animationFrameId","_startPromise","_updateFrame","bind","then","_createAndTransferCanvas","postMessage","_resizeCanvasDrawingBuffer","screenCanvas","transferControlToOffscreen","onError","offscreenCanvas","devicePixelRatio","window","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["/* global window */\nimport AnimationLoop from './animation-loop';\nimport {getPageLoadPromise, createCanvas} from '../webgl-context';\nimport {requestAnimationFrame, cancelAnimationFrame} from '../webgl-utils';\n\nexport default class AnimationLoopProxy {\n\n  // Create the script for the rendering worker.\n  // @param opts {object} - options to construct an AnimationLoop instance\n  static createWorker(opts) {\n    return self => {\n\n      self.animationLoop = new AnimationLoop(Object.assign({}, opts, {\n        offScreen: true,\n        // Prevent the animation loop from trying to access DOM properties\n        useDevicePixels: false,\n        autoResizeDrawingBuffer: false\n      }));\n      self.canvas = null;\n\n      self.addEventListener('message', evt => {\n        const {animationLoop} = self;\n\n        switch (evt.data.command) {\n\n        case 'start':\n          self.canvas = evt.data.opts.canvas;\n          animationLoop.start(evt.data.opts);\n          break;\n\n        case 'stop':\n          animationLoop.stop();\n          break;\n\n        case 'resize':\n          self.canvas.width = evt.data.width;\n          self.canvas.height = evt.data.height;\n          break;\n\n        default:\n        }\n\n      });\n\n    };\n  }\n\n  /*\n   * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context\n   */\n  constructor({\n    worker,\n    onInitialize = () => {},\n    onFinalize = () => {},\n    useDevicePixels = true,\n    autoResizeDrawingBuffer = true\n  }) {\n    this.props = {\n      worker,\n      onInitialize,\n      onFinalize,\n      autoResizeDrawingBuffer,\n      useDevicePixels\n    };\n\n    // state\n    this.canvas = null;\n    this.width = null;\n    this.height = null;\n\n    this._stopped = true;\n    this._animationFrameId = null;\n    this._startPromise = null;\n\n    // bind methods\n    this._updateFrame = this._updateFrame.bind(this);\n  }\n\n  /* Public methods */\n\n  // Starts a render loop if not already running\n  start(opts = {}) {\n    this._stopped = false;\n    // console.debug(`Starting ${this.constructor.name}`);\n    if (!this._animationFrameId) {\n      // Wait for start promise before rendering frame\n      this._startPromise = getPageLoadPromise()\n      .then(() => {\n        this._createAndTransferCanvas(opts);\n        return this.props.onInitialize(this);\n      })\n      .then(() => {\n        if (!this._stopped) {\n          this._animationFrameId = requestAnimationFrame(this._updateFrame);\n        }\n      });\n    }\n    return this;\n  }\n\n  // Stops a render loop if already running, finalizing\n  stop() {\n    if (this._animationFrameId) {\n      cancelAnimationFrame(this._animationFrameId);\n      this._animationFrameId = null;\n      this._stopped = true;\n      this.props.onFinalize(this);\n    }\n    this.props.worker.postMessage({command: 'stop'});\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _updateFrame() {\n    this._resizeCanvasDrawingBuffer();\n    this._animationFrameId = requestAnimationFrame(this._updateFrame);\n  }\n\n  _createAndTransferCanvas(opts) {\n    // Create a canvas on the main thread\n    const screenCanvas = createCanvas(opts);\n\n    // Create an offscreen canvas controlling the main canvas\n    if (!screenCanvas.transferControlToOffscreen) {\n      onError('OffscreenCanvas is not available. Enable Experimental canvas features in chrome://flags'); // eslint-disable-line\n    }\n    const offscreenCanvas = screenCanvas.transferControlToOffscreen();\n\n    // Transfer the offscreen canvas to the worker\n    this.props.worker.postMessage({\n      command: 'start',\n      opts: Object.assign({}, opts, {canvas: offscreenCanvas})\n    }, [offscreenCanvas]);\n\n    // store the main canvas on the local thread\n    this.canvas = screenCanvas;\n  }\n\n  _resizeCanvasDrawingBuffer() {\n    if (this.props.autoResizeDrawingBuffer) {\n      const devicePixelRatio = this.props.useDevicePixels ? (window.devicePixelRatio || 1) : 1;\n      const width = this.canvas.clientWidth * devicePixelRatio;\n      const height = this.canvas.clientHeight * devicePixelRatio;\n\n      if (this.width !== width || this.height !== height) {\n        this.width = width;\n        this.height = height;\n        this.props.worker.postMessage({\n          command: 'resize',\n          width,\n          height\n        });\n      }\n    }\n  }\n}\n"],"file":"animation-loop-proxy.js"}