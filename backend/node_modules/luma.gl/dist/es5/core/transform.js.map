{"version":3,"sources":["../../../src/core/transform.js"],"names":["FS100","FS300","Transform","gl","props","model","currentIndex","sourceBuffers","Array","feedbackBuffers","transformFeedbacks","_buffersCreated","_initialize","Object","seal","name","delete","varyingName","uniforms","unbindModels","setAttributes","transform","transformFeedback","parameters","feedbackMap","elementCount","log","warn","setVertexCount","bufferName","Buffer","assign","_createFeedbackBuffers","setBuffers","_setupSwapBuffers","destinationBuffers","sourceDestinationMap","deprecated","vs","varyings","isArray","varyingsArray","values","_setupBuffers","_buildModel","id","drawMode","current","sourceBufferName","feedbackBufferName","sourceBuffer","bytes","type","usage","accessor","buffer","next","fs","Model","vertexCount","TransformFeedback","program","buffers","getVertexCount"],"mappings":"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","sourcesContent":["import GL from '../constants';\nimport Model from './model';\nimport Buffer from '../webgl/buffer';\nimport TransformFeedback from '../webgl/transform-feedback';\nimport {isWebGL2, assertWebGL2Context, getShaderVersion} from '../webgl-utils';\nimport assert from '../utils/assert';\nimport {log} from '../utils';\n\nconst FS100 = 'void main() {}';\nconst FS300 = `#version 300 es\\n${FS100}`;\n\nexport default class Transform {\n\n  static isSupported(gl) {\n    // For now WebGL2 only\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGL2Context(gl);\n\n    this.gl = gl;\n    this.model = null;\n    this.currentIndex = 0;\n    this.sourceBuffers = new Array(2);\n    this.feedbackBuffers = new Array(2);\n    this.transformFeedbacks = new Array(2);\n    this._buffersCreated = {};\n\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  // Delete owned resources.\n  delete() {\n    for (const name in this._buffersCreated) {\n      this._buffersCreated[name].delete();\n    }\n    this.model.delete();\n  }\n\n  get elementCount() {\n    return this.model.getVertexCount();\n  }\n\n  // Return Buffer object for given varying name.\n  getBuffer(varyingName = null) {\n    assert(varyingName && this.feedbackBuffers[this.currentIndex][varyingName]);\n    return this.feedbackBuffers[this.currentIndex][varyingName];\n  }\n\n  // Run one transform feedback loop.\n  run({uniforms = {}, unbindModels = []} = {}) {\n    this.model.setAttributes(this.sourceBuffers[this.currentIndex]);\n    this.model.transform({\n      transformFeedback: this.transformFeedbacks[this.currentIndex],\n      parameters: {[GL.RASTERIZER_DISCARD]: true},\n      uniforms,\n      unbindModels\n    });\n  }\n\n  // Swap source and destination buffers.\n  swapBuffers() {\n    assert(this.feedbackMap);\n    this.currentIndex = (this.currentIndex + 1) % 2;\n  }\n\n  // Update some or all buffer bindings.\n  update({sourceBuffers = null, feedbackBuffers = null, elementCount = this.elementCount}) {\n    if (!sourceBuffers && !feedbackBuffers) {\n      log.warn('Transform : no buffers updated')();\n      return this;\n    }\n\n    this.model.setVertexCount(elementCount);\n\n    for (const bufferName in feedbackBuffers) {\n      assert(feedbackBuffers[bufferName] instanceof Buffer);\n    }\n\n    const {currentIndex} = this;\n    Object.assign(this.sourceBuffers[currentIndex], sourceBuffers);\n    Object.assign(this.feedbackBuffers[currentIndex], feedbackBuffers);\n    this._createFeedbackBuffers({feedbackBuffers});\n    this.transformFeedbacks[currentIndex].setBuffers(this.feedbackBuffers[currentIndex]);\n\n    // Buffers have changed, need to re-setup swap buffers.\n    this._setupSwapBuffers();\n    return this;\n  }\n\n  // Private\n\n  /* eslint-disable complexity */\n  _initialize(props = {}) {\n    let {feedbackBuffers, feedbackMap} = props;\n    const {destinationBuffers, sourceDestinationMap} = props;\n    if (destinationBuffers) {\n      log.deprecated('destinationBuffers', 'feedbackBuffers')();\n      feedbackBuffers = feedbackBuffers || destinationBuffers;\n    }\n    if (sourceDestinationMap) {\n      log.deprecated('sourceDestinationMap', 'feedbackMap')();\n      feedbackMap = feedbackMap || sourceDestinationMap;\n    }\n\n    const {sourceBuffers, vs, elementCount} = props;\n    assert(sourceBuffers && vs && elementCount >= 0);\n    // If feedbackBuffers are not provided, sourceDestinationMap must be provided\n    // to create destinaitonBuffers with layout of corresponding source buffer.\n    assert(feedbackBuffers || feedbackMap, ' Transform needs feedbackBuffers or feedbackMap');\n    for (const bufferName in feedbackBuffers || {}) {\n      assert(feedbackBuffers[bufferName] instanceof Buffer);\n    }\n\n    const {varyings} = props;\n    // If varyings are not provided feedbackMap must be provided to deduce varyings\n    assert(Array.isArray(varyings) || feedbackMap);\n    let varyingsArray = varyings;\n    if (!Array.isArray(varyings)) {\n      varyingsArray = Object.values(feedbackMap);\n    }\n\n    this.feedbackMap = feedbackMap;\n\n    this._setupBuffers({sourceBuffers, feedbackBuffers});\n    this._setupSwapBuffers();\n    this._buildModel(Object.assign({}, props, {\n      id: props.id || 'transform-model',\n      drawMode: props.drawMode || GL.POINTS,\n      varyings: varyingsArray\n    }));\n  }\n  /* eslint-enable complexity */\n\n  // setup source and destination buffers\n  _setupBuffers({sourceBuffers = null, feedbackBuffers = null}) {\n    this.sourceBuffers[0] = Object.assign({}, sourceBuffers);\n    this.feedbackBuffers[0] = Object.assign({}, feedbackBuffers);\n    this._createFeedbackBuffers({feedbackBuffers});\n    this.sourceBuffers[1] = {};\n    this.feedbackBuffers[1] = {};\n  }\n\n  // auto create any feedback buffers\n  _createFeedbackBuffers({feedbackBuffers}) {\n    if (!this.feedbackMap) {\n      // feedbackMap required to auto create buffers.\n      return;\n    }\n    const current = this.currentIndex;\n    for (const sourceBufferName in this.feedbackMap) {\n      const feedbackBufferName = this.feedbackMap[sourceBufferName];\n      if (!feedbackBuffers || !feedbackBuffers[feedbackBufferName]) {\n        // Create new buffer with same layout and settings as source buffer\n        const sourceBuffer = this.sourceBuffers[current][sourceBufferName];\n        const {bytes, type, usage, accessor} = sourceBuffer;\n        const buffer = new Buffer(this.gl, {bytes, type, usage, accessor});\n\n        if (this._buffersCreated[feedbackBufferName]) {\n          this._buffersCreated[feedbackBufferName].delete();\n          this._buffersCreated[feedbackBufferName] = buffer;\n        }\n        this.feedbackBuffers[current][feedbackBufferName] = buffer;\n      }\n    }\n  }\n\n  // setup buffers for swapping.\n  // Second set of source and feedback objects are setup to point\n  // to corresponding feedback and source buffers.\n  _setupSwapBuffers() {\n    if (!this.feedbackMap) {\n      // feedbackMap required set up swap buffers.\n      return;\n    }\n    const current = this.currentIndex;\n    const next = (current + 1) % 2;\n\n    for (const sourceBufferName in this.feedbackMap) {\n      const feedbackBufferName = this.feedbackMap[sourceBufferName];\n\n      this.sourceBuffers[next][sourceBufferName] =\n        this.feedbackBuffers[current][feedbackBufferName];\n      this.feedbackBuffers[next][feedbackBufferName] =\n        this.sourceBuffers[current][sourceBufferName];\n\n      // make sure the new destination buffer is a Buffer object\n      assert(this.feedbackBuffers[next][feedbackBufferName] instanceof Buffer);\n    }\n\n    // When triggered by `update()` TranformFeedback objects are already set up,\n    // if so update buffers\n    if (this.transformFeedbacks[next]) {\n      this.transformFeedbacks[next].setBuffers(this.feedbackBuffers[next]);\n    }\n  }\n\n  // build Model and TransformFeedback objects\n  _buildModel(props = {}) {\n    const {vs, elementCount} = props;\n    // use a minimal fragment shader with matching version of vertex shader.\n    const fs = getShaderVersion(vs) === 300 ? FS300 : FS100;\n\n    this.model = new Model(this.gl, Object.assign({}, props, {\n      fs,\n      vertexCount: elementCount\n    }));\n\n    this.transformFeedbacks[0] = new TransformFeedback(this.gl, {\n      program: this.model.program,\n      buffers: this.feedbackBuffers[0]\n    });\n\n    // If buffers are swappable setup second transform feedback object.\n    if (this.feedbackMap) {\n      this.transformFeedbacks[1] = new TransformFeedback(this.gl, {\n        program: this.model.program,\n        buffers: this.feedbackBuffers[1]\n      });\n    }\n  }\n}\n"],"file":"transform.js"}