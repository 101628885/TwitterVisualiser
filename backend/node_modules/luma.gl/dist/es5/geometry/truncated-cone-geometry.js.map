{"version":3,"sources":["../../../src/geometry/truncated-cone-geometry.js"],"names":["INDEX_OFFSETS","x","y","z","TruncatedConeGeometry","opts","bottomRadius","topRadius","height","nradial","nvertical","verticalAxis","topCap","bottomCap","extra","numVertices","slant","Math","atan2","msin","sin","mcos","cos","mpi","PI","cosSlant","sinSlant","start","end","vertsAroundEdge","positions","Float32Array","normals","texCoords","indices","Uint16Array","indexOffset","i3","i2","i","v","ringRadius","j","index","Object","assign","attributes","Geometry"],"mappings":"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","sourcesContent":["import Geometry from './geometry';\n\nconst INDEX_OFFSETS = {\n  x: [2, 0, 1],\n  y: [0, 1, 2],\n  z: [1, 2, 0]\n};\n\nexport default class TruncatedConeGeometry extends Geometry {\n\n  // Primitives inspired by TDL http://code.google.com/p/webglsamples/,\n  // copyright 2011 Google Inc. new BSD License\n  // (http://www.opensource.org/licenses/bsd-license.php).\n  /* eslint-disable max-statements, complexity */\n  constructor(opts = {}) {\n    const {\n      bottomRadius = 0,\n      topRadius = 0,\n      height = 1,\n      nradial = 10,\n      nvertical = 10,\n      verticalAxis = 'y',\n      topCap = false,\n      bottomCap = false\n    } = opts;\n\n    const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n    const numVertices = (nradial + 1) * (nvertical + 1 + extra);\n\n    const slant = Math.atan2(bottomRadius - topRadius, height);\n    const msin = Math.sin;\n    const mcos = Math.cos;\n    const mpi = Math.PI;\n    const cosSlant = mcos(slant);\n    const sinSlant = msin(slant);\n    const start = topCap ? -2 : 0;\n    const end = nvertical + (bottomCap ? 2 : 0);\n    const vertsAroundEdge = nradial + 1;\n\n    const positions = new Float32Array(numVertices * 3);\n    const normals = new Float32Array(numVertices * 3);\n    const texCoords = new Float32Array(numVertices * 2);\n    const indices = new Uint16Array(nradial * (nvertical + extra) * 6);\n    const indexOffset = INDEX_OFFSETS[verticalAxis];\n\n    let i3 = 0;\n    let i2 = 0;\n    for (let i = start; i <= end; i++) {\n      let v = i / nvertical;\n      let y = height * v;\n      let ringRadius;\n\n      if (i < 0) {\n        y = 0;\n        v = 1;\n        ringRadius = bottomRadius;\n      } else if (i > nvertical) {\n        y = height;\n        v = 1;\n        ringRadius = topRadius;\n      } else {\n        ringRadius = bottomRadius +\n          (topRadius - bottomRadius) * (i / nvertical);\n      }\n      if (i === -2 || i === nvertical + 2) {\n        ringRadius = 0;\n        v = 0;\n      }\n      y -= height / 2;\n      for (let j = 0; j < vertsAroundEdge; j++) {\n        const sin = msin(j * mpi * 2 / nradial);\n        const cos = mcos(j * mpi * 2 / nradial);\n\n        positions[i3 + indexOffset[0]] = sin * ringRadius;\n        positions[i3 + indexOffset[1]] = y;\n        positions[i3 + indexOffset[2]] = cos * ringRadius;\n\n        normals[i3 + indexOffset[0]] = (i < 0 || i > nvertical) ? 0 : (sin * cosSlant);\n        normals[i3 + indexOffset[1]] = (i < 0) ? -1 : (i > nvertical ? 1 : sinSlant);\n        normals[i3 + indexOffset[2]] = (i < 0 || i > nvertical) ? 0 : (cos * cosSlant);\n\n        texCoords[i2 + 0] = j / nradial;\n        texCoords[i2 + 1] = v;\n\n        i2 += 2;\n        i3 += 3;\n      }\n    }\n\n    for (let i = 0; i < nvertical + extra; i++) {\n      for (let j = 0; j < nradial; j++) {\n        const index = (i * nradial + j) * 6;\n        indices[index + 0] = vertsAroundEdge * (i + 0) + 0 + j;\n        indices[index + 1] = vertsAroundEdge * (i + 0) + 1 + j;\n        indices[index + 2] = vertsAroundEdge * (i + 1) + 1 + j;\n        indices[index + 3] = vertsAroundEdge * (i + 0) + 0 + j;\n        indices[index + 4] = vertsAroundEdge * (i + 1) + 1 + j;\n        indices[index + 5] = vertsAroundEdge * (i + 1) + 0 + j;\n      }\n    }\n\n    super(Object.assign({}, opts, {\n      attributes: {\n        positions,\n        normals,\n        texCoords,\n        indices\n      }\n    }));\n  }\n}\n"],"file":"truncated-cone-geometry.js"}