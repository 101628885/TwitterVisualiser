{"version":3,"sources":["../../src/init.js"],"names":["VERSION","STARTUP_MESSAGE","global","luma","Error","isBrowser","log","version","stats","globals","modules","nodeIO"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAGA;;;;AAIA,IAAMA,OAAO,GAAG,mBAAuB,WAAvB,aAAmD,qBAAnE;AAEA,IAAMC,eAAe,GAAG,wDAAxB;;AAKA,IAAIC,gBAAOC,IAAP,IAAeD,gBAAOC,IAAP,CAAYH,OAAZ,KAAwBA,OAA3C,EAAoD;AAClD,QAAM,IAAII,KAAJ,iDAAmDF,gBAAOC,IAAP,CAAYH,OAA/D,iBAA6EA,OAA7E,EAAN;AACD;;AAED,IAAI,CAACE,gBAAOC,IAAZ,EAAkB;AAChB,MAAIE,kBAAJ,EAAe;AACbC,iBAAIA,GAAJ,CAAQ,CAAR,oBAAsBN,OAAtB,gBAAmCC,eAAnC;AACD;;AAEDC,kBAAOC,IAAP,GAAcD,gBAAOC,IAAP,IAAe;AAC3BH,IAAAA,OAAO,EAAPA,OAD2B;AAE3BO,IAAAA,OAAO,EAAEP,OAFkB;AAG3BM,IAAAA,GAAG,EAAHA,YAH2B;AAO3BE,IAAAA,KAAK,EAAE,EAPoB;AAc3BC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE,EADF;AAEPC,MAAAA,MAAM,EAAE;AAFD;AAdkB,GAA7B;AAmBD;;eAGcT,gBAAOC,I","sourcesContent":["import isBrowser from './utils/is-browser';\nimport {global} from './utils/globals';\nimport log from './utils/log';\n\n// TODO - when webgl2 gets ubiquitous, remove default support for webgl1 by dropping next line\nimport './webgl1';\n\n// Version detection using babel plugin\n/* global __VERSION__ */\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'untranspiled source';\n\nconst STARTUP_MESSAGE = 'set luma.log.priority=1 (or higher) to trace rendering';\n// Assign luma.log.priority in console to control logging: \\\n// 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs\n// luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;\n\nif (global.luma && global.luma.VERSION !== VERSION) {\n  throw new Error(`luma.gl - multiple VERSIONs detected: ${global.luma.VERSION} vs ${VERSION}`);\n}\n\nif (!global.luma) {\n  if (isBrowser) {\n    log.log(0, `luma.gl ${VERSION} - ${STARTUP_MESSAGE}`)();\n  }\n\n  global.luma = global.luma || {\n    VERSION,\n    version: VERSION,\n    log,\n\n    // A global stats object that various components can add information to\n    // E.g. see webgl/resource.js\n    stats: {},\n\n    // Keep some luma globals in a sub-object\n    // This allows us to dynamically detect if certain modules have been\n    // included (such as IO and headless) and enable related functionality,\n    // without unconditionally requiring and thus bundling big dependencies\n    // into the app.\n    globals: {\n      modules: {},\n      nodeIO: {}\n    }\n  };\n}\n\nexport {global};\nexport default global.luma;\n"],"file":"init.js"}