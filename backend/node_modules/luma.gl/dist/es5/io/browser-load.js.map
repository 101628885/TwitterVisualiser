{"version":3,"sources":["../../../src/io/browser-load.js"],"names":["pathPrefix","setPathPrefix","prefix","loadFile","url","opts","loadImage","Promise","resolve","reject","image","Image","onload","onerror","Error","crossOrigin","src","error"],"mappings":";;;;;;;;;AAAA;;AAEA,IAAIA,UAAU,GAAG,EAAjB;;AAKO,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;AACpCF,EAAAA,UAAU,GAAGE,MAAb;AACD;;AAEM,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6B;AAClC,MAAI,OAAOD,GAAP,KAAe,QAAf,IAA2B,CAACC,IAAhC,EAAsC;AAEpCA,IAAAA,IAAI,GAAGD,GAAP;AACAA,IAAAA,GAAG,GAAGC,IAAI,CAACD,GAAX;AACD;;AACDC,EAAAA,IAAI,CAACD,GAAL,GAAWJ,UAAU,GAAGA,UAAU,GAAGI,GAAhB,GAAsBA,GAA3C;AACA,SAAO,qCAAYC,IAAZ,CAAP;AACD;;AASM,SAASC,SAAT,CAAmBF,GAAnB,EAAwBC,IAAxB,EAA8B;AACnCD,EAAAA,GAAG,GAAGJ,UAAU,GAAGA,UAAU,GAAGI,GAAhB,GAAsBA,GAAtC;AAEA,SAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAI;AACF,UAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;;AACAD,MAAAA,KAAK,CAACE,MAAN,GAAe;AAAA,eAAMJ,OAAO,CAACE,KAAD,CAAb;AAAA,OAAf;;AACAA,MAAAA,KAAK,CAACG,OAAN,GAAgB;AAAA,eAAMJ,MAAM,CAAC,IAAIK,KAAJ,gCAAkCV,GAAlC,OAAD,CAAZ;AAAA,OAAhB;;AACAM,MAAAA,KAAK,CAACK,WAAN,GAAqBV,IAAI,IAAIA,IAAI,CAACU,WAAd,IAA8B,WAAlD;AACAL,MAAAA,KAAK,CAACM,GAAN,GAAYZ,GAAZ;AACD,KAND,CAME,OAAOa,KAAP,EAAc;AACdR,MAAAA,MAAM,CAACQ,KAAD,CAAN;AACD;AACF,GAVM,CAAP;AAWD","sourcesContent":["import {requestFile} from './browser-request-file';\n\nlet pathPrefix = '';\n\n/*\n * Set a relative path prefix\n */\nexport function setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\n\nexport function loadFile(url, opts) {\n  if (typeof url !== 'string' && !opts) {\n    // TODO - warn for deprecated mode\n    opts = url;\n    url = opts.url;\n  }\n  opts.url = pathPrefix ? pathPrefix + url : url;\n  return requestFile(opts);\n}\n\n/* global Image */\n\n/*\n * Loads images asynchronously\n * image.crossOrigin can be set via opts.crossOrigin, default to 'anonymous'\n * returns a promise tracking the load\n */\nexport function loadImage(url, opts) {\n  url = pathPrefix ? pathPrefix + url : url;\n\n  return new Promise((resolve, reject) => {\n    try {\n      const image = new Image();\n      image.onload = () => resolve(image);\n      image.onerror = () => reject(new Error(`Could not load image ${url}.`));\n      image.crossOrigin = (opts && opts.crossOrigin) || 'anonymous';\n      image.src = url;\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n"],"file":"browser-load.js"}