{"version":3,"sources":["../../../src/io/load-files.js"],"names":["noop","loadTexture","gl","url","opts","urls","onProgress","loadImages","Object","assign","then","images","map","img","i","Texture2D","id","data","loadFiles","every","count","Promise","all","promise","file","progress","length","total","loadTextures","params","Array","isArray","parameters","undefined","loadProgram","vs","fs","vsText","fsText","Program","loadModel","parseModel","program","json","parseJSON","attributes","modelOptions","key","value","Uint16Array","Float32Array","Model","geometry","Geometry","JSON","parse","error","Error"],"mappings":"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","sourcesContent":["/* eslint-disable guard-for-in, complexity, no-try-catch */\nimport assert from '../utils/assert';\nimport {loadFile, loadImage} from './browser-load';\nimport {Program, Texture2D} from '../webgl';\nimport {Model} from '../core';\nimport {Geometry} from '../geometry';\n\nfunction noop() {}\n\nexport function loadTexture(gl, url, opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(typeof url === 'string', 'loadTexture: url must be string');\n\n  return loadImages(Object.assign({urls, onProgress}, opts))\n  .then(images => images.map((img, i) => {\n    return new Texture2D(gl, Object.assign({id: urls[i]}, opts, {data: img}));\n  }));\n}\n\n/*\n * Loads (Requests) multiple files asynchronously\n */\nexport function loadFiles(opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(urls.every(url => typeof url === 'string'), 'loadImages: {urls} must be array of strings');\n  let count = 0;\n  return Promise.all(urls.map(\n    url => {\n      const promise = loadFile(Object.assign({url}, opts));\n      promise.then(file => onProgress({\n        progress: ++count / urls.length,\n        count,\n        total: urls.length,\n        url\n      }));\n      return promise;\n    }\n  ));\n}\n\n/*\n * Loads (requests) multiple images asynchronously\n */\nexport function loadImages(opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(urls.every(url => typeof url === 'string'), 'loadImages: {urls} must be array of strings');\n  let count = 0;\n  return Promise.all(urls.map(\n    url => {\n      const promise = loadImage(url, opts);\n      promise.then(file => onProgress({\n        progress: ++count / urls.length,\n        count,\n        total: urls.length,\n        url\n      }));\n      return promise;\n    }\n  ));\n}\n\nexport function loadTextures(gl, opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(urls.every(url => typeof url === 'string'),\n    'loadTextures: {urls} must be array of strings');\n\n  return loadImages(Object.assign({urls, onProgress}, opts))\n  .then(images => images.map((img, i) => {\n    let params = Array.isArray(opts.parameters) ? opts.parameters[i] : opts.parameters;\n    params = params === undefined ? {} : params;\n    return new Texture2D(gl, Object.assign({id: urls[i]}, params, {data: img}));\n  }));\n}\n\nexport function loadProgram(gl, opts = {}) {\n  const {vs, fs, onProgress = noop} = opts;\n  return loadFiles(Object.assign({urls: [vs, fs], onProgress}, opts))\n  .then(\n    ([vsText, fsText]) => new Program(gl, Object.assign({vs: vsText, fs: fsText}, opts))\n  );\n}\n\n// Loads a simple JSON format\nexport function loadModel(gl, opts = {}) {\n  const {url, onProgress = noop} = opts;\n  return loadFiles(Object.assign({urls: [url], onProgress}, opts))\n  .then(([file]) => parseModel(gl, Object.assign({file}, opts)));\n}\n\nexport function parseModel(gl, opts = {}) {\n  const {file, program = new Program(gl)} = opts;\n  const json = typeof file === 'string' ? parseJSON(file) : file;\n  // Remove any attributes so that we can create a geometry\n  // TODO - change format to put these in geometry sub object?\n  const attributes = {};\n  const modelOptions = {};\n  for (const key in json) {\n    const value = json[key];\n    if (Array.isArray(value)) {\n      attributes[key] = key === 'indices' ? new Uint16Array(value) : new Float32Array(value);\n    } else {\n      modelOptions[key] = value;\n    }\n  }\n\n  return new Model(gl, Object.assign(\n    {program, geometry: new Geometry({attributes})},\n    modelOptions,\n    opts\n  ));\n}\n\nfunction parseJSON(file) {\n  try {\n    return JSON.parse(file);\n  } catch (error) {\n    throw new Error(`Failed to parse JSON: ${error}`);\n  }\n}\n"],"file":"load-files.js"}