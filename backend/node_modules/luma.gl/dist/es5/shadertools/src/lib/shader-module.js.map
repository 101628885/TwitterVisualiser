{"version":3,"sources":["../../../../../src/shadertools/src/lib/shader-module.js"],"names":["VERTEX_SHADER","FRAGMENT_SHADER","ShaderModule","name","vs","fs","dependencies","getUniforms","deprecations","vertexShader","fragmentShader","getModuleUniforms","_parseDeprecationDefinitions","type","targetGLSLVersion","moduleSource","toUpperCase","opts","uniforms","shaderSource","log","forEach","def","regex","test","deprecated","old","new","removed","RegExp"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;AAEA,IAAMA,aAAa,GAAG,IAAtB;AACA,IAAMC,eAAe,GAAG,IAAxB;;IAEqBC,Y;AACnB,8BAUG;AAAA,QATDC,IASC,QATDA,IASC;AAAA,QARDC,EAQC,QARDA,EAQC;AAAA,QAPDC,EAOC,QAPDA,EAOC;AAAA,iCANDC,YAMC;AAAA,QANDA,YAMC,kCANc,EAMd;AAAA,gCALDC,WAKC;AAAA,QALDA,WAKC,iCALa;AAAA,aAAO,EAAP;AAAA,KAKb;AAAA,iCAJDC,YAIC;AAAA,QAJDA,YAIC,kCAJc,EAId;AAAA,QAFDC,YAEC,QAFDA,YAEC;AAAA,QADDC,cACC,QADDA,cACC;;AAAA;;AACD,yBAAO,OAAOP,IAAP,KAAgB,QAAvB;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,EAAL,GAAUA,EAAE,IAAIK,YAAhB;AACA,SAAKJ,EAAL,GAAUA,EAAE,IAAIK,cAAhB;AACA,SAAKC,iBAAL,GAAyBJ,WAAzB;AACA,SAAKD,YAAL,GAAoBA,YAApB;AACA,SAAKE,YAAL,GAAoB,KAAKI,4BAAL,CAAkCJ,YAAlC,CAApB;AACD;;;;oCAGeK,I,EAAMC,iB,EAAmB;AACvC,UAAIC,YAAJ;;AACA,cAAQF,IAAR;AACA,aAAKb,aAAL;AACEe,UAAAA,YAAY,GAAG,8BAAgB,KAAKX,EAAL,IAAW,EAA3B,EAA+BU,iBAA/B,EAAkD,IAAlD,CAAf;AACA;;AACF,aAAKb,eAAL;AACEc,UAAAA,YAAY,GAAG,8BAAgB,KAAKV,EAAL,IAAW,EAA3B,EAA+BS,iBAA/B,EAAkD,KAAlD,CAAf;AACA;;AACF;AACE,+BAAO,KAAP;AARF;;AAWA,UAAI,OAAOC,YAAP,KAAwB,QAA5B,EAAsC;AACpC,eAAO,EAAP;AACD;;AAED,sCACa,KAAKZ,IAAL,CAAUa,WAAV,EADb,eAEFD,YAFE,2BAGY,KAAKZ,IAHjB;AAMD;;;gCAEWc,I,EAAMC,Q,EAAU;AAC1B,aAAO,KAAKP,iBAAL,CAAuBM,IAAvB,EAA6BC,QAA7B,CAAP;AACD;;;sCAGiBC,Y,EAAcC,G,EAAK;AACnC,WAAKZ,YAAL,CAAkBa,OAAlB,CAA0B,UAAAC,GAAG,EAAI;AAC/B,YAAIA,GAAG,CAACC,KAAJ,CAAUC,IAAV,CAAeL,YAAf,CAAJ,EAAkC;AAChC,cAAIG,GAAG,CAACG,UAAJ,IAAkBL,GAAtB,EAA2B;AACzBA,YAAAA,GAAG,CAACK,UAAJ,CAAeH,GAAG,CAACI,GAAnB,EAAwBJ,GAAG,CAACK,GAA5B;AACD,WAFD,MAEO,IAAIP,GAAJ,EAAS;AACdA,YAAAA,GAAG,CAACQ,OAAJ,CAAYN,GAAG,CAACI,GAAhB,EAAqBJ,GAAG,CAACK,GAAzB;AACD;AACF;AACF,OARD;AASD;;;mDAE+C;AAAA,UAAnBnB,YAAmB,uEAAJ,EAAI;AAC9CA,MAAAA,YAAY,CAACa,OAAb,CAAqB,UAAAC,GAAG,EAAI;AAC1B,gBAAQA,GAAG,CAACT,IAAZ;AACA,eAAK,UAAL;AACES,YAAAA,GAAG,CAACC,KAAJ,GAAY,IAAIM,MAAJ,cAAiBP,GAAG,CAACI,GAArB,SAAZ;AACA;;AACF;AACEJ,YAAAA,GAAG,CAACC,KAAJ,GAAY,IAAIM,MAAJ,WAAcP,GAAG,CAACT,IAAlB,cAA0BS,GAAG,CAACI,GAA9B,OAAZ;AALF;AAOD,OARD;AAUA,aAAOlB,YAAP;AACD","sourcesContent":["import transpileShader from './transpile-shader';\nimport assert from '../utils/assert';\n\nconst VERTEX_SHADER = 'vs';\nconst FRAGMENT_SHADER = 'fs';\n\nexport default class ShaderModule {\n  constructor({\n    name,\n    vs,\n    fs,\n    dependencies = [],\n    getUniforms = () => ({}),\n    deprecations = [],\n    // DEPRECATED\n    vertexShader,\n    fragmentShader\n  }) {\n    assert(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n  }\n\n  // Extracts the source code chunk for the specified shader type from the named shader module\n  getModuleSource(type, targetGLSLVersion) {\n    let moduleSource;\n    switch (type) {\n    case VERTEX_SHADER:\n      moduleSource = transpileShader(this.vs || '', targetGLSLVersion, true);\n      break;\n    case FRAGMENT_SHADER:\n      moduleSource = transpileShader(this.fs || '', targetGLSLVersion, false);\n      break;\n    default:\n      assert(false);\n    }\n\n    if (typeof moduleSource !== 'string') {\n      return '';\n    }\n\n    return `\\\n#define MODULE_${this.name.toUpperCase()}\n${moduleSource}\\\n// END MODULE_${this.name}\n\n`;\n  }\n\n  getUniforms(opts, uniforms) {\n    return this.getModuleUniforms(opts, uniforms);\n  }\n\n  // Warn about deprecated uniforms or functions\n  checkDeprecations(shaderSource, log) {\n    this.deprecations.forEach(def => {\n      if (def.regex.test(shaderSource)) {\n        if (def.deprecated && log) {\n          log.deprecated(def.old, def.new)();\n        } else if (log) {\n          log.removed(def.old, def.new)();\n        }\n      }\n    });\n  }\n\n  _parseDeprecationDefinitions(deprecations = []) {\n    deprecations.forEach(def => {\n      switch (def.type) {\n      case 'function':\n        def.regex = new RegExp(`\\\\b${def.old}\\\\(`);\n        break;\n      default:\n        def.regex = new RegExp(`${def.type} ${def.old};`);\n      }\n    });\n\n    return deprecations;\n  }\n}\n"],"file":"shader-module.js"}