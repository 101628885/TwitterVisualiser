{"version":3,"sources":["../../../../src/shadertools/test/gpu-test-utils.js"],"names":["glEnumToString","gl","value","p","toString","glErrorShouldBe","glErrors","opt_msg","length","err","getError","ndx","indexOf","errStrs","ii","push","msg","console","error","initializeGL","canvas","viewport","width","height","clearColor","clearDepth","clear","initializeTexTarget","framebuffer","createFramebuffer","bindFramebuffer","tex","createTexture","bindTexture","texParameteri","texImage2D","renderbuffer","createRenderbuffer","bindRenderbuffer","renderbufferStorage","framebufferTexture2D","framebufferRenderbuffer","render","drawArrays","getGPUOutput","buf","Float32Array","readPixels"],"mappings":"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","sourcesContent":["/* eslint-disable max-len, prefer-template, camelcase */\n/* global console */\n/* eslint-disable no-console */\nimport {createGLContext, setParameters} from 'luma.gl';\n\n// Utilities functions that to be moved to a common place for future tests\n\nfunction glEnumToString(gl, value) {\n  // Optimization for the most common enum:\n  if (value === gl.NO_ERROR) {\n    return 'NO_ERROR';\n  }\n  for (const p in gl) {\n    if (gl[p] === value) {\n      return p;\n    }\n  }\n  return '0x' + value.toString(16);\n}\n\nfunction glErrorShouldBe(gl, glErrors, opt_msg) {\n  if (!glErrors.length) {\n    glErrors = [glErrors];\n  }\n  opt_msg = opt_msg || '';\n  const err = gl.getError();\n  const ndx = glErrors.indexOf(err);\n  const errStrs = [];\n  for (let ii = 0; ii < glErrors.length; ++ii) {\n    errStrs.push(glEnumToString(gl, glErrors[ii]));\n  }\n  // const expected = errStrs.join(' or ');\n  if (ndx < 0) {\n    const msg = `getError expected${(glErrors.length > 1) ? ' one of: ' : ': '}`;\n    console.error('FAIL ' + msg);\n  }\n}\n\nexport function initializeGL(canvas) {\n  const gl = createGLContext(canvas);\n  setParameters(gl, {\n    viewport: [0, 0, canvas.width, canvas.height],\n    clearColor: [0, 0, 0, 1],\n    clearDepth: 1\n  });\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  return gl;\n}\n\nexport function initializeTexTarget(gl) {\n  const framebuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  framebuffer.width = 10;\n  framebuffer.height = 10;\n\n  const tex = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, tex);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, framebuffer.width, framebuffer.height, 0, gl.RGBA, gl.FLOAT, null);\n\n  const renderbuffer = gl.createRenderbuffer();\n  gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\n  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, framebuffer.width, framebuffer.height);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);\n  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\n\n}\n\nexport function render(gl) {\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  glErrorShouldBe(gl, gl.NO_ERROR, 'no error from draw');\n}\n\nexport function getGPUOutput(gl) {\n  const width = gl.canvas.width;\n  const height = gl.canvas.height;\n  const buf = new Float32Array(width * height * 4);\n  gl.readPixels(0, 0, width, height, gl.RGBA, gl.FLOAT, buf);\n  return buf;\n}\n"],"file":"gpu-test-utils.js"}