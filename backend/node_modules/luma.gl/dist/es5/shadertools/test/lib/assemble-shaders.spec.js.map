{"version":3,"sources":["../../../../../src/shadertools/test/lib/assemble-shaders.spec.js"],"names":["fixture","gl","VS_GLSL_300","FS_GLSL_300","t","ok","assembleShaders","undefined","end","assembleResult","vs","fs","modules","picking","equal","indexOf","testModuleSettings","pickingActive","is","getUniforms","testModule","name","opts","context","picking_uActive","dependencies","fp64"],"mappings":";;AACA;;AAGA;;;;;;AAEA,IAAMA,OAAO,GAAG;AACdC,EAAAA,EAAE,EAAE;AADU,CAAhB;AAIA,IAAMC,WAAW,gGAAjB;AASA,IAAMC,WAAW,gJAAjB;AAYA,wBAAK,wBAAL,EAA+B,UAAAC,CAAC,EAAI;AAClCA,EAAAA,CAAC,CAACC,EAAF,CAAKC,0BAAoBC,SAAzB,EAAoC,mCAApC;AACAH,EAAAA,CAAC,CAACI,GAAF;AACD,CAHD;AAKA,wBAAK,mCAAL,EAA0C,UAAAJ,CAAC,EAAI;AAC7C,MAAMK,cAAc,GAAG,2BAAgBT,OAAO,CAACC,EAAxB,EAA4B;AACjDS,IAAAA,EAAE,EAAER,WAD6C;AAEjDS,IAAAA,EAAE,EAAER,WAF6C;AAGjDS,IAAAA,OAAO,EAAE,CAACC,aAAD;AAHwC,GAA5B,CAAvB;AAMAT,EAAAA,CAAC,CAACU,KAAF,CAAQL,cAAc,CAACC,EAAf,CAAkBK,OAAlB,CAA0B,iBAA1B,CAAR,EAAsD,CAAtD,EACE,6CADF;AAEAX,EAAAA,CAAC,CAACU,KAAF,CAAQL,cAAc,CAACE,EAAf,CAAkBI,OAAlB,CAA0B,iBAA1B,CAAR,EAAsD,CAAtD,EACE,6CADF;AAEAX,EAAAA,CAAC,CAACI,GAAF;AACD,CAZD;AAcA,wBAAK,6BAAL,EAAoC,UAAAJ,CAAC,EAAI;AAEvC,MAAMY,kBAAkB,GAAG;AAACC,IAAAA,aAAa,EAAE;AAAhB,GAA3B;AAMA,MAAIR,cAAJ;AAGAA,EAAAA,cAAc,GAAG,2BAAgBT,OAAO,CAACC,EAAxB,EAA4B;AAC3CS,IAAAA,EAAE,EAAER,WADuC;AAE3CS,IAAAA,EAAE,EAAER;AAFuC,GAA5B,CAAjB;AAKAC,EAAAA,CAAC,CAACc,EAAF,SAAYT,cAAc,CAACU,WAA3B,GAAwC,UAAxC,EAAoD,gCAApD;AAGA,MAAMC,UAAU,GAAG;AACjBC,IAAAA,IAAI,EAAE,aADW;AAEjBX,IAAAA,EAAE,EAAE,EAFa;AAGjBC,IAAAA,EAAE,EAAE,EAHa;AAIjBQ,IAAAA,WAAW,EAAE,qBAACG,IAAD,EAAOC,OAAP,EAAmB;AAE9BnB,MAAAA,CAAC,CAACC,EAAF,CAAKkB,OAAO,CAACC,eAAb,EAA8B,mDAA9B;AACA,aAAO,EAAP;AACD,KARgB;AASjBC,IAAAA,YAAY,EAAE,CAAC,SAAD;AATG,GAAnB;AAYAhB,EAAAA,cAAc,GAAG,2BAAgBT,OAAO,CAACC,EAAxB,EAA4B;AAC3CS,IAAAA,EAAE,EAAER,WADuC;AAE3CS,IAAAA,EAAE,EAAER,WAFuC;AAG3CS,IAAAA,OAAO,EAAE,CAACC,aAAD,EAAUO,UAAV,EAAsBM,UAAtB;AAHkC,GAA5B,CAAjB;AAOAtB,EAAAA,CAAC,CAACc,EAAF,SAAYT,cAAc,CAACU,WAA3B,GAAwC,UAAxC,EAAoD,gCAApD;AAEAV,EAAAA,cAAc,CAACU,WAAf,CAA2BH,kBAA3B;AAqBAZ,EAAAA,CAAC,CAACI,GAAF;AACD,CA9DD","sourcesContent":["/* eslint-disable camelcase */\nimport {createGLContext, assembleShaders, picking, fp64} from 'luma.gl';\n// import {getShaderModule} from 'luma.gl/shadertools/src/lib/resolve-modules';\n// import {makeSpy} from 'probe.gl/test-utils';\nimport test from 'tape-catch';\n\nconst fixture = {\n  gl: createGLContext()\n};\n\nconst VS_GLSL_300 = `\\\n#version 300 es\n\nin vec4 positions;\n\nvoid main(void) {\n  gl_Position = positions;\n}\n`;\nconst FS_GLSL_300 = `\\\n#version 300 es\n\nprecision highp float;\n\nout vec4 fragmentColor;\n\nvoid main(void) {\n  fragmentColor = vec4(1.0, 1.0, 1.0, 1.0);\n}\n`;\n\ntest('assembleShaders#import', t => {\n  t.ok(assembleShaders !== undefined, 'assembleShaders import successful');\n  t.end();\n});\n\ntest('assembleShaders#version_directive', t => {\n  const assembleResult = assembleShaders(fixture.gl, {\n    vs: VS_GLSL_300,\n    fs: FS_GLSL_300,\n    modules: [picking]\n  });\n  // Verify version directive remains as first line.\n  t.equal(assembleResult.vs.indexOf('#version 300 es'), 0,\n    'version directive should be first statement');\n  t.equal(assembleResult.fs.indexOf('#version 300 es'), 0,\n    'version directive should be first statement');\n  t.end();\n});\n\ntest('assembleShaders#getUniforms', t => {\n\n  const testModuleSettings = {pickingActive: true};\n\n  // inject spy into the picking module's getUniforms\n  // const module = getShaderModule(picking);\n  // const getUniformsSpy = makeSpy(module, 'getUniforms');\n\n  let assembleResult;\n\n  // Without shader modules\n  assembleResult = assembleShaders(fixture.gl, {\n    vs: VS_GLSL_300,\n    fs: FS_GLSL_300\n  });\n  // Verify getUniforms is function\n  t.is(typeof assembleResult.getUniforms, 'function', 'getUniforms should be function');\n\n  // With shader modules\n  const testModule = {\n    name: 'test-module',\n    vs: '',\n    fs: '',\n    getUniforms: (opts, context) => {\n      // Check a uniform generated by its dependency\n      t.ok(context.picking_uActive, 'module getUniforms is called with correct context');\n      return {};\n    },\n    dependencies: ['picking']\n  };\n\n  assembleResult = assembleShaders(fixture.gl, {\n    vs: VS_GLSL_300,\n    fs: FS_GLSL_300,\n    modules: [picking, testModule, fp64]\n  });\n\n  // Verify getUniforms is function\n  t.is(typeof assembleResult.getUniforms, 'function', 'getUniforms should be function');\n\n  assembleResult.getUniforms(testModuleSettings);\n\n  // t.ok(module.getUniforms.called, 'module getUniforms is called');\n\n  // TODO: probe.gl spy does not yet support args\n  // t.deepEqual(\n  //   picking.getUniforms.getCall(0).args[0],\n  //   testModuleSettings,\n  //   'module getUniforms is called with correct opts');\n\n  // t.ok(testModule.getUniforms.calledAfter(picking.getUniforms),\n  //   'module getUniforms is called after its dependencies');\n\n  // TODO: probe.gl spy does not yet support args\n  // t.deepEqual(\n  //   testModule.getUniforms.getCall(0).args[0],\n  //   testModuleSettings,\n  //   'module getUniforms is called with correct opts');\n\n  // getUniformsSpy.restore();\n\n  t.end();\n});\n"],"file":"assemble-shaders.spec.js"}