{"version":3,"sources":["../../../src/webgl-context/context-features.js"],"names":["WEBGL_FEATURES","VERTEX_ARRAY_OBJECT","TIMER_QUERY","INSTANCED_RENDERING","MULTIPLE_RENDER_TARGETS","ELEMENT_INDEX_UINT32","BLEND_EQUATION_MINMAX","COLOR_ENCODING_SRGB","TEXTURE_DEPTH","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","TEXTURE_FILTER_LINEAR_FLOAT","TEXTURE_FILTER_LINEAR_HALF_FLOAT","TEXTURE_FILTER_ANISOTROPIC","COLOR_ATTACHMENT_RGBA32F","COLOR_ATTACHMENT_FLOAT","COLOR_ATTACHMENT_HALF_FLOAT","GLSL_FRAG_DATA","GLSL_FRAG_DEPTH","GLSL_DERIVATIVES","GLSL_TEXTURE_LOD","FEATURES","Object","keys","forEach","key","compiledGlslExtensions","canCompileGLGSExtension","gl","cap","opts","feature","extensionName","source","shader","createShader","shaderSource","compileShader","canCompile","getShaderParameter","deleteShader","getFeature","value","Boolean","getExtension","hasFeature","hasFeatures","features","Array","isArray","every","getFeatures","luma","caps","webgl2","TEST_EXPORTS"],"mappings":"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","sourcesContent":["// Feature detection for WebGL\n//\n// Provides a function that enables simple checking of which WebGL features are\n// available in an WebGL1 or WebGL2 environment.\n\n/* eslint-disable no-inline-comments, max-len */\nimport {isWebGL2} from '../webgl-utils';\nimport {isOldIE} from '../utils';\nimport assert from '../utils/assert';\n\n// Defines luma.gl \"feature\" names and semantics\nconst WEBGL_FEATURES = {\n  // API SUPPORT\n  VERTEX_ARRAY_OBJECT: ['OES_vertex_array_object', true],\n  TIMER_QUERY: ['EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2'],\n  INSTANCED_RENDERING: ['ANGLE_instanced_arrays', true],\n  MULTIPLE_RENDER_TARGETS: ['WEBGL_draw_buffers', true],\n\n  // FEATURES\n  ELEMENT_INDEX_UINT32: ['OES_element_index_uint', true],\n  BLEND_EQUATION_MINMAX: ['EXT_blend_minmax', true],\n\n  // TEXTURES, RENDERBUFFERS\n  COLOR_ENCODING_SRGB: ['EXT_sRGB', true],\n\n  // TEXTURES\n  TEXTURE_DEPTH: ['WEBGL_depth_texture', true],\n  TEXTURE_FLOAT: ['OES_texture_float', true],\n  TEXTURE_HALF_FLOAT: ['OES_texture_half_float', true],\n\n  TEXTURE_FILTER_LINEAR_FLOAT: ['OES_texture_float_linear'],\n  TEXTURE_FILTER_LINEAR_HALF_FLOAT: ['OES_texture_half_float_linear'],\n  TEXTURE_FILTER_ANISOTROPIC: ['EXT_texture_filter_anisotropic'],\n\n  // FRAMEBUFFERS, TEXTURES AND RENDERBUFFERS\n  COLOR_ATTACHMENT_RGBA32F: ['WEBGL_color_buffer_float', 'EXT_color_buffer_float'],\n  COLOR_ATTACHMENT_FLOAT: [false, 'EXT_color_buffer_float'],\n  COLOR_ATTACHMENT_HALF_FLOAT: [false, 'EXT_color_buffer_half_float'],\n\n  // GLSL extensions\n  GLSL_FRAG_DATA: ['WEBGL_draw_buffers', true],\n  GLSL_FRAG_DEPTH: ['EXT_frag_depth', true],\n  GLSL_DERIVATIVES: ['OES_standard_derivatives', true],\n  GLSL_TEXTURE_LOD: ['EXT_shader_texture_lod', true]\n};\n\n// Create a key-mirrored FEATURES array\nconst FEATURES = {};\nObject.keys(WEBGL_FEATURES).forEach(key => {\n  FEATURES[key] = key;\n});\nexport {FEATURES};\n\n// Enables feature detection in IE11 due to a bug where gl.getExtension may return true\n// but fail to compile when the extension is enabled in the shader. Specifically,\n// the OES_standard_derivatives extension fails to compile in IE11 even though its included\n// in the list of supported extensions.\nconst compiledGlslExtensions = {};\n// opts allows user agent to be overridden for testing\nexport function canCompileGLGSExtension(gl, cap, opts = {}) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  if (!isOldIE(opts)) {\n    return true;\n  }\n\n  if (cap in compiledGlslExtensions) {\n    return compiledGlslExtensions[cap];\n  }\n\n  const extensionName = feature[0];\n  const source = `#extension GL_${extensionName} : enable\\nvoid main(void) {}`;\n\n  const shader = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const canCompile = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  gl.deleteShader(shader);\n  compiledGlslExtensions[cap] = canCompile;\n  return canCompile;\n}\n\n// TODO - cache the value\nfunction getFeature(gl, cap) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  // Get extension name from table\n  const extensionName = isWebGL2(gl) ?\n    feature[1] || feature[0] :\n    feature[0];\n\n  // Check if the value is dependent on checking an extension\n  const value = typeof extensionName === 'string' ?\n    Boolean(gl.getExtension(extensionName)) :\n    extensionName;\n\n  assert(value === false || value === true);\n\n  return value;\n}\n\n// capability can be a WebGL extension name or a luma capability name\nexport function hasFeature(gl, feature) {\n  return hasFeatures(gl, feature);\n}\n\nexport function hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(feature => {\n    return getFeature(gl, feature);\n  });\n}\n\nexport function getFeatures(gl) {\n  gl.luma = gl.luma || {};\n\n  if (!gl.luma.caps) {\n    gl.luma.caps = {};\n    gl.luma.caps.webgl2 = isWebGL2(gl);\n    for (const cap in WEBGL_FEATURES) {\n      gl.luma.caps[cap] = getFeature(gl, cap);\n    }\n\n  }\n  return gl.luma.caps;\n}\n\nexport const TEST_EXPORTS = {\n  WEBGL_FEATURES\n};\n"],"file":"context-features.js"}