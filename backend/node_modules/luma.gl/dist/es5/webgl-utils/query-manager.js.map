{"version":3,"sources":["../../../src/webgl-utils/query-manager.js"],"names":["ERR_DELETED","ERR_CANCEL","noop","x","QueryManager","pendingQueries","Set","invalidQueryType","invalidErrorMessage","checkInvalid","gl","cancelInvalidQueries","values","query","resultAvailable","isResultAvailable","result","getResult","resolveQuery","queryType","errorMessage","onComplete","onError","cancelQuery","resolvers","promise","Promise","resolve","reject","Object","assign","add","then","catch","delete","Error","rejectQuery","invalidateQuery"],"mappings":"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","sourcesContent":["//\n// Internal class that helps \"asynchronous WebGL query objects\" manage\n// pending requests (e.g. for EXT_disjoint_timer_query and WebGL2 queries)\n//\n// Creates and manages promises for the queries.\n// Tracks pending queries enabling polling.\n// Tracks pending queries enabling invalidation.\n// Provides some standard error messages.\n//\n// Remarks:\n// - Maintains a minimal list of pending queries only to minimize GC impact\n// - Exported as a singleton class instance.\n\nconst ERR_DELETED = 'Query was deleted before result was available';\nconst ERR_CANCEL = 'Query was canceled before result was available';\n\nconst noop = x => x;\n\nclass QueryManager {\n  constructor() {\n    this.pendingQueries = new Set();\n    this.invalidQueryType = null;\n    this.invalidErrorMessage = '';\n    this.checkInvalid = () => false;\n  }\n\n  // API THAT SHOULD BE EXPOSED TO APPLICATION\n\n  // Checks invalidation callback and then all pending queries for completion\n  // Should only be called once per tick\n  poll(gl) {\n    this.cancelInvalidQueries(gl);\n\n    // Now check availability of results and resolve promises as appropriate\n    for (const query of this.pendingQueries.values()) {\n      const resultAvailable = query.isResultAvailable();\n      if (resultAvailable) {\n        const result = query.getResult();\n        this.resolveQuery(query, result);\n      }\n    }\n  }\n\n  // API FOR MANAGED QUERY CLASSES\n\n  // Registers query invalidation method - used to detect disjoint timer queries\n  setInvalidator({queryType, errorMessage, checkInvalid}) {\n    this.invalidQueryType = queryType;\n    this.invalidErrorMessage = errorMessage;\n    this.checkInvalid = checkInvalid;\n  }\n\n  // Starts a query, sets up a new promise\n  beginQuery(query, onComplete = noop, onError = noop) {\n    // Make sure disjoint state is cleared, so that this query starts fresh\n    // Cancel other queries if needed\n    this.cancelInvalidQueries(query.gl);\n\n    // Cancel current promise - noop if already resolved or rejected\n    this.cancelQuery(query);\n\n    // Create a new promise with attached resolve and reject methods\n    const resolvers = {};\n    query.promise = new Promise((resolve, reject) => {\n      resolvers.resolve = resolve;\n      resolvers.reject = reject;\n    });\n    Object.assign(query.promise, resolvers);\n\n    // Add this query to the pending queries\n    this.pendingQueries.add(query);\n    // Register the callbacks\n    return query.promise.then(onComplete).catch(onError);\n  }\n\n  // Resolves a query with a result\n  resolveQuery(query, result) {\n    this.pendingQueries.delete(query);\n    query.promise.resolve(result);\n  }\n\n  // Rejects the promise\n  rejectQuery(query, errorMessage) {\n    this.pendingQueries.delete(query);\n    if (query.promise) {\n      query.promise.reject(new Error(errorMessage));\n    }\n  }\n\n  // Rejects promise with standard message for Query.delete()\n  deleteQuery(query) {\n    return this.rejectQuery(query, ERR_DELETED);\n  }\n\n  // Rejects promise with standard message for Query.cancel()\n  cancelQuery(query) {\n    return this.rejectQuery(query, ERR_CANCEL);\n  }\n\n  // Rejects promise with registered message for invalidation\n  invalidateQuery(query) {\n    if (query instanceof this.invalidQueryType) {\n      this.rejectQuery(query, this.invalidErrorMessage);\n    }\n  }\n\n  // Checks all queries to see if need to be invalidated\n  cancelInvalidQueries(gl) {\n    // We assume that we can cancel queries for all context.\n    // Should be OK since this is used to check for \"disjoint\" GPU state\n    if (this.checkInvalid(gl)) {\n      for (const query of this.pendingQueries.values()) {\n        this.invalidateQuery(query);\n      }\n    }\n  }\n}\n\nexport default new QueryManager();\n"],"file":"query-manager.js"}