{"version":3,"sources":["../../../src/webgl/accessor.js"],"names":["DEFAULT_ACCESSOR_VALUES","offset","stride","type","size","divisor","normalized","integer","Accessor","accessor","ArrayType","BYTES_PER_ELEMENT","accessors","forEach","_assign","Object","freeze","JSON","stringify","props","undefined","log","warn","instanced","deprecated","isInstanced","index","getBytesPerElement","getBytesPerVertex"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA,IAAMA,uBAAuB,GAAG;AAC9BC,EAAAA,MAAM,EAAE,CADsB;AAE9BC,EAAAA,MAAM,EAAE,CAFsB;AAG9BC,EAAAA,IAAI,MAH0B;AAI9BC,EAAAA,IAAI,EAAE,CAJwB;AAK9BC,EAAAA,OAAO,EAAE,CALqB;AAM9BC,EAAAA,UAAU,EAAE,KANkB;AAO9BC,EAAAA,OAAO,EAAE;AAPqB,CAAhC;;;IAUqBC,Q;;;uCAEOC,Q,EAAU;AAGlC,UAAMC,SAAS,GAAG,8CAAwBD,QAAQ,CAACN,IAAT,QAAxB,CAAlB;AACA,aAAOO,SAAS,CAACC,iBAAjB;AACD;;;sCAEwBF,Q,EAAU;AACjC,2BAAOA,QAAQ,CAACL,IAAhB;AAGA,UAAMM,SAAS,GAAG,8CAAwBD,QAAQ,CAACN,IAAT,QAAxB,CAAlB;AACA,aAAOO,SAAS,CAACC,iBAAV,GAA8BF,QAAQ,CAACL,IAA9C;AACD;;;8BAM4B;AAAA,wCAAXQ,SAAW;AAAXA,QAAAA,SAAW;AAAA;;AAC3B,wBAAWJ,QAAX,GAAwBR,uBAAxB,SAAoDY,SAApD;AACD;;;AAED,sBAA0B;AAAA;;AAAA;;AAAA,uCAAXA,SAAW;AAAXA,MAAAA,SAAW;AAAA;;AACxBA,IAAAA,SAAS,CAACC,OAAV,CAAkB,UAAAJ,QAAQ;AAAA,aAAI,KAAI,CAACK,OAAL,CAAaL,QAAb,CAAJ;AAAA,KAA1B;AACAM,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACD;;;;+BAEU;AACT,aAAOC,IAAI,CAACC,SAAL,CAAe,IAAf,CAAP;AACD;;;8BAgBmB;AAAA,UAAZC,KAAY,uEAAJ,EAAI;;AAGlB,UAAIA,KAAK,CAAChB,IAAN,KAAeiB,SAAnB,EAA8B;AAC5B,YAAI,KAAKjB,IAAL,KAAcgB,KAAK,CAAChB,IAAxB,EAA8B;AAC5BkB,uBAAIC,IAAJ,CAAS,wBAAT;AACD;;AACD,aAAKnB,IAAL,GAAYgB,KAAK,CAAChB,IAAlB;;AAGA,YAAIgB,KAAK,CAAChB,IAAN,aAAyBgB,KAAK,CAAChB,IAAN,SAA7B,EAA6D;AAC3D,eAAKI,OAAL,GAAe,IAAf;AACD;AACF;;AAGD,UAAIY,KAAK,CAACf,IAAN,KAAegB,SAAnB,EAA8B;AAC5B,YAAI,KAAKhB,IAAL,KAAce,KAAK,CAACf,IAAxB,EAA8B;AAC5BiB,uBAAIC,IAAJ,CAAS,wBAAT;AACD;;AACD,aAAKlB,IAAL,GAAYe,KAAK,CAACf,IAAlB;AACD;;AAGD,UAAIe,KAAK,CAACd,OAAN,KAAkBe,SAAtB,EAAiC;AAC/B,aAAKf,OAAL,GAAec,KAAK,CAACd,OAArB;AACD;;AAED,UAAIc,KAAK,CAAClB,MAAN,KAAiBmB,SAArB,EAAgC;AAC9B,aAAKnB,MAAL,GAAckB,KAAK,CAAClB,MAApB;AACD;;AACD,UAAIkB,KAAK,CAACjB,MAAN,KAAiBkB,SAArB,EAAgC;AAC9B,aAAKlB,MAAL,GAAciB,KAAK,CAACjB,MAApB;AACD;;AACD,UAAIiB,KAAK,CAACb,UAAN,KAAqBc,SAAzB,EAAoC;AAClC,aAAKd,UAAL,GAAkBa,KAAK,CAACb,UAAxB;AACD;;AACD,UAAIa,KAAK,CAACZ,OAAN,KAAkBa,SAAtB,EAAiC;AAC/B,aAAKb,OAAL,GAAeY,KAAK,CAACZ,OAArB;AACD;;AAGD,UAAIY,KAAK,CAACI,SAAN,KAAoBH,SAAxB,EAAmC;AACjCC,qBAAIG,UAAJ,CAAe,oBAAf,EAAqC,kBAArC;;AACA,aAAKnB,OAAL,GAAec,KAAK,CAACI,SAAN,GAAkB,CAAlB,GAAsB,CAArC;AACD;;AACD,UAAIJ,KAAK,CAACM,WAAN,KAAsBL,SAA1B,EAAqC;AACnCC,qBAAIG,UAAJ,CAAe,sBAAf,EAAuC,kBAAvC;;AACA,aAAKnB,OAAL,GAAec,KAAK,CAACM,WAAN,GAAoB,CAApB,GAAwB,CAAvC;AACD;;AAGD,UAAIN,KAAK,CAACO,KAAN,KAAgBN,SAApB,EAA+B;AAC7B,aAAKM,KAAL,GAAaP,KAAK,CAACO,KAAN,GAAc,CAAd,GAAkB,CAA/B;AACD;;AAED,aAAO,IAAP;AACD;;;wBApEuB;AACtB,aAAOlB,QAAQ,CAACmB,kBAAT,CAA4B,IAA5B,CAAP;AACD;;;wBAEsB;AACrB,aAAOnB,QAAQ,CAACoB,iBAAT,CAA2B,IAA3B,CAAP;AACD","sourcesContent":["import GL from '../constants';\nimport {getTypedArrayFromGLType} from '../webgl-utils/typed-array-utils';\nimport log from '../utils/log';\nimport assert from '../utils/assert';\n\nconst DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: GL.FLOAT,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\n\nexport default class Accessor {\n\n  static getBytesPerElement(accessor) {\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static getBytesPerVertex(accessor) {\n    assert(accessor.size);\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n  }\n\n  // Combines (merges) a list of accessors. On top of default values\n  // Usually [programAccessor, bufferAccessor, appAccessor]\n  // All props will be set in the returned object.\n  // TODO check for conflicts between values in the supplied accessors\n  static resolve(...accessors) {\n    return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]); // Default values\n  }\n\n  constructor(...accessors) {\n    accessors.forEach(accessor => this._assign(accessor)); // Merge in sequence\n    Object.freeze(this);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  // ACCESSORS\n\n  // TODO - remove>\n  get BYTES_PER_ELEMENT() {\n    return Accessor.getBytesPerElement(this);\n  }\n\n  get BYTES_PER_VERTEX() {\n    return Accessor.getBytesPerVertex(this);\n  }\n\n  // PRIVATE\n\n  /* eslint-disable complexity, max-statements */\n  _assign(props = {}) {\n\n    // TYPE - not expected to be overridden\n    if (props.type !== undefined) {\n      if (this.type !== props.type) {\n        log.warn('accessor type mismatch');\n      }\n      this.type = props.type;\n\n      // Auto-deduce integer type?\n      if (props.type === GL.INT || props.type === GL.UNSIGNED_INT) {\n        this.integer = true;\n      }\n    }\n\n    // SIZE - not expected to be overridden\n    if (props.size !== undefined) {\n      if (this.size !== props.size) {\n        log.warn('accessor size mismatch');\n      }\n      this.size = props.size;\n    }\n\n    // INSTANCE DIVISOR\n    if (props.divisor !== undefined) {\n      this.divisor = props.divisor;\n    }\n\n    if (props.offset !== undefined) {\n      this.offset = props.offset;\n    }\n    if (props.stride !== undefined) {\n      this.stride = props.stride;\n    }\n    if (props.normalized !== undefined) {\n      this.normalized = props.normalized;\n    }\n    if (props.integer !== undefined) {\n      this.integer = props.integer;\n    }\n\n    // Backwards compatibility\n    if (props.instanced !== undefined) {\n      log.deprecated('Accessor.instanced', 'Accessor.divisor');\n      this.divisor = props.instanced ? 1 : 0;\n    }\n    if (props.isInstanced !== undefined) {\n      log.deprecated('Accessor.isInstanced', 'Accessor.divisor');\n      this.divisor = props.isInstanced ? 1 : 0;\n    }\n\n    // TODO - should this be supported?\n    if (props.index !== undefined) {\n      this.index = props.index ? 1 : 0;\n    }\n\n    return this;\n  }\n  /* eslint-enable complexity, max-statements */\n}\n\n// TEST EXPORTS\nexport {DEFAULT_ACCESSOR_VALUES};\n"],"file":"accessor.js"}