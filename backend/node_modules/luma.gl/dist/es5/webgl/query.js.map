{"version":3,"sources":["../../../src/webgl/query.js"],"names":["noop","x","ERR_GPU_DISJOINT","ERR_TIMER_QUERY_NOT_SUPPORTED","GL_QUERY_COUNTER_BITS_EXT","GL_QUERY_RESULT","GL_QUERY_RESULT_AVAILABLE","GL_TIME_ELAPSED_EXT","GL_TIMESTAMP_EXT","GL_GPU_DISJOINT_EXT","GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","GL_ANY_SAMPLES_PASSED","GL_ANY_SAMPLES_PASSED_CONSERVATIVE","Query","gl","opts","webgl2","hasTimerQuery","FEATURES","TIMER_QUERY","supported","key","queryCounterBits","getQuery","onComplete","onError","target","promise","Object","seal","begin","conservative","queryManager","beginQuery","queryCounter","handle","error","rejectQuery","ext","endQuery","end","cancelQuery","getQueryParameter","result","Number","isFinite","isSupported","createQuery","deleteQuery","poll","Resource","setInvalidator","queryType","errorMessage","checkInvalid","getParameter"],"mappings":"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","sourcesContent":["// WebGL2 Query (also handles disjoint timer extensions)\nimport Resource from './resource';\nimport {FEATURES, hasFeatures} from '../webgl-context/context-features';\nimport {isWebGL2} from '../webgl-utils';\nimport queryManager from '../webgl-utils/query-manager';\nimport assert from '../utils/assert';\n\nconst noop = x => x;\n\nconst ERR_GPU_DISJOINT = 'Disjoint GPU operation invalidated timer queries';\nconst ERR_TIMER_QUERY_NOT_SUPPORTED = 'Timer queries require \"EXT_disjoint_timer_query\" extension';\n\nconst GL_QUERY_COUNTER_BITS_EXT = 0x8864; // # bits in query result for the given target.\n\nconst GL_QUERY_RESULT = 0x8866;           // Returns a GLuint containing the query result.\nconst GL_QUERY_RESULT_AVAILABLE = 0x8867; // whether query result is available.\n\nconst GL_TIME_ELAPSED_EXT = 0x88BF;       // Elapsed time (in nanoseconds).\nconst GL_TIMESTAMP_EXT = 0x8E28;          // The current time.\nconst GL_GPU_DISJOINT_EXT = 0x8FBB;       // Whether GPU performed any disjoint operation.\n\nconst GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88; // #primitives written to feedback buffers\nconst GL_ANY_SAMPLES_PASSED = 0x8C2F;             // Occlusion query (if drawing passed depth test)\nconst GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;  // Occlusion query less accurate/faster version\n\nexport default class Query extends Resource {\n\n  // Returns true if Query is supported by the WebGL implementation\n  // Can also check whether timestamp queries are available.\n  static isSupported(gl, opts = []) {\n    const webgl2 = isWebGL2(gl);\n\n    // Initial value\n    const hasTimerQuery = hasFeatures(gl, FEATURES.TIMER_QUERY);\n    let supported = webgl2 || hasTimerQuery;\n\n    for (const key of opts) {\n      switch (key) {\n      case 'queries':\n        supported = supported && webgl2;\n        break;\n      case 'timers':\n        supported = supported && hasTimerQuery;\n        break;\n      case 'timestamps':\n        const queryCounterBits =\n          hasTimerQuery ? gl.getQuery(GL_TIMESTAMP_EXT, GL_QUERY_COUNTER_BITS_EXT) : 0;\n        supported = supported && (queryCounterBits > 0);\n        break;\n      default:\n        assert(false);\n      }\n    }\n\n    return supported;\n  }\n\n  // Create a query class\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      onComplete = noop,\n      onError = noop\n    } = opts;\n\n    this.target = null;\n    this.onComplete = onComplete;\n    this.onError = onError;\n\n    // query manager needs a promise field\n    this.promise = null;\n\n    Object.seal(this);\n  }\n\n  // Shortcut for timer query (dependent on extension in both WebGL1 and 2)\n  // Measures GPU time delta between this call and a matching `end` call in the\n  // GPU instruction stream.\n  beginTimeElapsedQuery() {\n    return this.begin(GL_TIME_ELAPSED_EXT);\n  }\n\n  // Shortcut for occlusion queries\n  beginOcclusionQuery({conservative = false} = {}) {\n    return this.begin(conservative ? GL_ANY_SAMPLES_PASSED_CONSERVATIVE : GL_ANY_SAMPLES_PASSED);\n  }\n\n  // Shortcut for transformFeedbackQuery\n  beginTransformFeedbackQuery() {\n    return this.begin(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);\n  }\n\n  // Generates a GPU time stamp when the GPU instruction stream reaches this instruction.\n  // To measure time deltas, two timestamp queries are needed.\n  // Note: timestamp() queries may not be available even when the timer query extension is.\n  getTimestamp() {\n    queryManager.beginQuery(this, this.onComplete, this.onError);\n    try {\n      this.gl.queryCounter(this.handle, GL_TIMESTAMP_EXT);\n    } catch (error) {\n      queryManager.rejectQuery(this, ERR_TIMER_QUERY_NOT_SUPPORTED);\n    }\n    return this;\n  }\n\n  // Due to OpenGL API limitations, after calling `begin()` on one Query\n  // instance, `end()` must be called on that same instance before\n  // calling `begin()` on another query. While there can be multiple\n  // outstanding queries representing disjoint `begin()`/`end()` intervals.\n  // It is not possible to interleave or overlap `begin` and `end` calls.\n  begin(target) {\n    // - Triggering a new query when a Query is already tracking an\n    //   unresolved query causes that query to be cancelled.\n    queryManager.beginQuery(this, this.onComplete, this.onError);\n    this.target = target;\n\n    try {\n      this.gl.beginQuery(this.target, this.handle);\n    } catch (error) {\n      queryManager.rejectQuery(this, 'Query not supported');\n    }\n    return this;\n  }\n\n  // ends the current query\n  end() {\n    // Note: calling end does not affect the pending promise\n    if (this.target) {\n      this.ext.endQuery(this.target);\n      this.target = null;\n    }\n    return this;\n  }\n\n  // Cancels a pending query\n  cancel() {\n    this.end();\n    queryManager.cancelQuery(this);\n    return this;\n  }\n\n  // Returns true if the query result is available\n  isResultAvailable() {\n    return this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT_AVAILABLE);\n  }\n\n  // Returns the query result, converted to milliseconds to match JavaScript conventions.\n  // TODO - what about non-timer queries\n  getResult() {\n    const result = this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT);\n    return Number.isFinite(result) ? result / 1e6 : 0;\n  }\n\n  static poll(gl) {\n    queryManager.poll(gl);\n  }\n\n  _createHandle() {\n    return Query.isSupported(this.gl) ? this.gl.createQuery() : null;\n  }\n\n  _deleteHandle() {\n    queryManager.deleteQuery(this);\n    this.gl.deleteQuery(this.handle);\n  }\n}\n\n// NOTE: This call lets the queryManager know how to detect disjoint GPU state\n// It will check dsjoint state on polls and before adding a new query\n// and reject any outstanding TimerQueries with our supplied error message.\nqueryManager.setInvalidator({\n  queryType: Query,\n  errorMessage: ERR_GPU_DISJOINT,\n  // Note: Querying the disjoint state resets it\n  checkInvalid: gl => gl.getParameter(GL_GPU_DISJOINT_EXT)\n});\n"],"file":"query.js"}