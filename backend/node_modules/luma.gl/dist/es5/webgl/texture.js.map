{"version":3,"sources":["../../../src/webgl/texture.js"],"names":["NPOT_MIN_FILTERS","TEXTURE_FORMATS","dataFormat","types","isFormatSupported","gl","format","info","gl1","undefined","gl2","value","getExtension","isLinearFilteringSupported","Texture","linearFiltering","supported","opts","id","handle","target","hasFloatTexture","textureUnit","width","height","data","pixels","type","border","recreate","parameters","pixelStore","unpackFlipY","mipmaps","_deduceParameters","compressed","DEFAULT_TEXTURE_SETTINGS","glSettings","Object","assign","_isNPOT","log","warn","_updateForNPOT","setImageData","generateMipmap","setParameters","initialize","params","bindTexture","level","offset","dataType","_getDataType","texImage2D","bindBuffer","compressedTexImage2D","x","y","ndarray","shape","Buffer","compressedTexSubImage2D","texSubImage2D","ArrayBuffer","isView","WebGLBuffer","framebuffer","internalFormat","bind","copyTexImage2D","unbind","getParameter","Error","activeTexture","internalformat","depth","texImage3D","textureFormat","_deduceImageSize","size","ImageData","HTMLImageElement","naturalWidth","naturalHeight","HTMLCanvasElement","HTMLVideoElement","videoWidth","videoHeight","createTexture","deleteTexture","pname","getTexParameter","param","_getNPOTParam","texParameterf","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","indexOf","Resource"],"mappings":"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","sourcesContent":["/* eslint-disable no-inline-comments, max-len */\nimport GL from '../constants';\n\nimport Resource from './resource';\nimport Buffer from './buffer';\n\nimport {withParameters} from '../webgl-context/context-state';\n\nimport {WebGLBuffer} from '../webgl-utils';\nimport {isWebGL2, assertWebGL2Context} from '../webgl-utils';\n\nimport {log, uid, isPowerOfTwo} from '../utils';\nimport assert from '../utils/assert';\n\n// Supported min filters for NPOT texture.\nconst NPOT_MIN_FILTERS = [GL.LINEAR, GL.NEAREST];\n\n// const S3TC = 'WEBGL_compressed_texture_s3tc';\n// const PVRTC = 'WEBGL_compressed_texture_pvrtc';\n// const ES3 = 'WEBGL_compressed_texture_es3';\n// const ETC1 = 'WEBGL_compressed_texture_etc1';\n// const SRGB = 'EXT_sRGB';\n// const DEPTH = 'WEBGL_depth_texture';\n\n// Legal combinations for internalFormat, format and type\nexport const TEXTURE_FORMATS = {\n  // Unsized texture format - more performance\n  [GL.RGB]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5]},\n  [GL.RGBA]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4, GL.UNSIGNED_SHORT_5_5_5_1]},\n  [GL.ALPHA]: {dataFormat: GL.ALPHA, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE]: {dataFormat: GL.LUMINANCE, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE_ALPHA]: {dataFormat: GL.LUMINANCE_ALPHA, types: [GL.UNSIGNED_BYTE]}\n\n  // [GL.DEPTH_COMPONENT]: {types: [GL.UNSIGNED_SHORT, GL.UNSIGNED_INT, GL.UNSIGNED_INT_24_8], gl1: DEPTH},\n  // [GL.DEPTH_STENCIL]: {gl1: DEPTH},\n\n  // Sized texture format - more performance\n  // R\n  // [GL.R8]: {dataFormat: GL.RED, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.R16F]: {dataFormat: GL.RED, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.R32F]: {dataFormat: GL.RED, types: [GL.FLOAT], gl2: true},\n  // [GL.R8UI]: {dataFormat: GL.RED_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RG\n  // [GL.RG8]: {dataFormat: GL.RG, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.RG16F]: {dataFormat: GL.RG, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RG32F]: {dataFormat: GL.RG, types: [GL.FLOAT], gl2: true},\n  // [GL.RG8UI]: {dataFormat: GL.RG_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGB\n  // [GL.RGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB565]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5], gl2: true},\n  // [GL.R11F_G11F_B10F]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_INT_10F_11F_11F_REV, GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGB9_E5]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_half_float'},\n  // [GL.RGB16F]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_float'},\n  // [GL.RGB32F]: {dataFormat: GL.RGB, types: [GL.FLOAT], gl2: true},\n  // [GL.RGB8UI]: {dataFormat: GL.RGB_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGBA\n  // [GL.RGBA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8_ALPHA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB5_A1]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_5_5_1], gl2: true},\n  // [GL.RGBA4]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4], gl2: true},\n  // [GL.RGBA16F]: {dataFormat: GL.RGBA, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGBA32F]: {dataFormat: GL.RGBA, types: [GL.FLOAT], gl2: true},\n  // [GL.RGBA8UI]: {dataFormat: GL.RGBA_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true}\n\n  // Compressed formats\n\n  // WEBGL_compressed_texture_s3tc\n\n  // [GL.COMPRESSED_RGB_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT3_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT5_EXT]: {compressed: true, gl1: S3TC},\n\n  // WEBGL_compressed_texture_es3\n\n  // [GL.COMPRESSED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_SIGNED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_SIGNED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_RGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_RGBA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RBG\n  // [GL.COMPRESSED_SRGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  /* WebGL2 guaranteed availability compressed formats?\n  COMPRESSED_R11_EAC RED\n  COMPRESSED_SIGNED_R11_EAC RED\n  COMPRESSED_RG11_EAC RG\n  COMPRESSED_SIGNED_RG11_EAC RG\n  COMPRESSED_RGB8_ETC2 RGB\n  COMPRESSED_SRGB8_ETC2 RGB\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_RGBA8_ETC2_EAC RGBA\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\n  */\n\n  // WEBGL_compressed_texture_pvrtc\n\n  // [GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n\n  // WEBGL_compressed_texture_etc1\n\n  // [GL.COMPRESSED_RGB_ETC1_WEBGL]: {compressed: true, gl1: ETC1},\n\n  // WEBGL_compressed_texture_atc\n\n  // [GL.COMPRESSED_RGB_ATC_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: {compressed: true, gl1: ETC1}\n};\n\nfunction isFormatSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  if (!info) {\n    return false;\n  }\n  if (info.gl1 === undefined && info.gl2 === undefined) { // No info - always supported\n    return true;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  return typeof value === 'string' ? gl.getExtension(value) : value;\n}\n\nfunction isLinearFilteringSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  switch (info && info.types[0]) {\n  // Both WebGL1 and WebGL2?\n  case GL.FLOAT: return gl.getExtension('OES_texture_float_linear');\n  // Not in WebGL2?\n  case GL.HALF_FLOAT: return gl.getExtension('OES_texture_half_float_linear');\n  default: return true;\n  }\n}\n\nexport default class Texture extends Resource {\n\n  static isSupported(gl, {format, linearFiltering} = {}) {\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n  constructor(gl, opts) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n      // , magFilter, minFilter, wrapS, wrapT\n    } = opts;\n\n    super(gl, {id, handle});\n\n    this.target = target;\n    this.hasFloatTexture = gl.getExtension('OES_texture_float');\n    this.textureUnit = undefined;\n  }\n\n  toString() {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(opts = {}) {\n    let data = opts.data;\n\n    const {\n      pixels = null,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      // Deprecated parameters\n      unpackFlipY = true\n    } = opts;\n\n    let {mipmaps = true} = opts;\n\n    // pixels variable is for API compatibility purpose\n    if (!data) {\n      // TODO - This looks backwards? Commenting out for now until we decide\n      // which prop to use\n      // log.deprecated('data', 'pixels')();\n      data = pixels;\n    }\n\n    let {width, height, dataFormat} = opts;\n\n    // Deduce width and height\n    ({width, height, dataFormat} = this._deduceParameters({\n      format, type, dataFormat, compressed: false, data, width, height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n\n    // Note: luma.gl defaults to GL.UNPACK_FLIP_Y_WEBGL = true;\n    // TODO - compare v4 and v3\n    const DEFAULT_TEXTURE_SETTINGS = {\n      // Pixel store\n      [GL.UNPACK_FLIP_Y_WEBGL]: unpackFlipY\n    };\n    const glSettings = Object.assign({}, DEFAULT_TEXTURE_SETTINGS, pixelStore);\n\n    if (this._isNPOT() && mipmaps) {\n\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n    this.mipmaps = mipmaps;\n\n    this.setImageData({data, width, height, format, type, dataFormat, border, mipmaps, parameters: glSettings});\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    // Set texture sampler parameters\n    this.setParameters(parameters);\n\n    // TODO - Store data to enable auto recreate on context loss\n    if (recreate) {\n      this.data = data;\n    }\n  }\n\n  // If size has changed, reinitializes with current format\n  // note clears image and mipmaps\n  resize({width, height}) {\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps: false\n      });\n    }\n    return this;\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}) {\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} width -\n   * @param {GLint} height -\n   * @param {GLint} mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  /* eslint-disable max-len, max-statements, complexity */\n  setImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    width,\n    height,\n    level = 0,\n    format = GL.RGBA,\n    type,\n    dataFormat,\n    offset = 0,\n    border = 0,\n    compressed = false,\n    parameters = {}\n  }) {\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format, type, dataFormat, compressed, data, width, height}));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n\n    withParameters(this.gl, parameters, () => {\n      switch (dataType) {\n      case 'null':\n        gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n        break;\n      case 'typed-array':\n        // Looks like this assert is not necessary, as offset is ignored under WebGL1\n        // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');\n        gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data, offset);\n        break;\n      case 'buffer':\n        // WebGL2 enables creating textures directly from a WebGL buffer\n        assertWebGL2Context(gl);\n        gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n        gl.texImage2D(target, level, format, width, height, border, format, type, offset);\n        break;\n      case 'browser-object':\n        gl.texImage2D(target, level, format, format, type, data);\n        break;\n      case 'compressed':\n        gl.compressedTexImage2D(this.target, level, format, width, height, border, data);\n        break;\n      default:\n        assert(false, 'Unknown image data type');\n      }\n    });\n\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   */\n  /*\n   * Redefines an area of an existing texture\n   * @param {*} pixels, data -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} x - xOffset from where texture to be updated\n   * @param {GLint} y - yOffset from where texture to be updated\n   * @param {GLint} width - width of the sub image to be updated\n   * @param {GLint} height - height of the sub image to be updated\n   * @param {GLint} level - mip level to be updated\n   * @param {GLenum} format - internal format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer or ArrayBufferView\n   * @param {GLenum} dataFormat - format of image data.\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width,\n    height,\n    level = 0,\n    format = GL.RGBA,\n    type,\n    dataFormat,\n    compressed = false,\n    offset = 0,\n    border = 0,\n    parameters = {}\n  }) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format, type, dataFormat, compressed, data, width, height}));\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      // TODO - x,y parameters\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target,\n          level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target,\n          level, format, width, height, border, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        this.gl.texSubImage2D(target,\n          level, x, y, width, height, format, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        // WebGL2 allows us to create texture directly from a WebGL buffer\n        assertWebGL2Context(this.gl);\n        // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n        this.gl.texSubImage2D(target,\n          level, format, width, height, border, format, type, offset);\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n      } else {\n        // Assume data is a browser supported object (ImageData, Canvas, ...)\n        this.gl.texSubImage2D(target, level, x, y, format, type, data);\n      }\n    });\n\n    this.gl.bindTexture(this.target, null);\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer({\n    target = this.target,\n    framebuffer,\n    offset = 0,\n    x = 0,\n    y = 0,\n    width,\n    height,\n    level = 0,\n    internalFormat = GL.RGBA,\n    border = 0\n  }) {\n    if (framebuffer) {\n      framebuffer.bind();\n    }\n\n    // target\n    this.bind();\n    this.gl.copyTexImage2D(\n      this.target, level, internalFormat, x, y, width, height, border);\n    this.unbind();\n\n    if (framebuffer) {\n      framebuffer.unbind();\n    }\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    if (textureUnit === undefined) {\n      throw new Error('Texture.bind: must specify texture unit');\n    }\n    this.textureUnit = textureUnit;\n    this.gl.activeTexture(GL.TEXTURE0 + textureUnit);\n    this.gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind() {\n    if (this.textureUnit === undefined) {\n      throw new Error('Texture.unbind: texture unit not specified');\n    }\n    this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n    this.gl.bindTexture(this.target, null);\n    return this.textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof Buffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    if (data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  // Image 3D copies from Typed Array or WebGLBuffer\n  setImage3D({\n    level = 0,\n    internalformat = GL.RGBA,\n    width,\n    height,\n    depth = 1,\n    border = 0,\n    format,\n    type = GL.UNSIGNED_BYTE,\n    offset = 0,\n    pixels\n  }) {\n    if (ArrayBuffer.isView(pixels)) {\n      this.gl.texImage3D(\n        this.target, level, internalformat,\n        width, height, depth, border, format, type, pixels);\n      return this;\n    }\n\n    if (pixels instanceof Buffer) {\n      this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, pixels.handle);\n      this.gl.texImage3D(\n        this.target, level, internalformat,\n        width, height, depth, border, format, type, offset);\n    }\n\n    return this;\n  }\n\n  /* Copied from texture-2d.js\n  // WebGL2\n  setPixels(opts = {}) {\n    const {\n      buffer,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n\n    // This signature of texImage2D uses currently bound GL.PIXEL_UNPACK_BUFFER\n    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);\n    // And as always, we must also bind the texture itself\n    this.bind();\n\n    gl.texImage2D(gl.TEXTURE_2D,\n      mipmapLevel, format, width, height, border, format, type, buffer.target);\n\n    this.unbind();\n    gl.bindBuffer(GL.GL.PIXEL_UNPACK_BUFFER, null);\n    return this;\n  }\n\n  setImageDataFromCompressedBuffer(opts) {\n    const {\n      buffer,\n      // offset = 0,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      internalFormat = GL.RGBA,\n      // format = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n    gl.compressedTexImage2D(this.target,\n      mipmapLevel, internalFormat, width, height, border, buffer);\n    // gl.compressedTexSubImage2D(target,\n    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n    return this;\n  }\n\n  copySubImage(opts) {\n    const {\n      // pixels,\n      // offset = 0,\n      // x,\n      // y,\n      // width,\n      // height,\n      // mipmapLevel = 0,\n      // internalFormat = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      // border = 0\n    } = opts;\n\n    // if (pixels instanceof ArrayBufferView) {\n    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);\n    // }\n    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);\n    // // Additional signature in a WebGL 2 context:\n    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);\n  }\n  */\n\n  // HELPER METHODS\n\n  _deduceParameters(opts) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);\n    type = type || (textureFormat && textureFormat.types[0]);\n\n    // Deduce compression from format\n    compressed = compressed || (textureFormat && textureFormat.compressed);\n\n    ({width, height} = this._deduceImageSize({data, width, height}));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  /* global ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement */\n  _deduceImageSize({data, width, height}) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(width === undefined || size.width === width, 'Deduced texture width does not match supplied width');\n    assert(height === undefined || size.height === height, 'Deduced texture height does not match supplied height');\n\n    return size;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n    case GL.TEXTURE_WIDTH:\n      return this.width;\n    case GL.TEXTURE_HEIGHT:\n      return this.height;\n    default:\n      this.gl.bindTexture(this.target, this.handle);\n      const value = this.gl.getTexParameter(this.target, pname);\n      this.gl.bindTexture(this.target, null);\n      return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n\n    // NOTE: Apply NPOT workaround\n    param = this._getNPOTParam(pname, param);\n\n    // Apparently there are some integer/float conversion rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n    case GL.TEXTURE_MIN_LOD:\n    case GL.TEXTURE_MAX_LOD:\n      this.gl.texParameterf(this.handle, pname, param);\n      break;\n\n    case GL.TEXTURE_WIDTH:\n    case GL.TEXTURE_HEIGHT:\n      assert(false);\n      break;\n\n    default:\n      this.gl.texParameteri(this.target, pname, param);\n      break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    return (!isWebGL2(this.gl) && (!isPowerOfTwo(this.width) || (!isPowerOfTwo(this.height))));\n  }\n\n  // Update default settings which are not supported by NPOT textures.\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n      case GL.TEXTURE_MIN_FILTER:\n        if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n          // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n          param = GL.LINEAR;\n        }\n        break;\n      case GL.TEXTURE_WRAP_S:\n      case GL.TEXTURE_WRAP_T:\n        if (param !== GL.CLAMP_TO_EDGE) {\n          // log.warn(`texture: ${this} is Non-Power-Of-Two, ${getKey(this.gl, pname)} to CLAMP_TO_EDGE`)();\n          param = GL.CLAMP_TO_EDGE;\n        }\n        break;\n      default:\n        break;\n      }\n    }\n    return param;\n  }\n}\n"],"file":"texture.js"}