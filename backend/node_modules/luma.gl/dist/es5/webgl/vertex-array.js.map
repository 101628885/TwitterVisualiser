{"version":3,"sources":["../../../src/webgl/vertex-array.js"],"names":["ERR_ATTRIBUTE_TYPE","VertexArray","gl","opts","id","program","configuration","elements","values","accessors","unused","drawParams","buffer","vertexArrayObject","VertexArrayObject","isSupported","getDefaultArray","initialize","Object","seal","delete","props","reset","bindOnUse","setProps","MAX_ATTRIBUTES","Array","fill","setAttributes","attributes","setElementBuffer","appParameters","_updateDrawParams","assign","bind","locationOrName","value","Buffer","setBuffer","isArray","length","accessor","ArrayBuffer","isView","setConstant","Error","bindBuffer","elementBuffer","clearDrawParams","isDefaultArray","appAccessor","target","_resolveLocationAndAccessor","location","arrayValue","_normalizeConstantArrayValue","enable","size","disableVertexAttribArray","handle","vertexAttribPointer","vertexCount","instanceCount","func","_setConstantAttributes","hasVertexArrays","bindBuffers","unbindBuffers","valueAccessor","_getAttributeIndex","Number","isFinite","log","once","accessInfo","_getAttributeInfo","Accessor","resolve","type","attributeName","getAttributeInfo","getAttributeLocation","elementCount","Math","max","constant","_setConstantAttributeZero","_setConstantAttribute","constantAttributeZero","getConstantBuffer","isDefault","isIndexed","isInstanced","indexCount","Infinity","_updateDrawParamsForLocation","getElementCount","indexType","divisor","getVertexCount","min","deprecated"],"mappings":"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","sourcesContent":["// VertexArray class\n\nimport GL from '../constants';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport {log, assert} from '../utils';\nimport {stubRemovedMethods} from '../utils';\n\nconst ERR_ATTRIBUTE_TYPE =\n  'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\n\nexport default class VertexArray {\n  constructor(gl, opts = {}) {\n    // Use program's id if program is supplied but no id is supplied\n    const id = opts.id || opts.program && opts.program.id;\n    // super(gl, Object.assign({}, opts, {id}));\n\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n\n    // Extracted information\n    this.elements = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null; // For attribute 0 on desktops, and created when unbinding buffers\n\n    this.vertexArrayObject = VertexArrayObject.isSupported(gl) ?\n      new VertexArrayObject(gl) :\n      VertexArrayObject.getDefaultArray(gl);\n\n    // Issue errors when using removed methods\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', [\n      'setBuffers', 'setGeneric', 'clearBindings', 'setLocations', 'setGenericValues',\n      'setDivisor', 'enable', 'disable'\n    ]);\n\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n  }\n\n  initialize(props = {}) {\n    this.reset();\n    this.configuration = null;\n    this.bindOnUse = false;\n    return this.setProps(props);\n  }\n\n  // Resets all attributes (to default valued constants)\n  reset() {\n    // this.vertexArrayObject.reset();\n\n    this.elements = null;\n    const {MAX_ATTRIBUTES} = this.vertexArrayObject;\n    this.values = new Array(MAX_ATTRIBUTES).fill(null);\n    this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n    this.unused = {};\n\n    // Auto detects draw params\n    this.drawParams = null;\n\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('elements' in props) {\n      this.setElementBuffer(props.elements);\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    return this;\n  }\n\n  // Automatically called if buffers changed through VertexArray API\n  clearDrawParams() {\n    this.drawParams = null;\n  }\n\n  getDrawParams(appParameters) {\n    // Auto deduced draw parameters\n    this.drawParams = this.drawParams || this._updateDrawParams();\n\n    // Override with any application supplied draw parameters\n    return Object.assign({}, this.drawParams, appParameters);\n  }\n\n  // Set (bind) an array or map of vertex array buffers, either in numbered or named locations.\n  // For names that are not present in `location`, the supplied buffers will be ignored.\n  // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements\n  //   Signatures:\n  //     {attributeName: buffer}\n  //     {attributeName: [buffer, accessor]}\n  //     {attributeName: (typed) array} => constant\n  setAttributes(attributes) {\n    this.vertexArrayObject.bind(() => {\n      for (const locationOrName in attributes) {\n        const value = attributes[locationOrName];\n        if (value instanceof Buffer) {\n          //  Signature: attributeName: buffer\n          this.setBuffer(locationOrName, value);\n        } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n          // Signature: attributeName: [buffer, accessor]\n          const buffer = value[0];\n          const accessor = value[1];\n          this.setBuffer(locationOrName, buffer, accessor);\n        } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n          //  Signature: attributeName: (short) (typed) array => constant\n          this.setConstant(locationOrName, value);\n        } else {\n          throw new Error(ERR_ATTRIBUTE_TYPE);\n        }\n      }\n\n      // Make sure we don't leave any bindings\n      this.gl.bindBuffer(GL.ARRAY_BUFFER, null);\n    });\n\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, accessor = {}) {\n    this.elements = elementBuffer; // Save value for debugging\n    this.clearDrawParams();\n\n    // Update vertexArray immediately if we have our own array\n    if (!this.vertexArrayObject.isDefaultArray) {\n      this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n    }\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a buffer\n  setBuffer(locationOrName, buffer, appAccessor = {}) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer);\n    }\n\n    const {location, accessor} =\n      this._resolveLocationAndAccessor(locationOrName, buffer, buffer.accessor, appAccessor);\n\n    if (location >= 0) {\n      this.values[location] = buffer;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // Update vertexArray immediately if we have our own array\n      if (!this.vertexArrayObject.isDefaultArray) {\n        this.vertexArrayObject.setBuffer(location, buffer, accessor);\n      }\n    }\n\n    return this;\n  }\n\n  // Set attribute to constant value (small typed array corresponding to one vertex' worth of data)\n  setConstant(locationOrName, arrayValue, appAccessor = {}) {\n    const {location, accessor} =\n      this._resolveLocationAndAccessor(locationOrName, arrayValue, appAccessor);\n\n    if (location >= 0) {\n      arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue, accessor);\n\n      this.values[location] = arrayValue;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // Update vertexArray immediately if we have our own array\n      // NOTE: We set the actual constant value later on bind. We can't set the value now since\n      // constants are global and affect all other VertexArrays that have disabled attributes\n      // in the same location.\n      // We do disable the attribute which makes it use the global constant value at that location\n      if (!this.vertexArrayObject.isDefaultArray) {\n        this.vertexArrayObject.enable(location, false);\n      }\n    }\n\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, unbind temporarily to avoid conflicting with TransformFeedback\n  unbindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(null);\n      }\n\n      // Chrome does not like buffers that are bound to several binding points,\n      // so we need to offer and unbind facility\n      // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n      // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n      this.buffer = this.buffer || new Buffer(this.gl, {size: 4});\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        if (this.values[location] instanceof Buffer) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n          this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, rebind rebind after temporary unbind\n  bindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(this.elements);\n      }\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        const buffer = this.values[location];\n        if (buffer instanceof Buffer) {\n          this.setBuffer(location, buffer);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Bind for use\n  // When a vertex array is about to be used, we must:\n  // - Set constant attributes (since these are stored on the context and reset on bind)\n  // - Check if we need to initialize the buffer\n  bindForDraw(vertexCount, instanceCount, func) {\n    let value;\n\n    this.vertexArrayObject.bind(() => {\n\n      // Make sure that any constant attributes are updated (stored on the context, not the VAO)\n      // Also handles attribute 0\n      this._setConstantAttributes(vertexCount, instanceCount);\n\n      if (!this.vertexArrayObject.hasVertexArrays) {\n        this.bindBuffers();\n      }\n\n      value = func();\n\n      if (!this.vertexArrayObject.hasVertexArrays) {\n        this.unbindBuffers();\n      }\n\n    });\n\n    return value;\n  }\n\n  // PRIVATE\n\n  // Resolve locations and accessors\n  _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n    const location = this._getAttributeIndex(locationOrName);\n    if (!Number.isFinite(location) || location < 0) {\n      this.unused[locationOrName] = value;\n      log.once(3, () => `unused value ${locationOrName} in ${this.id}`)();\n      return this;\n    }\n\n    const accessInfo = this._getAttributeInfo(locationOrName);\n\n    // Resolve the partial accessors into a final accessor\n    const accessor = Accessor.resolve(accessInfo.accessor, valueAccessor, appAccessor);\n\n    const {size, type} = accessor;\n    assert(Number.isFinite(size) && Number.isFinite(type));\n\n    return {location, accessor};\n  }\n\n  _getAttributeInfo(attributeName) {\n    return this.configuration && this.configuration.getAttributeInfo(attributeName);\n  }\n\n  _getAttributeIndex(locationOrName) {\n    if (this.configuration) {\n      return this.configuration.getAttributeLocation(locationOrName);\n    }\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return location;\n    }\n    return -1;\n  }\n\n  // Updates all constant attribute values (constants are used when vertex attributes are disabled).\n  // This needs to be done repeatedly since in contrast to buffer bindings,\n  // constants are stored on the WebGL context, not the VAO\n  _setConstantAttributes(vertexCount, instanceCount) {\n    // TODO - use accessor to determine what length to use\n    const elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n    let constant = this.values[0];\n    if (ArrayBuffer.isView(constant)) {\n      this._setConstantAttributeZero(constant, elementCount);\n    }\n\n    for (let location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      constant = this.values[location];\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttribute(location, constant);\n      }\n    }\n  }\n\n  _setConstantAttributeZero(constant, elementCount) {\n    if (VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true})) {\n      this._setConstantAttribute(0, constant);\n      return;\n    }\n\n    // Get a dummy buffer populated with repeated constants\n    const buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n\n    // Set the buffer on location 0\n    this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n  }\n\n  _setConstantAttribute(location, constant) {\n    VertexArrayObject.setConstant(this.gl, location, constant);\n\n    // If we are using the global VertexArrayObject, we need to disable the attribute now\n    if (this.vertexArrayObject.isDefault) {\n      this.vertexArrayObject.enable(location, false);\n    }\n  }\n\n  // Walks the buffers and updates draw parameters\n  _updateDrawParams() {\n    const drawParams = {\n      isIndexed: false,\n      isInstanced: false,\n      indexCount: Infinity,\n      vertexCount: Infinity,\n      instanceCount: Infinity\n    };\n\n    for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      this._updateDrawParamsForLocation(drawParams, location);\n    }\n\n    if (this.elements) {\n      // indexing is autodetected - buffer with target GL.ELEMENT_ARRAY_BUFFER\n      // index type is saved for drawElement calls\n      drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n      drawParams.isIndexed = true;\n      drawParams.indexType = this.elements.accessor.type;\n    }\n\n    // Post-calculation checks\n    if (drawParams.indexCount === Infinity) {\n      drawParams.indexCount = 0;\n    }\n    if (drawParams.vertexCount === Infinity) {\n      drawParams.vertexCount = 0;\n    }\n    if (drawParams.instanceCount === Infinity) {\n      drawParams.instanceCount = 0;\n    }\n\n    return drawParams;\n  }\n\n  _updateDrawParamsForLocation(drawParams, location) {\n    const value = this.values[location];\n    const accessor = this.accessors[location];\n\n    if (!value) {\n      return;\n    }\n\n    // Check if instanced (whether buffer or constant)\n    const {divisor} = accessor;\n    const isInstanced = divisor > 0;\n    drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n\n    if (value instanceof Buffer) {\n      const buffer = value;\n\n      if (isInstanced) {\n        // instance attribute\n        const instanceCount = buffer.getVertexCount(accessor);\n        drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n      } else {\n        // normal attribute\n        const vertexCount = buffer.getVertexCount(accessor);\n        drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n      }\n    }\n  }\n\n  // DEPRECATED\n\n  setElements(elementBuffer = null, accessor = {}) {\n    log.deprecated('setElements', 'setElementBuffer');\n    return this.setElementBuffer(elementBuffer, accessor);\n  }\n}\n"],"file":"vertex-array.js"}