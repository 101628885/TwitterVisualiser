{"version":3,"sources":["../../../src/webgl1/polyfill-context.js"],"names":["assert","condition","message","Error","OES_vertex_array_object","ANGLE_instanced_arrays","WEBGL_draw_buffers","EXT_disjoint_timer_query","EXT_disjoint_timer_query_webgl2","EXT_texture_filter_anisotropic","ERR_VAO_NOT_SUPPORTED","isWebGL2","gl","getExtensionData","extension","webgl2","ext","getExtension","WEBGL_CONTEXT_POLYFILLS","meta","suffix","createVertexArray","deleteVertexArray","bindVertexArray","isVertexArray","vertexAttribDivisor","location","divisor","drawElementsInstanced","drawArraysInstanced","drawBuffers","createQuery","deleteQuery","beginQuery","endQuery","getQuery","handle","pname","getQueryObject","getQueryParameter","queryCounter","readBuffer","originalFunc","attachment","getVertexAttrib","result","undefined","getProgramParameter","program","getInternalformatParameter","target","format","Int32Array","getTexParameter","extensions","luma","TEXTURE_MAX_ANISOTROPY_EXT","getParameter","getParameterPolyfill","hint","value","initializeExtensions","EXTENSIONS","getSupportedExtensions","polyfillExtension","target2","defaults","Object","keys","forEach","key","extKey","polyfill","bind","installOverrides","OVERRIDES","polyfillContext","polyfilled","global_","global","window"],"mappings":"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","sourcesContent":["// WebGL1/WebGL2 extension polyfill support\n//\n// Provides a function that creates polyfills for WebGL2 functions based\n// on available extensions and installs them on a supplied target (could be\n// the WebGLContext or its prototype, or a separate object).\n//\n// This is intended to be a stand-alone file with minimal dependencies,\n// easy to reuse or repurpose in other projects.\n\n/* eslint-disable camelcase, brace-style */\nimport GL from '../constants';\nimport {getParameterPolyfill} from './polyfill-get-parameter';\n// import polyfillVertexArrayObject from './polyfill-vertex-array-object';\n// import {WebGLRenderingContext} from './webgl-rendering-context';\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'luma.gl: assertion failed.');\n  }\n}\n\nconst OES_vertex_array_object = 'OES_vertex_array_object';\nconst ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\n\nconst ERR_VAO_NOT_SUPPORTED =\n  'VertexArray requires WebGL2 or OES_vertex_array_object extension';\n\n// Return true if WebGL2 context\nfunction isWebGL2(gl) {\n  return gl && gl.TEXTURE_BINDING_3D === GL.TEXTURE_BINDING_3D;\n}\n\n// Return object with webgl2 flag and an extension\nfunction getExtensionData(gl, extension) {\n  return {\n    webgl2: isWebGL2(gl),\n    ext: gl.getExtension(extension)\n  };\n}\n\n// function mapExtensionConstant(gl, constant) {\n//   switch (constant) {\n//   case ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES: return GL.FRAGMENT_SHADER_DERIVATIVE_HINT;\n//   }\n// }\n\nconst WEBGL_CONTEXT_POLYFILLS = {\n  // POLYFILL TABLE\n  [OES_vertex_array_object]: {\n    meta: {suffix: 'OES'},\n    // NEW METHODS\n    createVertexArray: () => { assert(false, ERR_VAO_NOT_SUPPORTED); },\n    deleteVertexArray: () => {},\n    bindVertexArray: () => {},\n    isVertexArray: () => false\n  },\n  [ANGLE_instanced_arrays]: {\n    meta: {\n      suffix: 'ANGLE'\n      // constants: {\n      //   VERTEX_ATTRIB_ARRAY_DIVISOR: 'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE'\n      // }\n    },\n    vertexAttribDivisor(location, divisor) {\n      // Accept divisor 0 even if instancing is not supported (0 = no instancing)\n      assert(divisor === 0, 'WebGL instanced rendering not supported');\n    },\n    drawElementsInstanced: () => {},\n    drawArraysInstanced: () => {}\n  },\n  [WEBGL_draw_buffers]: {\n    meta: {\n      suffix: 'WEBGL'\n    },\n    drawBuffers: () => { assert(false); }\n  },\n  [EXT_disjoint_timer_query]: {\n    meta: {suffix: 'EXT'},\n    // WebGL1: Polyfills the WebGL2 Query API\n    createQuery: () => { assert(false); },\n    deleteQuery: () => { assert(false); },\n    beginQuery: () => { assert(false); },\n    endQuery: () => {},\n    getQuery(handle, pname) { return this.getQueryObject(handle, pname); },\n    // The WebGL1 extension uses getQueryObject rather then getQueryParameter\n    getQueryParameter(handle, pname) { return this.getQueryObject(handle, pname); },\n    // plus the additional `queryCounter` method\n    queryCounter: () => {},\n    getQueryObject: () => {}\n  },\n  // WebGL2: Adds `queryCounter` to the query API\n  [EXT_disjoint_timer_query_webgl2]: {\n    meta: {suffix: 'EXT'},\n    // install `queryCounter`\n    // `null` avoids overwriting WebGL1 `queryCounter` if the WebGL2 extension is not available\n    queryCounter: null\n  },\n  OVERRIDES: {\n    // Ensure readBuffer is a no-op\n    readBuffer: (gl, originalFunc, attachment) => {\n      if (isWebGL2(gl)) {\n        originalFunc(attachment);\n      } else {\n        // assert(attachment !== GL_COLOR_ATTACHMENT0 && attachment !== GL_FRONT);\n      }\n    },\n    // Override for getVertexAttrib that returns sane values for non-WebGL1 constants\n    getVertexAttrib: (gl, originalFunc, location, pname) => {\n      // const gl = this; // eslint-disable-line\n      const {webgl2, ext} = getExtensionData(gl, ANGLE_instanced_arrays);\n\n      let result;\n      switch (pname) {\n      // WebGL1 attributes will never be integer\n      case GL.VERTEX_ATTRIB_ARRAY_INTEGER: result = !webgl2 ? false : undefined; break;\n        // if instancing is not available, return 0 meaning divisor has not been set\n      case GL.VERTEX_ATTRIB_ARRAY_DIVISOR: result = !webgl2 && !ext ? 0 : undefined; break;\n      default:\n      }\n\n      return result !== undefined ? result : originalFunc(location, pname);\n    },\n    // Handle transform feedback and uniform block queries in WebGL1\n    getProgramParameter: (gl, originalFunc, program, pname) => {\n      if (!isWebGL2(gl)) {\n        switch (pname) {\n        case GL.TRANSFORM_FEEDBACK_BUFFER_MODE: return GL.SEPARATE_ATTRIBS;\n        case GL.TRANSFORM_FEEDBACK_VARYINGS: return 0;\n        case GL.ACTIVE_UNIFORM_BLOCKS: return 0;\n        default:\n        }\n      }\n      return originalFunc(program, pname);\n    },\n    getInternalformatParameter: (gl, originalFunc, target, format, pname) => {\n      if (!isWebGL2(gl)) {\n        switch (pname) {\n        case GL.SAMPLES:\n          return new Int32Array([0]);\n        default:\n        }\n      }\n      return gl.getInternalformatParameter(target, format, pname);\n    },\n    getTexParameter(gl, originalFunc, target, pname) {\n      switch (pname) {\n      case GL.TEXTURE_MAX_ANISOTROPY_EXT:\n        const {extensions} = gl.luma;\n        const ext = extensions[EXT_texture_filter_anisotropic];\n        pname = (ext && ext.TEXTURE_MAX_ANISOTROPY_EXT) || GL.TEXTURE_MAX_ANISOTROPY_EXT;\n        break;\n      default:\n      }\n      return originalFunc(target, pname);\n    },\n    getParameter: getParameterPolyfill,\n    hint(gl, originalFunc, pname, value) {\n      // TODO - handle GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n      // switch (pname) {\n      // case GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n      // }\n      return originalFunc(pname, value);\n    }\n  }\n};\n\nfunction initializeExtensions(gl) {\n  gl.luma.extensions = {};\n  const EXTENSIONS = gl.getSupportedExtensions();\n  for (const extension of EXTENSIONS) {\n    gl.luma[extension] = gl.getExtension(extension);\n  }\n}\n\n// Polyfills a single WebGL extension into the `target` object\nfunction polyfillExtension(gl, {extension, target, target2}) {\n  const defaults = WEBGL_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n\n  const {meta = {}} = defaults;\n  const {suffix = ''} = meta;\n\n  const ext = gl.getExtension(extension);\n\n  Object.keys(defaults).forEach(key => {\n    const extKey = `${key}${suffix}`;\n\n    let polyfill = null;\n    if (key === 'meta') {\n      // ignore\n    } else if (typeof gl[key] === 'function') {\n      // WebGL2 implementation is already\n    } else if (ext && typeof ext[extKey] === 'function') {\n      // pick extension implemenentation,if available\n      polyfill = (...args) => ext[extKey](...args);\n    } else if (typeof defaults[key] === 'function') {\n      // pick the mock implementation, if no implementation was detected\n      polyfill = defaults[key].bind(target);\n    }\n\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\n// Install simple overrides (mostly get* functions)\nfunction installOverrides(gl, {target, target2}) {\n  const {OVERRIDES} = WEBGL_CONTEXT_POLYFILLS;\n  Object.keys(OVERRIDES).forEach(key => {\n    if (typeof OVERRIDES[key] === 'function') {\n      // install an override, if no implementation was detected\n      const originalFunc = gl[key] ? gl[key].bind(gl) : () => {};\n      const polyfill = OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\n// Registers polyfill or mock functions for all known extensions\nexport default function polyfillContext(gl) {\n  // polyfillVertexArrayObject(WebGLRenderingContext, gl);\n  gl.luma = gl.luma || {};\n  initializeExtensions(gl);\n  if (!gl.luma.polyfilled) {\n    for (const extension in WEBGL_CONTEXT_POLYFILLS) {\n      if (extension !== 'overrides') {\n        polyfillExtension(gl, {extension, target: gl.luma, target2: gl});\n      }\n    }\n    installOverrides(gl, {target: gl.luma, target2: gl});\n    gl.luma.polyfilled = true;\n  }\n  return gl;\n}\n\n/* global window, global */\nconst global_ = typeof global !== 'undefined' ? global : window;\nglobal_.polyfillContext = polyfillContext;\n"],"file":"polyfill-context.js"}