{"version":3,"sources":["../../../src/core/animation-loop-proxy.js"],"names":["AnimationLoop","getPageLoadPromise","createCanvas","requestAnimationFrame","cancelAnimationFrame","AnimationLoopProxy","createWorker","opts","self","animationLoop","Object","assign","offScreen","useDevicePixels","autoResizeDrawingBuffer","canvas","addEventListener","evt","data","command","start","stop","width","height","constructor","worker","onInitialize","onFinalize","props","_stopped","_animationFrameId","_startPromise","_updateFrame","bind","then","_createAndTransferCanvas","postMessage","_resizeCanvasDrawingBuffer","screenCanvas","transferControlToOffscreen","onError","offscreenCanvas","devicePixelRatio","window","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["/* global window */\nimport AnimationLoop from './animation-loop';\nimport {getPageLoadPromise, createCanvas} from '../webgl-context';\nimport {requestAnimationFrame, cancelAnimationFrame} from '../webgl-utils';\n\nexport default class AnimationLoopProxy {\n\n  // Create the script for the rendering worker.\n  // @param opts {object} - options to construct an AnimationLoop instance\n  static createWorker(opts) {\n    return self => {\n\n      self.animationLoop = new AnimationLoop(Object.assign({}, opts, {\n        offScreen: true,\n        // Prevent the animation loop from trying to access DOM properties\n        useDevicePixels: false,\n        autoResizeDrawingBuffer: false\n      }));\n      self.canvas = null;\n\n      self.addEventListener('message', evt => {\n        const {animationLoop} = self;\n\n        switch (evt.data.command) {\n\n        case 'start':\n          self.canvas = evt.data.opts.canvas;\n          animationLoop.start(evt.data.opts);\n          break;\n\n        case 'stop':\n          animationLoop.stop();\n          break;\n\n        case 'resize':\n          self.canvas.width = evt.data.width;\n          self.canvas.height = evt.data.height;\n          break;\n\n        default:\n        }\n\n      });\n\n    };\n  }\n\n  /*\n   * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context\n   */\n  constructor({\n    worker,\n    onInitialize = () => {},\n    onFinalize = () => {},\n    useDevicePixels = true,\n    autoResizeDrawingBuffer = true\n  }) {\n    this.props = {\n      worker,\n      onInitialize,\n      onFinalize,\n      autoResizeDrawingBuffer,\n      useDevicePixels\n    };\n\n    // state\n    this.canvas = null;\n    this.width = null;\n    this.height = null;\n\n    this._stopped = true;\n    this._animationFrameId = null;\n    this._startPromise = null;\n\n    // bind methods\n    this._updateFrame = this._updateFrame.bind(this);\n  }\n\n  /* Public methods */\n\n  // Starts a render loop if not already running\n  start(opts = {}) {\n    this._stopped = false;\n    // console.debug(`Starting ${this.constructor.name}`);\n    if (!this._animationFrameId) {\n      // Wait for start promise before rendering frame\n      this._startPromise = getPageLoadPromise()\n      .then(() => {\n        this._createAndTransferCanvas(opts);\n        return this.props.onInitialize(this);\n      })\n      .then(() => {\n        if (!this._stopped) {\n          this._animationFrameId = requestAnimationFrame(this._updateFrame);\n        }\n      });\n    }\n    return this;\n  }\n\n  // Stops a render loop if already running, finalizing\n  stop() {\n    if (this._animationFrameId) {\n      cancelAnimationFrame(this._animationFrameId);\n      this._animationFrameId = null;\n      this._stopped = true;\n      this.props.onFinalize(this);\n    }\n    this.props.worker.postMessage({command: 'stop'});\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _updateFrame() {\n    this._resizeCanvasDrawingBuffer();\n    this._animationFrameId = requestAnimationFrame(this._updateFrame);\n  }\n\n  _createAndTransferCanvas(opts) {\n    // Create a canvas on the main thread\n    const screenCanvas = createCanvas(opts);\n\n    // Create an offscreen canvas controlling the main canvas\n    if (!screenCanvas.transferControlToOffscreen) {\n      onError('OffscreenCanvas is not available. Enable Experimental canvas features in chrome://flags'); // eslint-disable-line\n    }\n    const offscreenCanvas = screenCanvas.transferControlToOffscreen();\n\n    // Transfer the offscreen canvas to the worker\n    this.props.worker.postMessage({\n      command: 'start',\n      opts: Object.assign({}, opts, {canvas: offscreenCanvas})\n    }, [offscreenCanvas]);\n\n    // store the main canvas on the local thread\n    this.canvas = screenCanvas;\n  }\n\n  _resizeCanvasDrawingBuffer() {\n    if (this.props.autoResizeDrawingBuffer) {\n      const devicePixelRatio = this.props.useDevicePixels ? (window.devicePixelRatio || 1) : 1;\n      const width = this.canvas.clientWidth * devicePixelRatio;\n      const height = this.canvas.clientHeight * devicePixelRatio;\n\n      if (this.width !== width || this.height !== height) {\n        this.width = width;\n        this.height = height;\n        this.props.worker.postMessage({\n          command: 'resize',\n          width,\n          height\n        });\n      }\n    }\n  }\n}\n"],"file":"animation-loop-proxy.js"}