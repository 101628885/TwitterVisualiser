{"version":3,"sources":["../../../src/core/group.js"],"names":["Object3D","Matrix4","assert","Group","constructor","opts","children","every","child","add","Array","isArray","push","remove","indexOf","splice","removeAll","traverse","visitor","modelMatrix","matrix","multiplyRight","result","traverseReverse","i","length"],"mappings":"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","sourcesContent":["import Object3D from './object-3d';\nimport {Matrix4} from 'math.gl';\nimport assert from '../utils/assert';\n\nexport default class Group extends Object3D {\n  constructor(opts = {}) {\n    const {children = []} = opts;\n    children.every(child => assert(child instanceof Object3D));\n    super(opts);\n    this.children = children;\n  }\n\n  // Unpacks arrays and nested arrays of children\n  add(...children) {\n    for (const child of children) {\n      if (Array.isArray(child)) {\n        this.add(...child);\n      } else {\n        this.children.push(child);\n      }\n    }\n    return this;\n  }\n\n  remove(child) {\n    const children = this.children;\n    const indexOf = children.indexOf(child);\n    if (indexOf > -1) {\n      children.splice(indexOf, 1);\n    }\n    return this;\n  }\n\n  removeAll() {\n    this.children = [];\n    return this;\n  }\n\n  // If visitor returns a truthy value, traversal will be aborted and that value\n  // will be returned from `traverse`. Otherwise `traverse` will return null.\n  traverse(visitor, {modelMatrix = new Matrix4()} = {}) {\n    for (const child of this.children) {\n      const {matrix} = child;\n      modelMatrix = modelMatrix.multiplyRight(matrix);\n      let result;\n      if (child instanceof Group) {\n        result = child.traverse(visitor, {modelMatrix});\n      } else {\n        // child.setUniforms({modelMatrix});\n        result = visitor(child, {});\n      }\n      // Abort if a result was returned\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n\n  // If visitor returns a truthy value, traversal will be aborted and that value\n  // will be returned from `traverseReverse`. Otherwise `traverseReverse` will return null.\n  traverseReverse(visitor, {modelMatrix = new Matrix4()} = {}) {\n    for (let i = this.children.length - 1; i >= 0; --i) {\n      const child = this.children[i];\n      const {matrix} = child;\n      modelMatrix = modelMatrix.multiplyRight(matrix);\n      let result;\n      if (child instanceof Group) {\n        result = child.traverseReverse(visitor, {modelMatrix});\n      } else {\n        // child.setUniforms({modelMatrix});\n        result = visitor(child, {});\n      }\n      // Abort if a result was returned\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n}\n"],"file":"group.js"}