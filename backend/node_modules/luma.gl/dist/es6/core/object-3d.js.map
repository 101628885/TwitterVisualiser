{"version":3,"sources":["../../../src/core/object-3d.js"],"names":["uid","Vector3","Matrix4","assert","Object3D","constructor","id","display","position","rotation","scale","matrix","name","userData","setPosition","length","setRotation","setScale","setMatrixComponents","update","updateMatrix","pos","rot","identity","translate","rotateXYZ","getCoordinateUniforms","viewMatrix","modelMatrix","worldMatrix","multiplyRight","worldInverse","invert","worldInverseTranspose","transpose","objectMatrix","worldInverseMatrix","worldInverseTransposeMatrix","transform","parent","endPosition","set","endRotation","endScale","add","ch","children","i"],"mappings":"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","sourcesContent":["import {uid} from '../utils';\nimport {Vector3, Matrix4} from 'math.gl';\nimport assert from '../utils/assert';\n\nexport default class Object3D {\n\n  constructor({id, display = true}) {\n    // model position, rotation, scale and all in all matrix\n    this.position = new Vector3();\n    this.rotation = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.matrix = new Matrix4();\n\n    // whether to display the object at all\n    this.id = id || uid(this.constructor.name);\n    this.display = true;\n    this.userData = {};\n  }\n\n  setPosition(position) {\n    assert(position.length === 3, 'setPosition requires vector argument');\n    this.position = position;\n    return this;\n  }\n\n  setRotation(rotation) {\n    assert(rotation.length === 3, 'setRotation requires vector argument');\n    this.rotation = rotation;\n    return this;\n  }\n\n  setScale(scale) {\n    assert(scale.length === 3, 'setScale requires vector argument');\n    this.scale = scale;\n    return this;\n  }\n\n  setMatrixComponents({position, rotation, scale, update = true}) {\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    if (update) {\n      this.updateMatrix();\n    }\n    return this;\n  }\n\n  updateMatrix() {\n    const pos = this.position;\n    const rot = this.rotation;\n    const scale = this.scale;\n\n    this.matrix.identity();\n    this.matrix.translate(pos);\n    this.matrix.rotateXYZ(rot);\n    this.matrix.scale(scale);\n    return this;\n  }\n\n  update({position, rotation, scale} = {}) {\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    this.updateMatrix();\n    return this;\n  }\n\n  getCoordinateUniforms(viewMatrix, modelMatrix) {\n    // TODO - solve multiple class problem\n    // assert(viewMatrix instanceof Matrix4);\n    assert(viewMatrix);\n    modelMatrix = modelMatrix || this.matrix;\n    const worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n    const worldInverse = worldMatrix.invert();\n    const worldInverseTranspose = worldInverse.transpose();\n\n    return {\n      viewMatrix,\n      modelMatrix,\n      objectMatrix: modelMatrix,\n      worldMatrix,\n      worldInverseMatrix: worldInverse,\n      worldInverseTransposeMatrix: worldInverseTranspose\n    };\n  }\n\n  // TODO - copied code, not yet vetted\n  transform() {\n\n    if (!this.parent) {\n      this.endPosition.set(this.position);\n      this.endRotation.set(this.rotation);\n      this.endScale.set(this.scale);\n    } else {\n      const parent = this.parent;\n      this.endPosition.set(this.position.add(parent.endPosition));\n      this.endRotation.set(this.rotation.add(parent.endRotation));\n      this.endScale.set(this.scale.add(parent.endScale));\n    }\n\n    const ch = this.children;\n    for (let i = 0; i < ch.length; ++i) {\n      ch[i].transform();\n    }\n\n    return this;\n  }\n}\n"],"file":"object-3d.js"}