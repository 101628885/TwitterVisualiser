{"version":3,"sources":["../../../src/core/transform.js"],"names":["Model","Buffer","TransformFeedback","isWebGL2","assertWebGL2Context","getShaderVersion","assert","log","FS100","FS300","Transform","isSupported","gl","constructor","props","model","currentIndex","sourceBuffers","Array","feedbackBuffers","transformFeedbacks","_buffersCreated","_initialize","Object","seal","delete","name","elementCount","getVertexCount","getBuffer","varyingName","run","uniforms","unbindModels","setAttributes","transform","transformFeedback","parameters","swapBuffers","feedbackMap","update","warn","setVertexCount","bufferName","assign","_createFeedbackBuffers","setBuffers","_setupSwapBuffers","destinationBuffers","sourceDestinationMap","deprecated","vs","varyings","isArray","varyingsArray","values","_setupBuffers","_buildModel","id","drawMode","current","sourceBufferName","feedbackBufferName","sourceBuffer","bytes","type","usage","accessor","buffer","next","fs","vertexCount","program","buffers"],"mappings":"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","sourcesContent":["import GL from '../constants';\nimport Model from './model';\nimport Buffer from '../webgl/buffer';\nimport TransformFeedback from '../webgl/transform-feedback';\nimport {isWebGL2, assertWebGL2Context, getShaderVersion} from '../webgl-utils';\nimport assert from '../utils/assert';\nimport {log} from '../utils';\n\nconst FS100 = 'void main() {}';\nconst FS300 = `#version 300 es\\n${FS100}`;\n\nexport default class Transform {\n\n  static isSupported(gl) {\n    // For now WebGL2 only\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGL2Context(gl);\n\n    this.gl = gl;\n    this.model = null;\n    this.currentIndex = 0;\n    this.sourceBuffers = new Array(2);\n    this.feedbackBuffers = new Array(2);\n    this.transformFeedbacks = new Array(2);\n    this._buffersCreated = {};\n\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  // Delete owned resources.\n  delete() {\n    for (const name in this._buffersCreated) {\n      this._buffersCreated[name].delete();\n    }\n    this.model.delete();\n  }\n\n  get elementCount() {\n    return this.model.getVertexCount();\n  }\n\n  // Return Buffer object for given varying name.\n  getBuffer(varyingName = null) {\n    assert(varyingName && this.feedbackBuffers[this.currentIndex][varyingName]);\n    return this.feedbackBuffers[this.currentIndex][varyingName];\n  }\n\n  // Run one transform feedback loop.\n  run({uniforms = {}, unbindModels = []} = {}) {\n    this.model.setAttributes(this.sourceBuffers[this.currentIndex]);\n    this.model.transform({\n      transformFeedback: this.transformFeedbacks[this.currentIndex],\n      parameters: {[GL.RASTERIZER_DISCARD]: true},\n      uniforms,\n      unbindModels\n    });\n  }\n\n  // Swap source and destination buffers.\n  swapBuffers() {\n    assert(this.feedbackMap);\n    this.currentIndex = (this.currentIndex + 1) % 2;\n  }\n\n  // Update some or all buffer bindings.\n  update({sourceBuffers = null, feedbackBuffers = null, elementCount = this.elementCount}) {\n    if (!sourceBuffers && !feedbackBuffers) {\n      log.warn('Transform : no buffers updated')();\n      return this;\n    }\n\n    this.model.setVertexCount(elementCount);\n\n    for (const bufferName in feedbackBuffers) {\n      assert(feedbackBuffers[bufferName] instanceof Buffer);\n    }\n\n    const {currentIndex} = this;\n    Object.assign(this.sourceBuffers[currentIndex], sourceBuffers);\n    Object.assign(this.feedbackBuffers[currentIndex], feedbackBuffers);\n    this._createFeedbackBuffers({feedbackBuffers});\n    this.transformFeedbacks[currentIndex].setBuffers(this.feedbackBuffers[currentIndex]);\n\n    // Buffers have changed, need to re-setup swap buffers.\n    this._setupSwapBuffers();\n    return this;\n  }\n\n  // Private\n\n  /* eslint-disable complexity */\n  _initialize(props = {}) {\n    let {feedbackBuffers, feedbackMap} = props;\n    const {destinationBuffers, sourceDestinationMap} = props;\n    if (destinationBuffers) {\n      log.deprecated('destinationBuffers', 'feedbackBuffers')();\n      feedbackBuffers = feedbackBuffers || destinationBuffers;\n    }\n    if (sourceDestinationMap) {\n      log.deprecated('sourceDestinationMap', 'feedbackMap')();\n      feedbackMap = feedbackMap || sourceDestinationMap;\n    }\n\n    const {sourceBuffers, vs, elementCount} = props;\n    assert(sourceBuffers && vs && elementCount >= 0);\n    // If feedbackBuffers are not provided, sourceDestinationMap must be provided\n    // to create destinaitonBuffers with layout of corresponding source buffer.\n    assert(feedbackBuffers || feedbackMap, ' Transform needs feedbackBuffers or feedbackMap');\n    for (const bufferName in feedbackBuffers || {}) {\n      assert(feedbackBuffers[bufferName] instanceof Buffer);\n    }\n\n    const {varyings} = props;\n    // If varyings are not provided feedbackMap must be provided to deduce varyings\n    assert(Array.isArray(varyings) || feedbackMap);\n    let varyingsArray = varyings;\n    if (!Array.isArray(varyings)) {\n      varyingsArray = Object.values(feedbackMap);\n    }\n\n    this.feedbackMap = feedbackMap;\n\n    this._setupBuffers({sourceBuffers, feedbackBuffers});\n    this._setupSwapBuffers();\n    this._buildModel(Object.assign({}, props, {\n      id: props.id || 'transform-model',\n      drawMode: props.drawMode || GL.POINTS,\n      varyings: varyingsArray\n    }));\n  }\n  /* eslint-enable complexity */\n\n  // setup source and destination buffers\n  _setupBuffers({sourceBuffers = null, feedbackBuffers = null}) {\n    this.sourceBuffers[0] = Object.assign({}, sourceBuffers);\n    this.feedbackBuffers[0] = Object.assign({}, feedbackBuffers);\n    this._createFeedbackBuffers({feedbackBuffers});\n    this.sourceBuffers[1] = {};\n    this.feedbackBuffers[1] = {};\n  }\n\n  // auto create any feedback buffers\n  _createFeedbackBuffers({feedbackBuffers}) {\n    if (!this.feedbackMap) {\n      // feedbackMap required to auto create buffers.\n      return;\n    }\n    const current = this.currentIndex;\n    for (const sourceBufferName in this.feedbackMap) {\n      const feedbackBufferName = this.feedbackMap[sourceBufferName];\n      if (!feedbackBuffers || !feedbackBuffers[feedbackBufferName]) {\n        // Create new buffer with same layout and settings as source buffer\n        const sourceBuffer = this.sourceBuffers[current][sourceBufferName];\n        const {bytes, type, usage, accessor} = sourceBuffer;\n        const buffer = new Buffer(this.gl, {bytes, type, usage, accessor});\n\n        if (this._buffersCreated[feedbackBufferName]) {\n          this._buffersCreated[feedbackBufferName].delete();\n          this._buffersCreated[feedbackBufferName] = buffer;\n        }\n        this.feedbackBuffers[current][feedbackBufferName] = buffer;\n      }\n    }\n  }\n\n  // setup buffers for swapping.\n  // Second set of source and feedback objects are setup to point\n  // to corresponding feedback and source buffers.\n  _setupSwapBuffers() {\n    if (!this.feedbackMap) {\n      // feedbackMap required set up swap buffers.\n      return;\n    }\n    const current = this.currentIndex;\n    const next = (current + 1) % 2;\n\n    for (const sourceBufferName in this.feedbackMap) {\n      const feedbackBufferName = this.feedbackMap[sourceBufferName];\n\n      this.sourceBuffers[next][sourceBufferName] =\n        this.feedbackBuffers[current][feedbackBufferName];\n      this.feedbackBuffers[next][feedbackBufferName] =\n        this.sourceBuffers[current][sourceBufferName];\n\n      // make sure the new destination buffer is a Buffer object\n      assert(this.feedbackBuffers[next][feedbackBufferName] instanceof Buffer);\n    }\n\n    // When triggered by `update()` TranformFeedback objects are already set up,\n    // if so update buffers\n    if (this.transformFeedbacks[next]) {\n      this.transformFeedbacks[next].setBuffers(this.feedbackBuffers[next]);\n    }\n  }\n\n  // build Model and TransformFeedback objects\n  _buildModel(props = {}) {\n    const {vs, elementCount} = props;\n    // use a minimal fragment shader with matching version of vertex shader.\n    const fs = getShaderVersion(vs) === 300 ? FS300 : FS100;\n\n    this.model = new Model(this.gl, Object.assign({}, props, {\n      fs,\n      vertexCount: elementCount\n    }));\n\n    this.transformFeedbacks[0] = new TransformFeedback(this.gl, {\n      program: this.model.program,\n      buffers: this.feedbackBuffers[0]\n    });\n\n    // If buffers are swappable setup second transform feedback object.\n    if (this.feedbackMap) {\n      this.transformFeedbacks[1] = new TransformFeedback(this.gl, {\n        program: this.model.program,\n        buffers: this.feedbackBuffers[1]\n      });\n    }\n  }\n}\n"],"file":"transform.js"}