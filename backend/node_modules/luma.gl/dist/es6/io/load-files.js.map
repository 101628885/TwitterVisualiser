{"version":3,"sources":["../../../src/io/load-files.js"],"names":["assert","loadFile","loadImage","Program","Texture2D","Model","Geometry","noop","loadTexture","gl","url","opts","urls","onProgress","loadImages","Object","assign","then","images","map","img","i","id","data","loadFiles","every","count","Promise","all","promise","file","progress","length","total","loadTextures","params","Array","isArray","parameters","undefined","loadProgram","vs","fs","vsText","fsText","loadModel","parseModel","program","json","parseJSON","attributes","modelOptions","key","value","Uint16Array","Float32Array","geometry","JSON","parse","error","Error"],"mappings":"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","sourcesContent":["/* eslint-disable guard-for-in, complexity, no-try-catch */\nimport assert from '../utils/assert';\nimport {loadFile, loadImage} from './browser-load';\nimport {Program, Texture2D} from '../webgl';\nimport {Model} from '../core';\nimport {Geometry} from '../geometry';\n\nfunction noop() {}\n\nexport function loadTexture(gl, url, opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(typeof url === 'string', 'loadTexture: url must be string');\n\n  return loadImages(Object.assign({urls, onProgress}, opts))\n  .then(images => images.map((img, i) => {\n    return new Texture2D(gl, Object.assign({id: urls[i]}, opts, {data: img}));\n  }));\n}\n\n/*\n * Loads (Requests) multiple files asynchronously\n */\nexport function loadFiles(opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(urls.every(url => typeof url === 'string'), 'loadImages: {urls} must be array of strings');\n  let count = 0;\n  return Promise.all(urls.map(\n    url => {\n      const promise = loadFile(Object.assign({url}, opts));\n      promise.then(file => onProgress({\n        progress: ++count / urls.length,\n        count,\n        total: urls.length,\n        url\n      }));\n      return promise;\n    }\n  ));\n}\n\n/*\n * Loads (requests) multiple images asynchronously\n */\nexport function loadImages(opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(urls.every(url => typeof url === 'string'), 'loadImages: {urls} must be array of strings');\n  let count = 0;\n  return Promise.all(urls.map(\n    url => {\n      const promise = loadImage(url, opts);\n      promise.then(file => onProgress({\n        progress: ++count / urls.length,\n        count,\n        total: urls.length,\n        url\n      }));\n      return promise;\n    }\n  ));\n}\n\nexport function loadTextures(gl, opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(urls.every(url => typeof url === 'string'),\n    'loadTextures: {urls} must be array of strings');\n\n  return loadImages(Object.assign({urls, onProgress}, opts))\n  .then(images => images.map((img, i) => {\n    let params = Array.isArray(opts.parameters) ? opts.parameters[i] : opts.parameters;\n    params = params === undefined ? {} : params;\n    return new Texture2D(gl, Object.assign({id: urls[i]}, params, {data: img}));\n  }));\n}\n\nexport function loadProgram(gl, opts = {}) {\n  const {vs, fs, onProgress = noop} = opts;\n  return loadFiles(Object.assign({urls: [vs, fs], onProgress}, opts))\n  .then(\n    ([vsText, fsText]) => new Program(gl, Object.assign({vs: vsText, fs: fsText}, opts))\n  );\n}\n\n// Loads a simple JSON format\nexport function loadModel(gl, opts = {}) {\n  const {url, onProgress = noop} = opts;\n  return loadFiles(Object.assign({urls: [url], onProgress}, opts))\n  .then(([file]) => parseModel(gl, Object.assign({file}, opts)));\n}\n\nexport function parseModel(gl, opts = {}) {\n  const {file, program = new Program(gl)} = opts;\n  const json = typeof file === 'string' ? parseJSON(file) : file;\n  // Remove any attributes so that we can create a geometry\n  // TODO - change format to put these in geometry sub object?\n  const attributes = {};\n  const modelOptions = {};\n  for (const key in json) {\n    const value = json[key];\n    if (Array.isArray(value)) {\n      attributes[key] = key === 'indices' ? new Uint16Array(value) : new Float32Array(value);\n    } else {\n      modelOptions[key] = value;\n    }\n  }\n\n  return new Model(gl, Object.assign(\n    {program, geometry: new Geometry({attributes})},\n    modelOptions,\n    opts\n  ));\n}\n\nfunction parseJSON(file) {\n  try {\n    return JSON.parse(file);\n  } catch (error) {\n    throw new Error(`Failed to parse JSON: ${error}`);\n  }\n}\n"],"file":"load-files.js"}