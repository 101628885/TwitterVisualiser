{"version":3,"sources":["../../../src/multipass/picking-pass.js"],"names":["Pass","pickModels","PickingPass","constructor","gl","props","Object","assign","id","_renderPass","inputBuffer","animationProps","pickPosition","_mousePosition","mousePosition","useDevicePixels","model","models","updateModuleSettings","pickingSelectedColor","pickInfo","position","framebuffer","color"],"mappings":"AAOA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AAEA,eAAe,MAAMC,WAAN,SAA0BF,IAA1B,CAA+B;AAC5CG,EAAAA,WAAW,CAACC,EAAD,EAAKC,KAAK,GAAG,EAAb,EAAiB;AAC1B,UAAMD,EAAN,EAAUE,MAAM,CAACC,MAAP,CAAc;AAACC,MAAAA,EAAE,EAAE;AAAL,KAAd,EAAoCH,KAApC,CAAV;AACD;;AAEDI,EAAAA,WAAW,CAAC;AAACL,IAAAA,EAAD;AAAKM,IAAAA,WAAL;AAAkBC,IAAAA;AAAlB,GAAD,EAAoC;AAAA,UACtCN,KADsC,GAC7B,IAD6B,CACtCA,KADsC;AAE7C,UAAMO,YAAY,GAAGD,cAAc,GAAGA,cAAc,CAACE,cAAlB,GAAmCR,KAAK,CAACS,aAA5E;AACA,UAAMC,eAAe,GAAGJ,cAAc,GAAGA,cAAc,CAACI,eAAlB,GAAoCV,KAAK,CAACU,eAAhF;;AAGA,QAAI,CAACH,YAAL,EAAmB;AACjB,WAAK,MAAMI,KAAX,IAAoB,KAAKX,KAAL,CAAWY,MAA/B,EAAuC;AACrCD,QAAAA,KAAK,CAACE,oBAAN,CAA2B;AAACC,UAAAA,oBAAoB,EAAE;AAAvB,SAA3B;AACD;;AACD;AACD;;AAED,UAAMC,QAAQ,GAAGnB,UAAU,CAACG,EAAD,EAAK;AAC9Ba,MAAAA,MAAM,EAAE,KAAKZ,KAAL,CAAWY,MADW;AAE9BI,MAAAA,QAAQ,EAAET,YAFoB;AAG9BG,MAAAA,eAH8B;AAI9BO,MAAAA,WAAW,EAAEZ;AAJiB,KAAL,CAA3B;;AAQA,SAAK,MAAMM,KAAX,IAAoB,KAAKX,KAAL,CAAWY,MAA/B,EAAuC;AACrC,UAAIG,QAAQ,IAAIA,QAAQ,CAACJ,KAAT,KAAmBA,KAAnC,EAA0C;AACxC,cAAMG,oBAAoB,GAAIC,QAAQ,IAAIA,QAAQ,CAACG,KAAtB,IAAgC,IAA7D;AACAP,QAAAA,KAAK,CAACE,oBAAN,CAA2B;AAACC,UAAAA;AAAD,SAA3B;AACD;AACF;AACF;;AAhC2C","sourcesContent":["//\n// A pass that renders a given scene directly on screen or into the read buffer\n// for further processing.\n//\n// Attribution: This class and the multipass system were strongly inspired by\n// the THREE.js EffectComposer and *Pass classes\n\nimport Pass from './pass';\nimport pickModels from '../core/pick-models';\n\nexport default class PickingPass extends Pass {\n  constructor(gl, props = {}) {\n    super(gl, Object.assign({id: 'picking-pass'}, props));\n  }\n\n  _renderPass({gl, inputBuffer, animationProps}) {\n    const {props} = this;\n    const pickPosition = animationProps ? animationProps._mousePosition : props.mousePosition;\n    const useDevicePixels = animationProps ? animationProps.useDevicePixels : props.useDevicePixels;\n\n    // Clear picking position if not available\n    if (!pickPosition) {\n      for (const model of this.props.models) {\n        model.updateModuleSettings({pickingSelectedColor: null});\n      }\n      return;\n    }\n\n    const pickInfo = pickModels(gl, {\n      models: this.props.models,\n      position: pickPosition,\n      useDevicePixels,\n      framebuffer: inputBuffer // Use as temporary frame buffer\n    });\n\n    // Highlight it\n    for (const model of this.props.models) {\n      if (pickInfo && pickInfo.model === model) {\n        const pickingSelectedColor = (pickInfo && pickInfo.color) || null;\n        model.updateModuleSettings({pickingSelectedColor});\n      }\n    }\n  }\n}\n"],"file":"picking-pass.js"}