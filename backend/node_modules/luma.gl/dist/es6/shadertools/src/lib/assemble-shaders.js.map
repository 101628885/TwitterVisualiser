{"version":3,"sources":["../../../../../src/shadertools/src/lib/assemble-shaders.js"],"names":["VERTEX_SHADER","FRAGMENT_SHADER","resolveModules","getShaderModule","getPlatformShaderDefines","getVersionDefines","injectShader","assert","SHADER_TYPE","FRAGMENT_SHADER_PROLOGUE","assembleShaders","gl","opts","vs","fs","modules","assembleShader","Object","assign","source","type","getUniforms","assembleGetUniforms","assembleModuleMap","id","defines","inject","prologue","log","isVertex","sourceLines","split","glslVersion","versionLine","coreSource","indexOf","slice","join","assembledSource","getShaderName","getApplicationDefines","injectStandardStubs","module","name","checkDeprecations","moduleSource","getModuleSource","uniforms","moduleUniforms","result","moduleName","shaderModule","injectShaderName","count","sourceText","define","value","Number","isFinite","toUpperCase"],"mappings":"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","sourcesContent":["import {VERTEX_SHADER, FRAGMENT_SHADER} from './constants';\nimport {resolveModules, getShaderModule} from './resolve-modules';\nimport {getPlatformShaderDefines, getVersionDefines} from './platform-defines';\nimport injectShader from './inject-shader';\nimport assert from '../utils/assert';\n\nconst SHADER_TYPE = {\n  [VERTEX_SHADER]: 'vertex',\n  [FRAGMENT_SHADER]: 'fragment'\n};\n\n// Precision prologue to inject before functions are injected in shader\n// TODO - extract any existing prologue in the fragment source and move it up...\nconst FRAGMENT_SHADER_PROLOGUE = `\\\nprecision highp float;\n\n`;\n\n// Inject a list of modules\nexport function assembleShaders(gl, opts = {}) {\n  const {vs, fs} = opts;\n  const modules = resolveModules(opts.modules || []);\n  return {\n    gl,\n    vs: assembleShader(gl, Object.assign({}, opts, {source: vs, type: VERTEX_SHADER, modules})),\n    fs: assembleShader(gl, Object.assign({}, opts, {source: fs, type: FRAGMENT_SHADER, modules})),\n    getUniforms: assembleGetUniforms(modules),\n    modules: assembleModuleMap(modules)\n  };\n}\n\n// Pulls together complete source code for either a vertex or a fragment shader\n// adding prologues, requested module chunks, and any final injections.\nfunction assembleShader(gl, {\n  id,\n  source,\n  type,\n  modules = [],\n  defines = {},\n  inject = {},\n  prologue = true,\n  log\n}) {\n  assert(typeof source === 'string', 'shader source must be a string');\n\n  const isVertex = type === VERTEX_SHADER;\n\n  const sourceLines = source.split('\\n');\n  let glslVersion = 100;\n  let versionLine = '';\n  let coreSource = source;\n  // Extract any version directive string from source.\n  // TODO : keep all pre-processor statements at the begining of the shader.\n  if (sourceLines[0].indexOf('#version ') === 0) {\n    glslVersion = 300; // TODO - regexp that matches atual version number\n    versionLine = sourceLines[0];\n    coreSource = sourceLines.slice(1).join('\\n');\n  }\n\n  // Add platform defines (use these to work around platform-specific bugs and limitations)\n  // Add common defines (GLSL version compatibility, feature detection)\n  // Add precision declaration for fragment shaders\n  let assembledSource = prologue ? `\\\n${versionLine}\n${getShaderName({id, source, type})}\n${getPlatformShaderDefines(gl)}\n${getVersionDefines(gl, glslVersion, !isVertex)}\n${getApplicationDefines(defines)}\n${isVertex ? '' : FRAGMENT_SHADER_PROLOGUE}\n` : `${versionLine}\n`;\n\n  // Add source of dependent modules in resolved order\n  let injectStandardStubs = false;\n  for (const module of modules) {\n    switch (module.name) {\n    case 'inject':\n      injectStandardStubs = true;\n      break;\n\n    default:\n      module.checkDeprecations(coreSource, log);\n      const moduleSource = module.getModuleSource(type, glslVersion);\n      // Add the module source, and a #define that declares it presence\n      assembledSource += moduleSource;\n    }\n  }\n\n  // Add the version directive and actual source of this shader\n  assembledSource += coreSource;\n\n  // Apply any requested shader injections\n  assembledSource = injectShader(assembledSource, type, inject, injectStandardStubs);\n\n  return assembledSource;\n}\n\n// Returns a combined `getUniforms` covering the options for all the modules,\n// the created function will pass on options to the inidividual `getUniforms`\n// function of each shader module and combine the results into one object that\n// can be passed to setUniforms.\nfunction assembleGetUniforms(modules) {\n\n  return function getUniforms(opts) {\n    const uniforms = {};\n    for (const module of modules) {\n      // `modules` is already sorted by dependency level. This guarantees that\n      // modules have access to the uniforms that are generated by their dependencies.\n      const moduleUniforms = module.getUniforms(opts, uniforms);\n      Object.assign(uniforms, moduleUniforms);\n    }\n    return uniforms;\n  };\n\n}\n\n// Returns a map with module names as keys, resolving to their module definitions\n// The presence of a key indicates that the module is available in this program,\n// whether directly included, or through a dependency of some other module\nfunction assembleModuleMap(modules) {\n  const result = {};\n  for (const moduleName of modules) {\n    const shaderModule = getShaderModule(moduleName);\n    result[moduleName] = shaderModule;\n  }\n  return result;\n}\n\n// Generate \"glslify-compatible\" SHADER_NAME defines\n// These are understood by the GLSL error parsing function\n// If id is provided and no SHADER_NAME constant is present in source, create one\nfunction getShaderName({id, source, type}) {\n  const injectShaderName = id && typeof id === 'string' && source.indexOf('SHADER_NAME') === -1;\n  return injectShaderName ? `\n#define SHADER_NAME ${id}_${SHADER_TYPE[type]}\n\n` : '';\n}\n\n// Generates application defines from an object\nfunction getApplicationDefines(defines = {}) {\n  let count = 0;\n  let sourceText = '';\n  for (const define in defines) {\n    if (count === 0) {\n      sourceText += '\\n// APPLICATION DEFINES\\n';\n    }\n    count++;\n\n    const value = defines[define];\n    if (value || Number.isFinite(value)) {\n      sourceText += `#define ${define.toUpperCase()} ${defines[define]}\\n`;\n    }\n  }\n  if (count === 0) {\n    sourceText += '\\n';\n  }\n  return sourceText;\n}\n"],"file":"assemble-shaders.js"}