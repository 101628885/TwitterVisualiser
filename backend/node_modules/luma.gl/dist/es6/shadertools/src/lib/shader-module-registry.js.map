{"version":3,"sources":["../../../../../src/shadertools/src/lib/shader-module-registry.js"],"names":["ShaderModule","assert","ShaderModuleRegistry","constructor","shaderModules","defaultShaderModules","setDefaultShaderModules","modules","resolveModules","registerShaderModules","shaderModuleList","ignoreMultipleRegistrations","shaderModule","_registerShaderModule","getShaderModule","moduleOrName","module","map","name","dependencies","Error"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,iBAAzB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,eAAe,MAAMC,oBAAN,CAA2B;AACxCC,EAAAA,WAAW,GAAG;AACZ,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,oBAAL,GAA4B,EAA5B;AACD;;AAEDC,EAAAA,uBAAuB,CAACC,OAAD,EAAU;AAC/B,SAAKF,oBAAL,GAA4B,KAAKG,cAAL,CAAoBD,OAApB,CAA5B;AACD;;AAEDE,EAAAA,qBAAqB,CAACC,gBAAD,EAAmB;AAACC,IAAAA,2BAA2B,GAAG;AAA/B,MAAwC,EAA3D,EAA+D;AAClF,SAAK,MAAMC,YAAX,IAA2BF,gBAA3B,EAA6C;AAC3C,WAAKG,qBAAL,CAA2BD,YAA3B,EAAyCD,2BAAzC;AACD;AACF;;AAEDG,EAAAA,eAAe,CAACC,YAAD,EAAe;AAE5B,QAAIA,YAAY,YAAYf,YAA5B,EAA0C;AACxC,aAAOe,YAAP;AACD;;AAGD,QAAI,OAAOA,YAAP,KAAwB,QAA5B,EAAsC;AACpC,aAAO,KAAKF,qBAAL,CAA2BE,YAA3B,EAAyC,IAAzC,CAAP;AACD;;AAGD,UAAMC,MAAM,GAAG,KAAKZ,aAAL,CAAmBW,YAAnB,CAAf;;AACA,QAAI,CAACC,MAAL,EAAa;AACXf,MAAAA,MAAM,CAAC,KAAD,EAAS,yBAAwBc,YAAa,EAA9C,CAAN;AACD;;AACD,WAAOC,MAAP;AACD;;AAIDR,EAAAA,cAAc,CAACD,OAAD,EAAU;AACtB,WAAOA,OAAO,CAACU,GAAR,CAAYF,YAAY,IAAI,KAAKD,eAAL,CAAqBC,YAArB,CAA5B,CAAP;AACD;;AAIDF,EAAAA,qBAAqB,CAACG,MAAD,EAASL,2BAA2B,GAAG,KAAvC,EAA8C;AAEjE,QAAIK,MAAM,YAAYhB,YAAtB,EAAoC;AAClC,aAAOgB,MAAP;AACD;;AAEDf,IAAAA,MAAM,CAACe,MAAM,CAACE,IAAR,EAAc,2BAAd,CAAN;;AAEA,QAAI,CAAC,KAAKd,aAAL,CAAmBY,MAAM,CAACE,IAA1B,CAAD,IAAoCP,2BAAxC,EAAqE;AAEnEK,MAAAA,MAAM,GAAG,IAAIhB,YAAJ,CAAiBgB,MAAjB,CAAT;AACAA,MAAAA,MAAM,CAACG,YAAP,GAAsB,KAAKX,cAAL,CAAoBQ,MAAM,CAACG,YAA3B,CAAtB;AACA,WAAKf,aAAL,CAAmBY,MAAM,CAACE,IAA1B,IAAkCF,MAAlC;AACD,KALD,MAKO;AAEL,YAAM,IAAII,KAAJ,CAAW,iBAAgBJ,MAAM,CAACE,IAAK,qBAAvC,CAAN;AACD;;AAED,WAAO,KAAKd,aAAL,CAAmBY,MAAM,CAACE,IAA1B,CAAP;AACD;;AA9DuC","sourcesContent":["import ShaderModule from './shader-module';\nimport assert from '../utils/assert';\n\nexport default class ShaderModuleRegistry {\n  constructor() {\n    this.shaderModules = {};\n    this.defaultShaderModules = [];\n  }\n\n  setDefaultShaderModules(modules) {\n    this.defaultShaderModules = this.resolveModules(modules);\n  }\n\n  registerShaderModules(shaderModuleList, {ignoreMultipleRegistrations = false} = {}) {\n    for (const shaderModule of shaderModuleList) {\n      this._registerShaderModule(shaderModule, ignoreMultipleRegistrations);\n    }\n  }\n\n  getShaderModule(moduleOrName) {\n    // Check if \"inline\" module, return it\n    if (moduleOrName instanceof ShaderModule) {\n      return moduleOrName;\n    }\n\n    // Check if module descriptor\n    if (typeof moduleOrName !== 'string') {\n      return this._registerShaderModule(moduleOrName, true);\n    }\n\n    // Module name - Look up module\n    const module = this.shaderModules[moduleOrName];\n    if (!module) {\n      assert(false, `Unknown shader module ${moduleOrName}`);\n    }\n    return module;\n  }\n\n  // registers any supplied modules, resolves any names into modules\n  // returns a list of modules\n  resolveModules(modules) {\n    return modules.map(moduleOrName => this.getShaderModule(moduleOrName));\n  }\n\n  // PRIVATE API\n\n  _registerShaderModule(module, ignoreMultipleRegistrations = false) {\n    // Check if \"inline\" module, return it\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n\n    assert(module.name, 'shader module has no name');\n\n    if (!this.shaderModules[module.name] || ignoreMultipleRegistrations) {\n      // if ignoreMultipleRegistrations = true, we allow module to be re-registered\n      module = new ShaderModule(module);\n      module.dependencies = this.resolveModules(module.dependencies);\n      this.shaderModules[module.name] = module;\n    } else {\n      // TODO - instead verify that definition is not changing...\n      throw new Error(`shader module ${module.name} already registered`);\n    }\n\n    return this.shaderModules[module.name];\n  }\n}\n"],"file":"shader-module-registry.js"}