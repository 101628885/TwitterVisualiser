{"version":3,"sources":["../../../../../src/shadertools/src/lib/shader-module.js"],"names":["transpileShader","assert","VERTEX_SHADER","FRAGMENT_SHADER","ShaderModule","constructor","name","vs","fs","dependencies","getUniforms","deprecations","vertexShader","fragmentShader","getModuleUniforms","_parseDeprecationDefinitions","getModuleSource","type","targetGLSLVersion","moduleSource","toUpperCase","opts","uniforms","checkDeprecations","shaderSource","log","forEach","def","regex","test","deprecated","old","new","removed","RegExp"],"mappings":"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","sourcesContent":["import transpileShader from './transpile-shader';\nimport assert from '../utils/assert';\n\nconst VERTEX_SHADER = 'vs';\nconst FRAGMENT_SHADER = 'fs';\n\nexport default class ShaderModule {\n  constructor({\n    name,\n    vs,\n    fs,\n    dependencies = [],\n    getUniforms = () => ({}),\n    deprecations = [],\n    // DEPRECATED\n    vertexShader,\n    fragmentShader\n  }) {\n    assert(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n  }\n\n  // Extracts the source code chunk for the specified shader type from the named shader module\n  getModuleSource(type, targetGLSLVersion) {\n    let moduleSource;\n    switch (type) {\n    case VERTEX_SHADER:\n      moduleSource = transpileShader(this.vs || '', targetGLSLVersion, true);\n      break;\n    case FRAGMENT_SHADER:\n      moduleSource = transpileShader(this.fs || '', targetGLSLVersion, false);\n      break;\n    default:\n      assert(false);\n    }\n\n    if (typeof moduleSource !== 'string') {\n      return '';\n    }\n\n    return `\\\n#define MODULE_${this.name.toUpperCase()}\n${moduleSource}\\\n// END MODULE_${this.name}\n\n`;\n  }\n\n  getUniforms(opts, uniforms) {\n    return this.getModuleUniforms(opts, uniforms);\n  }\n\n  // Warn about deprecated uniforms or functions\n  checkDeprecations(shaderSource, log) {\n    this.deprecations.forEach(def => {\n      if (def.regex.test(shaderSource)) {\n        if (def.deprecated && log) {\n          log.deprecated(def.old, def.new)();\n        } else if (log) {\n          log.removed(def.old, def.new)();\n        }\n      }\n    });\n  }\n\n  _parseDeprecationDefinitions(deprecations = []) {\n    deprecations.forEach(def => {\n      switch (def.type) {\n      case 'function':\n        def.regex = new RegExp(`\\\\b${def.old}\\\\(`);\n        break;\n      default:\n        def.regex = new RegExp(`${def.type} ${def.old};`);\n      }\n    });\n\n    return deprecations;\n  }\n}\n"],"file":"shader-module.js"}