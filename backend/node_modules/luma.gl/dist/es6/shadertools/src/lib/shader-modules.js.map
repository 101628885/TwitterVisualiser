{"version":3,"sources":["../../../../../src/shadertools/src/lib/shader-modules.js"],"names":["assert","shaderModules","defaultShaderModules","registerShaderModules","shaderModuleList","ignoreMultipleRegistrations","shaderModule","registerShaderModule","setDefaultShaderModules","modules","getShaderModule","moduleOrName","name","resolveModules","moduleNames","map","module","getShaderDependencies","concat","result","getDependencyGraph","level","Object","keys","sort","a","b","Error","undefined","dependencies","parseDeprecationDefinitions","deprecations","forEach","def","type","regex","RegExp","old"],"mappings":"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","sourcesContent":["import assert from '../utils/assert';\n\nconst shaderModules = {};\nlet defaultShaderModules = [];\n\n/**\n * Registers an array of shader modules\n * @param {Object[]} shaderModuleList - Array of shader modules\n */\nexport function registerShaderModules(shaderModuleList, {\n  ignoreMultipleRegistrations = false\n} = {}) {\n  for (const shaderModule of shaderModuleList) {\n    registerShaderModule(shaderModule, {ignoreMultipleRegistrations});\n  }\n}\n\n/**\n * Registers an array of default shader modules. These will be concatenated\n * automatically at the end of any shader module list passed to\n * `assembleShaders` (plus `resolveModules` and `getShaderDependencies`)\n * @param {Object[]} modules - Array of shader modules\n */\nexport function setDefaultShaderModules(modules) {\n  defaultShaderModules = modules;\n}\n\n// Looks up a moduleName among registered modules and returns definition.\n// If \"inline\" module, returns it directly\nexport function getShaderModule(moduleOrName) {\n  // Check if \"inline\" module\n  if (typeof moduleOrName !== 'string') {\n    const shaderModule = moduleOrName;\n    assert(typeof shaderModule.name === 'string');\n    registerShaderModule(shaderModule, {ignoreMultipleRegistrations: true});\n    return shaderModule;\n  }\n\n  // Look up module\n  const shaderModule = shaderModules[moduleOrName];\n  if (!shaderModule) {\n    // console.log(`${moduleOrName} not in registered modules:`, shaderModules);\n    assert(false, `Unknown shader module ${moduleOrName}`);\n  }\n  return shaderModule;\n}\n\n// registers any supplied modules and returns a list of module names\nexport function resolveModules(modules) {\n  const moduleNames = modules.map(module => {\n    if (typeof module !== 'string') {\n      registerShaderModules([module], {ignoreMultipleRegistrations: true});\n      return module.name;\n    }\n    return module;\n  });\n\n  return getShaderDependencies(moduleNames);\n}\n\n/**\n * Takes a list of shader module names and returns a new list of\n * shader module names that includes all dependencies, sorted so\n * that modules that are dependencies of other modules come first.\n *\n * If the shader glsl code from the returned modules is concatenated\n * in the reverse order, it is guaranteed that all functions be resolved and\n * that all function and variable definitions come before use.\n *\n * @param {String[]} modules - Array of modules (inline modules or module names)\n * @return {String[]} - Array of modules\n */\nexport function getShaderDependencies(modules) {\n  modules = modules.concat(defaultShaderModules);\n\n  const result = {};\n  getDependencyGraph({\n    modules,\n    level: 0,\n    result\n  });\n\n  // Return a reverse sort so that dependencies come before the modules that use them\n  return Object.keys(result).sort((a, b) => result[b] - result[a]);\n}\n\n/**\n * Recursively checks module dpendencies to calculate dependency\n * level of each module.\n *\n * @param {String[]} modules - Array of modules\n * @param {Number} level - Current level\n * @return {result} - Map of module name to its level\n */\n// Adds another level of dependencies to the result map\nexport function getDependencyGraph({modules, level, result}) {\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  // Update level on all current modules\n  for (const moduleOrName of modules) {\n    const shaderModule = getShaderModule(moduleOrName);\n    if (result[shaderModule.name] === undefined || result[shaderModule.name] < level) {\n      result[shaderModule.name] = level;\n    }\n  }\n\n  // Recurse\n  for (const moduleOrName of modules) {\n    const shaderModule = getShaderModule(moduleOrName);\n\n    if (shaderModule.dependencies) {\n      getDependencyGraph({\n        modules: shaderModule.dependencies,\n        level: level + 1,\n        result\n      });\n    }\n  }\n\n  return result;\n}\n\n// PRIVATE API\n\nfunction parseDeprecationDefinitions(deprecations = []) {\n  deprecations.forEach(def => {\n    switch (def.type) {\n    case 'function':\n      def.regex = new RegExp(`\\\\b${def.old}\\\\(`);\n      break;\n    default:\n      def.regex = new RegExp(`${def.type} ${def.old};`);\n    }\n  });\n\n  return deprecations;\n}\n\nfunction registerShaderModule(shaderModule, {ignoreMultipleRegistrations = false}) {\n  assert(shaderModule.name, 'shader module has no name');\n  if (!ignoreMultipleRegistrations && shaderModules[shaderModule.name]) {\n    // TODO - instead verify that definition is not changing...\n    throw new Error(`shader module ${shaderModule.name} already registered`);\n  }\n  shaderModules[shaderModule.name] = shaderModule;\n  shaderModule.dependencies = shaderModule.dependencies || [];\n  shaderModule.deprecations = parseDeprecationDefinitions(shaderModule.deprecations);\n}\n"],"file":"shader-modules.js"}