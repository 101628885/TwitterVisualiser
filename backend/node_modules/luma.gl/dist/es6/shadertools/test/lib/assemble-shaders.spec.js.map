{"version":3,"sources":["../../../../../src/shadertools/test/lib/assemble-shaders.spec.js"],"names":["createGLContext","assembleShaders","picking","fp64","test","fixture","gl","VS_GLSL_300","FS_GLSL_300","t","ok","undefined","end","assembleResult","vs","fs","modules","equal","indexOf","testModuleSettings","pickingActive","is","getUniforms","testModule","name","opts","context","picking_uActive","dependencies"],"mappings":"AACA,SAAQA,eAAR,EAAyBC,eAAzB,EAA0CC,OAA1C,EAAmDC,IAAnD,QAA8D,SAA9D;AAGA,OAAOC,IAAP,MAAiB,YAAjB;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,EAAE,EAAEN,eAAe;AADL,CAAhB;AAIA,MAAMO,WAAW,GAAI;;;;;;;;CAArB;AASA,MAAMC,WAAW,GAAI;;;;;;;;;;CAArB;AAYAJ,IAAI,CAAC,wBAAD,EAA2BK,CAAC,IAAI;AAClCA,EAAAA,CAAC,CAACC,EAAF,CAAKT,eAAe,KAAKU,SAAzB,EAAoC,mCAApC;AACAF,EAAAA,CAAC,CAACG,GAAF;AACD,CAHG,CAAJ;AAKAR,IAAI,CAAC,mCAAD,EAAsCK,CAAC,IAAI;AAC7C,QAAMI,cAAc,GAAGZ,eAAe,CAACI,OAAO,CAACC,EAAT,EAAa;AACjDQ,IAAAA,EAAE,EAAEP,WAD6C;AAEjDQ,IAAAA,EAAE,EAAEP,WAF6C;AAGjDQ,IAAAA,OAAO,EAAE,CAACd,OAAD;AAHwC,GAAb,CAAtC;AAMAO,EAAAA,CAAC,CAACQ,KAAF,CAAQJ,cAAc,CAACC,EAAf,CAAkBI,OAAlB,CAA0B,iBAA1B,CAAR,EAAsD,CAAtD,EACE,6CADF;AAEAT,EAAAA,CAAC,CAACQ,KAAF,CAAQJ,cAAc,CAACE,EAAf,CAAkBG,OAAlB,CAA0B,iBAA1B,CAAR,EAAsD,CAAtD,EACE,6CADF;AAEAT,EAAAA,CAAC,CAACG,GAAF;AACD,CAZG,CAAJ;AAcAR,IAAI,CAAC,6BAAD,EAAgCK,CAAC,IAAI;AAEvC,QAAMU,kBAAkB,GAAG;AAACC,IAAAA,aAAa,EAAE;AAAhB,GAA3B;AAMA,MAAIP,cAAJ;AAGAA,EAAAA,cAAc,GAAGZ,eAAe,CAACI,OAAO,CAACC,EAAT,EAAa;AAC3CQ,IAAAA,EAAE,EAAEP,WADuC;AAE3CQ,IAAAA,EAAE,EAAEP;AAFuC,GAAb,CAAhC;AAKAC,EAAAA,CAAC,CAACY,EAAF,CAAK,OAAOR,cAAc,CAACS,WAA3B,EAAwC,UAAxC,EAAoD,gCAApD;AAGA,QAAMC,UAAU,GAAG;AACjBC,IAAAA,IAAI,EAAE,aADW;AAEjBV,IAAAA,EAAE,EAAE,EAFa;AAGjBC,IAAAA,EAAE,EAAE,EAHa;AAIjBO,IAAAA,WAAW,EAAE,CAACG,IAAD,EAAOC,OAAP,KAAmB;AAE9BjB,MAAAA,CAAC,CAACC,EAAF,CAAKgB,OAAO,CAACC,eAAb,EAA8B,mDAA9B;AACA,aAAO,EAAP;AACD,KARgB;AASjBC,IAAAA,YAAY,EAAE,CAAC,SAAD;AATG,GAAnB;AAYAf,EAAAA,cAAc,GAAGZ,eAAe,CAACI,OAAO,CAACC,EAAT,EAAa;AAC3CQ,IAAAA,EAAE,EAAEP,WADuC;AAE3CQ,IAAAA,EAAE,EAAEP,WAFuC;AAG3CQ,IAAAA,OAAO,EAAE,CAACd,OAAD,EAAUqB,UAAV,EAAsBpB,IAAtB;AAHkC,GAAb,CAAhC;AAOAM,EAAAA,CAAC,CAACY,EAAF,CAAK,OAAOR,cAAc,CAACS,WAA3B,EAAwC,UAAxC,EAAoD,gCAApD;AAEAT,EAAAA,cAAc,CAACS,WAAf,CAA2BH,kBAA3B;AAqBAV,EAAAA,CAAC,CAACG,GAAF;AACD,CA9DG,CAAJ","sourcesContent":["/* eslint-disable camelcase */\nimport {createGLContext, assembleShaders, picking, fp64} from 'luma.gl';\n// import {getShaderModule} from 'luma.gl/shadertools/src/lib/resolve-modules';\n// import {makeSpy} from 'probe.gl/test-utils';\nimport test from 'tape-catch';\n\nconst fixture = {\n  gl: createGLContext()\n};\n\nconst VS_GLSL_300 = `\\\n#version 300 es\n\nin vec4 positions;\n\nvoid main(void) {\n  gl_Position = positions;\n}\n`;\nconst FS_GLSL_300 = `\\\n#version 300 es\n\nprecision highp float;\n\nout vec4 fragmentColor;\n\nvoid main(void) {\n  fragmentColor = vec4(1.0, 1.0, 1.0, 1.0);\n}\n`;\n\ntest('assembleShaders#import', t => {\n  t.ok(assembleShaders !== undefined, 'assembleShaders import successful');\n  t.end();\n});\n\ntest('assembleShaders#version_directive', t => {\n  const assembleResult = assembleShaders(fixture.gl, {\n    vs: VS_GLSL_300,\n    fs: FS_GLSL_300,\n    modules: [picking]\n  });\n  // Verify version directive remains as first line.\n  t.equal(assembleResult.vs.indexOf('#version 300 es'), 0,\n    'version directive should be first statement');\n  t.equal(assembleResult.fs.indexOf('#version 300 es'), 0,\n    'version directive should be first statement');\n  t.end();\n});\n\ntest('assembleShaders#getUniforms', t => {\n\n  const testModuleSettings = {pickingActive: true};\n\n  // inject spy into the picking module's getUniforms\n  // const module = getShaderModule(picking);\n  // const getUniformsSpy = makeSpy(module, 'getUniforms');\n\n  let assembleResult;\n\n  // Without shader modules\n  assembleResult = assembleShaders(fixture.gl, {\n    vs: VS_GLSL_300,\n    fs: FS_GLSL_300\n  });\n  // Verify getUniforms is function\n  t.is(typeof assembleResult.getUniforms, 'function', 'getUniforms should be function');\n\n  // With shader modules\n  const testModule = {\n    name: 'test-module',\n    vs: '',\n    fs: '',\n    getUniforms: (opts, context) => {\n      // Check a uniform generated by its dependency\n      t.ok(context.picking_uActive, 'module getUniforms is called with correct context');\n      return {};\n    },\n    dependencies: ['picking']\n  };\n\n  assembleResult = assembleShaders(fixture.gl, {\n    vs: VS_GLSL_300,\n    fs: FS_GLSL_300,\n    modules: [picking, testModule, fp64]\n  });\n\n  // Verify getUniforms is function\n  t.is(typeof assembleResult.getUniforms, 'function', 'getUniforms should be function');\n\n  assembleResult.getUniforms(testModuleSettings);\n\n  // t.ok(module.getUniforms.called, 'module getUniforms is called');\n\n  // TODO: probe.gl spy does not yet support args\n  // t.deepEqual(\n  //   picking.getUniforms.getCall(0).args[0],\n  //   testModuleSettings,\n  //   'module getUniforms is called with correct opts');\n\n  // t.ok(testModule.getUniforms.calledAfter(picking.getUniforms),\n  //   'module getUniforms is called after its dependencies');\n\n  // TODO: probe.gl spy does not yet support args\n  // t.deepEqual(\n  //   testModule.getUniforms.getCall(0).args[0],\n  //   testModuleSettings,\n  //   'module getUniforms is called with correct opts');\n\n  // getUniformsSpy.restore();\n\n  t.end();\n});\n"],"file":"assemble-shaders.spec.js"}