{"version":3,"sources":["../../../../../src/shadertools/test/lib/resolve-modules.spec.js"],"names":["test","resolveModules","TEST_EXPORTS","getDependencyGraph","fp32","name","fp64","project","dependencies","project64","t","ok","undefined","end","result","deepEqual","map","module","moduleDepth","modules","level","moduleMap"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,SAAQC,cAAR,EAAwBC,YAAxB,QAA2C,6CAA3C;MACOC,kB,GAAsBD,Y,CAAtBC,kB;AAGP,MAAMC,IAAI,GAAG;AACXC,EAAAA,IAAI,EAAE;AADK,CAAb;AAIA,MAAMC,IAAI,GAAG;AACXD,EAAAA,IAAI,EAAE;AADK,CAAb;AAIA,MAAME,OAAO,GAAG;AACdF,EAAAA,IAAI,EAAE,cADQ;AAEdG,EAAAA,YAAY,EAAE,CAACJ,IAAD;AAFA,CAAhB;AAKA,MAAMK,SAAS,GAAG;AAChBJ,EAAAA,IAAI,EAAE,gBADU;AAEhBG,EAAAA,YAAY,EAAE,CAACD,OAAD,EAAUD,IAAV;AAFE,CAAlB;AAKAN,IAAI,CAAC,sBAAD,EAAyBU,CAAC,IAAI;AAChCA,EAAAA,CAAC,CAACC,EAAF,CAAKV,cAAc,KAAKW,SAAxB,EAAmC,kCAAnC;AACAF,EAAAA,CAAC,CAACC,EAAF,CAAKR,kBAAkB,KAAKS,SAA5B,EAAuC,sCAAvC;AACAF,EAAAA,CAAC,CAACG,GAAF;AACD,CAJG,CAAJ;AAMAb,IAAI,CAAC,qCAAD,EAAwCU,CAAC,IAAI;AAC/C,QAAMI,MAAM,GAAGb,cAAc,CAAC,CAACQ,SAAD,EAAYF,OAAZ,CAAD,CAA7B;AACAG,EAAAA,CAAC,CAACK,SAAF,CACED,MAAM,CAACE,GAAP,CAAWC,MAAM,IAAIA,MAAM,CAACZ,IAA5B,CADF,EAEE,CAACD,IAAI,CAACC,IAAN,EAAYE,OAAO,CAACF,IAApB,EAA0BC,IAAI,CAACD,IAA/B,EAAqCI,SAAS,CAACJ,IAA/C,CAFF,EAGE,yBAHF;AAIAK,EAAAA,CAAC,CAACG,GAAF;AACD,CAPG,CAAJ;AASAb,IAAI,CAAC,kCAAD,EAAqCU,CAAC,IAAI;AAC5C,QAAMQ,WAAW,GAAG,EAApB;AACAf,EAAAA,kBAAkB,CAAC;AACjBgB,IAAAA,OAAO,EAAE,CAACV,SAAD,EAAYF,OAAZ,CADQ;AAEjBa,IAAAA,KAAK,EAAE,CAFU;AAGjBC,IAAAA,SAAS,EAAE,EAHM;AAIjBH,IAAAA;AAJiB,GAAD,CAAlB;AAMAR,EAAAA,CAAC,CAACK,SAAF,CAAYG,WAAZ,EAAyB;AACvB,KAACd,IAAI,CAACC,IAAN,GAAa,CADU;AAEvB,KAACE,OAAO,CAACF,IAAT,GAAgB,CAFO;AAGvB,KAACC,IAAI,CAACD,IAAN,GAAa,CAHU;AAIvB,KAACI,SAAS,CAACJ,IAAX,GAAkB;AAJK,GAAzB,EAKG,8BALH;AAMAK,EAAAA,CAAC,CAACG,GAAF;AACD,CAfG,CAAJ","sourcesContent":["import test from 'tape-catch';\nimport {resolveModules, TEST_EXPORTS} from 'luma.gl/shadertools/src/lib/resolve-modules';\nconst {getDependencyGraph} = TEST_EXPORTS;\n\n// Dummy shader modules with dependencies\nconst fp32 = {\n  name: 'fp32-test'\n};\n\nconst fp64 = {\n  name: 'fp64-test'\n};\n\nconst project = {\n  name: 'project-test',\n  dependencies: [fp32]\n};\n\nconst project64 = {\n  name: 'project64-test',\n  dependencies: [project, fp64]\n};\n\ntest('ShaderModules#import', t => {\n  t.ok(resolveModules !== undefined, 'resolveModules import successful');\n  t.ok(getDependencyGraph !== undefined, 'getDependencyGraph import successful');\n  t.end();\n});\n\ntest('ShaderModules#getShaderDependencies', t => {\n  const result = resolveModules([project64, project]);\n  t.deepEqual(\n    result.map(module => module.name),\n    [fp32.name, project.name, fp64.name, project64.name],\n    'Module order is correct');\n  t.end();\n});\n\ntest('ShaderModules#getDependencyGraph', t => {\n  const moduleDepth = {};\n  getDependencyGraph({\n    modules: [project64, project],\n    level: 0,\n    moduleMap: {},\n    moduleDepth\n  });\n  t.deepEqual(moduleDepth, {\n    [fp32.name]: 2,\n    [project.name]: 1,\n    [fp64.name]: 1,\n    [project64.name]: 0\n  }, 'Module dependecny is correct');\n  t.end();\n});\n"],"file":"resolve-modules.spec.js"}