{"version":3,"sources":["../../../src/utils/promise-utils.js"],"names":["promisify","func","promisifiedFunction","args","Promise","resolve","reject","callback","error","data","e"],"mappings":"AASA,OAAO,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AAC9B,SAAO,SAASC,mBAAT,CAA6B,GAAGC,IAAhC,EAAsC;AAC3C,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,eAASC,QAAT,CAAkBC,KAAlB,EAAyBC,IAAzB,EAA+B;AAC7B,YAAI;AACF,cAAID,KAAJ,EAAW;AACTF,YAAAA,MAAM,CAACE,KAAD,CAAN;AACD,WAFD,MAEO;AACLH,YAAAA,OAAO,CAACI,IAAD,CAAP;AACD;AACF,SAND,CAME,OAAOC,CAAP,EAAU;AACVJ,UAAAA,MAAM,CAACI,CAAD,CAAN;AACD;AACF;;AACDT,MAAAA,IAAI,CAAC,GAAGE,IAAJ,EAAUI,QAAV,CAAJ;AACD,KAbM,CAAP;AAcD,GAfD;AAgBD","sourcesContent":["/**\n * Converts a function that accepts a node style (err, result) callback\n * as the last argument into a function that takes the same arguments\n * and returns a promise that resolves or rejects with the values provided\n * by the original callback\n * @param {Function} func - function to wrap\n * @return {Function} promisified function\n */\n/* eslint-disable no-try-catch */\nexport function promisify(func) {\n  return function promisifiedFunction(...args) {\n    return new Promise((resolve, reject) => {\n      function callback(error, data) {\n        try {\n          if (error) {\n            reject(error);\n          } else {\n            resolve(data);\n          }\n        } catch (e) {\n          reject(e);\n        }\n      }\n      func(...args, callback);\n    });\n  };\n}\n/* eslint-enable no-try-catch */\n"],"file":"promise-utils.js"}