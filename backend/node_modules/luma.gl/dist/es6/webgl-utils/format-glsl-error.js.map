{"version":3,"sources":["../../../src/webgl-utils/format-glsl-error.js"],"names":["getShaderName","getShaderTypeName","parseGLSLCompilerError","errLog","src","shaderType","shaderName","errorStrings","split","errors","warnings","name","shaderDescription","i","length","errorString","segments","type","line","parseInt","isNaN","Error","lines","addLineNumbers","formatErrors","formatGLSLCompilerError","message","error","column","err","substring","join","trim","padLeft","string","start","delim","maxDigits","String","map","lineNumber","digits","prefix","result"],"mappings":"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","sourcesContent":["// TODO - formatGLSLCompilerError should not depend on this\nimport getShaderName, {getShaderTypeName} from './get-shader-name';\n\n/**\n * Parse a GLSL compiler error log into a string showing the source code around each error.\n * Based on https://github.com/wwwtyro/gl-format-compiler-error (public domain)\n */\n/* eslint-disable no-continue, max-statements */\nexport function parseGLSLCompilerError(errLog, src, shaderType, shaderName) {\n  const errorStrings = errLog.split(/\\r?\\n/);\n  const errors = {};\n  const warnings = {};\n\n  // Patch the shader name\n  const name = shaderName || getShaderName(src) || '(unnamed)';\n  const shaderDescription = `${getShaderTypeName(shaderType)} shader ${name}`;\n\n  // Parse the error - note: browser and driver dependent\n  for (let i = 0; i < errorStrings.length; i++) {\n    const errorString = errorStrings[i];\n    if (errorString.length <= 1) {\n      continue;\n    }\n    const segments = errorString.split(':');\n    const type = segments[0];\n    const line = parseInt(segments[2], 10);\n    if (isNaN(line)) {\n      throw new Error(`GLSL compilation error in ${shaderDescription}: ${errLog}`);\n    }\n    if (type !== 'WARNING') {\n      errors[line] = errorString;\n    } else {\n      warnings[line] = errorString;\n    }\n  }\n\n  // Format the error inline with the code\n  const lines = addLineNumbers(src);\n\n  return {\n    shaderName: shaderDescription,\n    errors: formatErrors(errors, lines),\n    warnings: formatErrors(warnings, lines)\n  };\n}\n\n// Formats GLSL compiler error log into single string\nexport default function formatGLSLCompilerError(errLog, src, shaderType) {\n  const {shaderName, errors, warnings} = parseGLSLCompilerError(errLog, src, shaderType);\n  return `GLSL compilation error in ${shaderName}\\n\\n${errors}\\n${warnings}`;\n}\n\n// helper function, outputs annotated errors or warnings\nfunction formatErrors(errors, lines) {\n  let message = '';\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    if (!errors[i + 3] && !errors[i + 2] && !errors[i + 1]) {\n      continue;\n    }\n    message += `${line}\\n`;\n    if (errors[i + 1]) {\n      const error = errors[i + 1];\n      const segments = error.split(':', 3);\n      const type = segments[0];\n      const column = parseInt(segments[1], 10) || 0;\n      const err = error.substring(segments.join(':').length + 1).trim();\n      message += padLeft(`^^^ ${type}: ${err}\\n\\n`, column);\n    }\n  }\n  return message;\n}\n\n/**\n * Prepends line numbers to each line of a string.\n * The line numbers will be left-padded with spaces to ensure an\n * aligned layout when rendered using monospace fonts.\n * @param {String} string - multi-line string to add line numbers to\n * @param {Number} start=1 - number of spaces to add\n * @param {String} delim =': ' - injected between line number and original line\n * @return {String[]} strings - array of string, one per line, with line numbers added\n */\nfunction addLineNumbers(string, start = 1, delim = ': ') {\n  const lines = string.split(/\\r?\\n/);\n  const maxDigits = String(lines.length + start - 1).length;\n  return lines.map((line, i) => {\n    const lineNumber = i + start;\n    const digits = String(lineNumber).length;\n    const prefix = padLeft(lineNumber, maxDigits - digits);\n    return prefix + delim + line;\n  });\n}\n\n/**\n * Pads a string with a number of spaces (space characters) to the left\n * @param {String} string - string to pad\n * @param {Number} digits - number of spaces to add\n * @return {String} string - The padded string\n */\nfunction padLeft(string, digits) {\n  let result = '';\n  for (let i = 0; i < digits; ++i) {\n    result += ' ';\n  }\n  return `${result}${string}`;\n}\n"],"file":"format-glsl-error.js"}