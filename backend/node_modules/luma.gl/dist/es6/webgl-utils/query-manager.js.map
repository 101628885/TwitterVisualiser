{"version":3,"sources":["../../../src/webgl-utils/query-manager.js"],"names":["ERR_DELETED","ERR_CANCEL","noop","x","QueryManager","constructor","pendingQueries","Set","invalidQueryType","invalidErrorMessage","checkInvalid","poll","gl","cancelInvalidQueries","query","values","resultAvailable","isResultAvailable","result","getResult","resolveQuery","setInvalidator","queryType","errorMessage","beginQuery","onComplete","onError","cancelQuery","resolvers","promise","Promise","resolve","reject","Object","assign","add","then","catch","delete","rejectQuery","Error","deleteQuery","invalidateQuery"],"mappings":"AAaA,MAAMA,WAAW,GAAG,+CAApB;AACA,MAAMC,UAAU,GAAG,gDAAnB;;AAEA,MAAMC,IAAI,GAAGC,CAAC,IAAIA,CAAlB;;AAEA,MAAMC,YAAN,CAAmB;AACjBC,EAAAA,WAAW,GAAG;AACZ,SAAKC,cAAL,GAAsB,IAAIC,GAAJ,EAAtB;AACA,SAAKC,gBAAL,GAAwB,IAAxB;AACA,SAAKC,mBAAL,GAA2B,EAA3B;;AACA,SAAKC,YAAL,GAAoB,MAAM,KAA1B;AACD;;AAMDC,EAAAA,IAAI,CAACC,EAAD,EAAK;AACP,SAAKC,oBAAL,CAA0BD,EAA1B;;AAGA,SAAK,MAAME,KAAX,IAAoB,KAAKR,cAAL,CAAoBS,MAApB,EAApB,EAAkD;AAChD,YAAMC,eAAe,GAAGF,KAAK,CAACG,iBAAN,EAAxB;;AACA,UAAID,eAAJ,EAAqB;AACnB,cAAME,MAAM,GAAGJ,KAAK,CAACK,SAAN,EAAf;AACA,aAAKC,YAAL,CAAkBN,KAAlB,EAAyBI,MAAzB;AACD;AACF;AACF;;AAKDG,EAAAA,cAAc,CAAC;AAACC,IAAAA,SAAD;AAAYC,IAAAA,YAAZ;AAA0Bb,IAAAA;AAA1B,GAAD,EAA0C;AACtD,SAAKF,gBAAL,GAAwBc,SAAxB;AACA,SAAKb,mBAAL,GAA2Bc,YAA3B;AACA,SAAKb,YAAL,GAAoBA,YAApB;AACD;;AAGDc,EAAAA,UAAU,CAACV,KAAD,EAAQW,UAAU,GAAGvB,IAArB,EAA2BwB,OAAO,GAAGxB,IAArC,EAA2C;AAGnD,SAAKW,oBAAL,CAA0BC,KAAK,CAACF,EAAhC;AAGA,SAAKe,WAAL,CAAiBb,KAAjB;AAGA,UAAMc,SAAS,GAAG,EAAlB;AACAd,IAAAA,KAAK,CAACe,OAAN,GAAgB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/CJ,MAAAA,SAAS,CAACG,OAAV,GAAoBA,OAApB;AACAH,MAAAA,SAAS,CAACI,MAAV,GAAmBA,MAAnB;AACD,KAHe,CAAhB;AAIAC,IAAAA,MAAM,CAACC,MAAP,CAAcpB,KAAK,CAACe,OAApB,EAA6BD,SAA7B;AAGA,SAAKtB,cAAL,CAAoB6B,GAApB,CAAwBrB,KAAxB;AAEA,WAAOA,KAAK,CAACe,OAAN,CAAcO,IAAd,CAAmBX,UAAnB,EAA+BY,KAA/B,CAAqCX,OAArC,CAAP;AACD;;AAGDN,EAAAA,YAAY,CAACN,KAAD,EAAQI,MAAR,EAAgB;AAC1B,SAAKZ,cAAL,CAAoBgC,MAApB,CAA2BxB,KAA3B;AACAA,IAAAA,KAAK,CAACe,OAAN,CAAcE,OAAd,CAAsBb,MAAtB;AACD;;AAGDqB,EAAAA,WAAW,CAACzB,KAAD,EAAQS,YAAR,EAAsB;AAC/B,SAAKjB,cAAL,CAAoBgC,MAApB,CAA2BxB,KAA3B;;AACA,QAAIA,KAAK,CAACe,OAAV,EAAmB;AACjBf,MAAAA,KAAK,CAACe,OAAN,CAAcG,MAAd,CAAqB,IAAIQ,KAAJ,CAAUjB,YAAV,CAArB;AACD;AACF;;AAGDkB,EAAAA,WAAW,CAAC3B,KAAD,EAAQ;AACjB,WAAO,KAAKyB,WAAL,CAAiBzB,KAAjB,EAAwBd,WAAxB,CAAP;AACD;;AAGD2B,EAAAA,WAAW,CAACb,KAAD,EAAQ;AACjB,WAAO,KAAKyB,WAAL,CAAiBzB,KAAjB,EAAwBb,UAAxB,CAAP;AACD;;AAGDyC,EAAAA,eAAe,CAAC5B,KAAD,EAAQ;AACrB,QAAIA,KAAK,YAAY,KAAKN,gBAA1B,EAA4C;AAC1C,WAAK+B,WAAL,CAAiBzB,KAAjB,EAAwB,KAAKL,mBAA7B;AACD;AACF;;AAGDI,EAAAA,oBAAoB,CAACD,EAAD,EAAK;AAGvB,QAAI,KAAKF,YAAL,CAAkBE,EAAlB,CAAJ,EAA2B;AACzB,WAAK,MAAME,KAAX,IAAoB,KAAKR,cAAL,CAAoBS,MAApB,EAApB,EAAkD;AAChD,aAAK2B,eAAL,CAAqB5B,KAArB;AACD;AACF;AACF;;AAjGgB;;AAoGnB,eAAe,IAAIV,YAAJ,EAAf","sourcesContent":["//\n// Internal class that helps \"asynchronous WebGL query objects\" manage\n// pending requests (e.g. for EXT_disjoint_timer_query and WebGL2 queries)\n//\n// Creates and manages promises for the queries.\n// Tracks pending queries enabling polling.\n// Tracks pending queries enabling invalidation.\n// Provides some standard error messages.\n//\n// Remarks:\n// - Maintains a minimal list of pending queries only to minimize GC impact\n// - Exported as a singleton class instance.\n\nconst ERR_DELETED = 'Query was deleted before result was available';\nconst ERR_CANCEL = 'Query was canceled before result was available';\n\nconst noop = x => x;\n\nclass QueryManager {\n  constructor() {\n    this.pendingQueries = new Set();\n    this.invalidQueryType = null;\n    this.invalidErrorMessage = '';\n    this.checkInvalid = () => false;\n  }\n\n  // API THAT SHOULD BE EXPOSED TO APPLICATION\n\n  // Checks invalidation callback and then all pending queries for completion\n  // Should only be called once per tick\n  poll(gl) {\n    this.cancelInvalidQueries(gl);\n\n    // Now check availability of results and resolve promises as appropriate\n    for (const query of this.pendingQueries.values()) {\n      const resultAvailable = query.isResultAvailable();\n      if (resultAvailable) {\n        const result = query.getResult();\n        this.resolveQuery(query, result);\n      }\n    }\n  }\n\n  // API FOR MANAGED QUERY CLASSES\n\n  // Registers query invalidation method - used to detect disjoint timer queries\n  setInvalidator({queryType, errorMessage, checkInvalid}) {\n    this.invalidQueryType = queryType;\n    this.invalidErrorMessage = errorMessage;\n    this.checkInvalid = checkInvalid;\n  }\n\n  // Starts a query, sets up a new promise\n  beginQuery(query, onComplete = noop, onError = noop) {\n    // Make sure disjoint state is cleared, so that this query starts fresh\n    // Cancel other queries if needed\n    this.cancelInvalidQueries(query.gl);\n\n    // Cancel current promise - noop if already resolved or rejected\n    this.cancelQuery(query);\n\n    // Create a new promise with attached resolve and reject methods\n    const resolvers = {};\n    query.promise = new Promise((resolve, reject) => {\n      resolvers.resolve = resolve;\n      resolvers.reject = reject;\n    });\n    Object.assign(query.promise, resolvers);\n\n    // Add this query to the pending queries\n    this.pendingQueries.add(query);\n    // Register the callbacks\n    return query.promise.then(onComplete).catch(onError);\n  }\n\n  // Resolves a query with a result\n  resolveQuery(query, result) {\n    this.pendingQueries.delete(query);\n    query.promise.resolve(result);\n  }\n\n  // Rejects the promise\n  rejectQuery(query, errorMessage) {\n    this.pendingQueries.delete(query);\n    if (query.promise) {\n      query.promise.reject(new Error(errorMessage));\n    }\n  }\n\n  // Rejects promise with standard message for Query.delete()\n  deleteQuery(query) {\n    return this.rejectQuery(query, ERR_DELETED);\n  }\n\n  // Rejects promise with standard message for Query.cancel()\n  cancelQuery(query) {\n    return this.rejectQuery(query, ERR_CANCEL);\n  }\n\n  // Rejects promise with registered message for invalidation\n  invalidateQuery(query) {\n    if (query instanceof this.invalidQueryType) {\n      this.rejectQuery(query, this.invalidErrorMessage);\n    }\n  }\n\n  // Checks all queries to see if need to be invalidated\n  cancelInvalidQueries(gl) {\n    // We assume that we can cancel queries for all context.\n    // Should be OK since this is used to check for \"disjoint\" GPU state\n    if (this.checkInvalid(gl)) {\n      for (const query of this.pendingQueries.values()) {\n        this.invalidateQuery(query);\n      }\n    }\n  }\n}\n\nexport default new QueryManager();\n"],"file":"query-manager.js"}