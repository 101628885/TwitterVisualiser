{"version":3,"sources":["../../../src/webgl/accessor.js"],"names":["getTypedArrayFromGLType","log","assert","DEFAULT_ACCESSOR_VALUES","offset","stride","type","size","divisor","normalized","integer","Accessor","getBytesPerElement","accessor","ArrayType","BYTES_PER_ELEMENT","getBytesPerVertex","resolve","accessors","constructor","forEach","_assign","Object","freeze","toString","JSON","stringify","BYTES_PER_VERTEX","props","undefined","warn","instanced","deprecated","isInstanced","index"],"mappings":"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","sourcesContent":["import GL from '../constants';\nimport {getTypedArrayFromGLType} from '../webgl-utils/typed-array-utils';\nimport log from '../utils/log';\nimport assert from '../utils/assert';\n\nconst DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: GL.FLOAT,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\n\nexport default class Accessor {\n\n  static getBytesPerElement(accessor) {\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static getBytesPerVertex(accessor) {\n    assert(accessor.size);\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n  }\n\n  // Combines (merges) a list of accessors. On top of default values\n  // Usually [programAccessor, bufferAccessor, appAccessor]\n  // All props will be set in the returned object.\n  // TODO check for conflicts between values in the supplied accessors\n  static resolve(...accessors) {\n    return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]); // Default values\n  }\n\n  constructor(...accessors) {\n    accessors.forEach(accessor => this._assign(accessor)); // Merge in sequence\n    Object.freeze(this);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  // ACCESSORS\n\n  // TODO - remove>\n  get BYTES_PER_ELEMENT() {\n    return Accessor.getBytesPerElement(this);\n  }\n\n  get BYTES_PER_VERTEX() {\n    return Accessor.getBytesPerVertex(this);\n  }\n\n  // PRIVATE\n\n  /* eslint-disable complexity, max-statements */\n  _assign(props = {}) {\n\n    // TYPE - not expected to be overridden\n    if (props.type !== undefined) {\n      if (this.type !== props.type) {\n        log.warn('accessor type mismatch');\n      }\n      this.type = props.type;\n\n      // Auto-deduce integer type?\n      if (props.type === GL.INT || props.type === GL.UNSIGNED_INT) {\n        this.integer = true;\n      }\n    }\n\n    // SIZE - not expected to be overridden\n    if (props.size !== undefined) {\n      if (this.size !== props.size) {\n        log.warn('accessor size mismatch');\n      }\n      this.size = props.size;\n    }\n\n    // INSTANCE DIVISOR\n    if (props.divisor !== undefined) {\n      this.divisor = props.divisor;\n    }\n\n    if (props.offset !== undefined) {\n      this.offset = props.offset;\n    }\n    if (props.stride !== undefined) {\n      this.stride = props.stride;\n    }\n    if (props.normalized !== undefined) {\n      this.normalized = props.normalized;\n    }\n    if (props.integer !== undefined) {\n      this.integer = props.integer;\n    }\n\n    // Backwards compatibility\n    if (props.instanced !== undefined) {\n      log.deprecated('Accessor.instanced', 'Accessor.divisor');\n      this.divisor = props.instanced ? 1 : 0;\n    }\n    if (props.isInstanced !== undefined) {\n      log.deprecated('Accessor.isInstanced', 'Accessor.divisor');\n      this.divisor = props.isInstanced ? 1 : 0;\n    }\n\n    // TODO - should this be supported?\n    if (props.index !== undefined) {\n      this.index = props.index ? 1 : 0;\n    }\n\n    return this;\n  }\n  /* eslint-enable complexity, max-statements */\n}\n\n// TEST EXPORTS\nexport {DEFAULT_ACCESSOR_VALUES};\n"],"file":"accessor.js"}