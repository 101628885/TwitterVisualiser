{"version":3,"sources":["../../../src/webgl/buffer.js"],"names":["Resource","Accessor","assertWebGL2Context","getGLTypeFromTypedArray","getTypedArrayFromGLType","log","assert","DEBUG_DATA_LENGTH","Buffer","constructor","gl","props","stubRemovedMethods","target","webgl2","_initialize","Object","seal","getElementCount","accessor","Math","round","byteLength","getBytesPerElement","getVertexCount","getBytesPerVertex","initialize","setProps","setData","setAccessor","opts","reallocate","_setByteLength","bytesUsed","subData","ArrayBuffer","isView","data","offset","srcOffset","length","bindBuffer","handle","undefined","bufferSubData","debugData","type","copyData","sourceBuffer","readOffset","writeOffset","size","copyBufferSubData","getData","dstData","srcByteOffset","dstOffset","ArrayType","clamped","sourceAvailableElementCount","_getAvailableElementCount","dstElementOffset","dstAvailableElementCount","dstElementCount","min","copyElementCount","getBufferSubData","bind","index","bindBufferRange","bindBufferBase","unbind","isIndexedBuffer","removed","bytes","deprecated","getDebugData","changed","invalidateDebugData","Number","isFinite","usage","_setData","_getTarget","bufferData","slice","Float32Array","sourceElementOffset","BYTES_PER_ELEMENT","_createHandle","createBuffer","_deleteHandle","deleteBuffer","_getParameter","pname","value","getBufferParameter","updateAccessor","setByteLength"],"mappings":"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","sourcesContent":["import GL from '../constants';\nimport Resource from './resource';\nimport Accessor from './accessor';\nimport {assertWebGL2Context} from '../webgl-utils';\nimport {getGLTypeFromTypedArray, getTypedArrayFromGLType} from '../webgl-utils/typed-array-utils';\nimport {log} from '../utils';\nimport assert from '../utils/assert';\n\nconst DEBUG_DATA_LENGTH = 10;\n\nexport default class Buffer extends Resource {\n\n  constructor(gl, props = {}) {\n    super(gl, props);\n    this.stubRemovedMethods('Buffer', 'v6.0', ['layout', 'setLayout', 'getIndexedParameter']);\n\n    // In WebGL1, need to make sure we use GL.ELEMENT_ARRAY_BUFFER when initializing element buffers\n    // otherwise buffer type will lock to generic (non-element) buffer\n    // In WebGL2, we can use GL.COPY_READ_BUFFER which avoids locking the type here\n    this.target = props.target || (this.gl.webgl2 ? GL.COPY_READ_BUFFER : GL.ARRAY_BUFFER);\n\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  // returns number of elements in the buffer (assuming that the full buffer is used)\n  getElementCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerElement(accessor));\n  }\n\n  // returns number of vertices in the buffer (assuming that the full buffer is used)\n  getVertexCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerVertex(accessor));\n  }\n\n  // Creates and initializes the buffer object's data store.\n  initialize(props) {\n    return this._initialize(props);\n  }\n\n  setProps(props) {\n    if ('data' in props) {\n      this.setData(props);\n    }\n    return this;\n  }\n\n  // Stores the accessor of data with the buffer, makes it easy to e.g. set it as an attribute later\n  // {accessor,type,size = 1,offset = 0,stride = 0,normalized = false,integer = false,divisor = 0}\n  setAccessor(opts) {\n    this.accessor = opts;\n    return this;\n  }\n\n  // Allocate a bigger GPU buffer (if the current buffer is not big enough).\n  // If a reallocation is triggered it clears the buffer\n  // Returns:\n  //  `true`: buffer was reallocated, data was cleared\n  //  `false`: buffer was big enough, data is intact\n  reallocate(byteLength) {\n    if (byteLength > this.byteLength) {\n      this._setByteLength(byteLength);\n      return true;\n    }\n    this.bytesUsed = byteLength;\n    return false;\n  }\n\n  // Update with new data\n  setData(opts) {\n    return this.initialize(opts);\n  }\n\n  // Updates a subset of a buffer object's data store.\n  // Data (Typed Array or ArrayBuffer), length is inferred unless provided\n  // Offset into buffer\n  // WebGL2 only: Offset into srcData\n  // WebGL2 only: Number of bytes to be copied\n  subData(props) {\n    // Signature: buffer.subData(new Float32Array([...]))\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    const {data, offset = 0, srcOffset = 0} = props;\n    const byteLength = props.byteLength || props.length;\n\n    // if (byteLength > this.byteLength) {\n    //   byteLength = this.byteLength;\n    // }\n\n    assert(data);\n\n    // Create the buffer - binding it here for the first time locks the type\n    // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n    const target = this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n    this.gl.bindBuffer(target, this.handle);\n    // WebGL2: subData supports additional srcOffset and length parameters\n    if (srcOffset !== 0 || byteLength !== undefined) {\n      assertWebGL2Context(this.gl);\n      this.gl.bufferSubData(this.target, offset, data, srcOffset, byteLength);\n    } else {\n      this.gl.bufferSubData(target, offset, data);\n    }\n    this.gl.bindBuffer(target, null);\n\n    // TODO - update local `data` if offsets are right\n    this.debugData = null;\n\n    if (!this.accessor.type) {\n      this.setAccessor(new Accessor(this.accessor, {type: getGLTypeFromTypedArray(data)}));\n    }\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Copies part of the data of another buffer into this buffer\n  copyData({sourceBuffer, readOffset = 0, writeOffset = 0, size}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n\n    // Use GL.COPY_READ_BUFFER+GL.COPY_WRITE_BUFFER avoid disturbing other targets and locking type\n    gl.bindBuffer(GL.COPY_READ_BUFFER, sourceBuffer.handle);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, this.handle);\n    gl.copyBufferSubData(GL.COPY_READ_BUFFER, GL.COPY_WRITE_BUFFER, readOffset, writeOffset, size);\n    gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    this.debugData = null;\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Reads data from buffer into an ArrayBufferView or SharedArrayBuffer.\n  getData({dstData = null, srcByteOffset = 0, dstOffset = 0, length = 0} = {}) {\n    assertWebGL2Context(this.gl);\n\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);\n\n    const dstElementOffset = dstOffset;\n\n    let dstAvailableElementCount;\n    let dstElementCount;\n    if (dstData) {\n      dstElementCount = dstData.length;\n      dstAvailableElementCount = dstElementCount - dstElementOffset;\n    } else {\n      // Allocate ArrayBufferView with enough size to copy all eligible data.\n      dstAvailableElementCount =\n        Math.min(sourceAvailableElementCount, length || sourceAvailableElementCount);\n      dstElementCount = dstElementOffset + dstAvailableElementCount;\n    }\n\n    const copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);\n    length = length || copyElementCount;\n    assert(length <= copyElementCount);\n    dstData = dstData || new ArrayType(dstElementCount);\n\n    // Use GL.COPY_READ_BUFFER to avoid disturbing other targets and locking type\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, this.handle);\n    this.gl.getBufferSubData(GL.COPY_READ_BUFFER, srcByteOffset, dstData, dstOffset, length);\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n\n    return dstData;\n  }\n\n  /**\n   * Binds a buffer to a given binding point (target).\n   *   GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER take an index, and optionally a range.\n   * @param {Glenum} target - target for the bind operation.\n   * @param {GLuint} index= - the index of the target.\n   *   - GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER need an index to affect state\n   * @param {GLuint} offset=0 - the index of the target.\n   *   - GL.UNIFORM_BUFFER: `offset` must be aligned to GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT.\n   * @param {GLuint} size= - the index of the target.\n   *   - GL.UNIFORM_BUFFER: `size` must be a minimum of GL.UNIFORM_BLOCK_SIZE_DATA.\n   * @returns {Buffer} - Returns itself for chaining.\n   */\n  bind({\n    target = this.target, index = this.accessor && this.accessor.index, offset = 0, size\n  } = {}) {\n    // NOTE: While GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER could\n    // be used as direct binding points, they will not affect transform feedback or\n    // uniform buffer state. Instead indexed bindings need to be made.\n    if (target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER) {\n      if (size !== undefined) {\n        this.gl.bindBufferRange(target, index, this.handle, offset, size);\n      } else {\n        assert(offset === 0); // Make sure offset wasn't supplied\n        this.gl.bindBufferBase(target, index, this.handle);\n      }\n    } else {\n      this.gl.bindBuffer(target, this.handle);\n    }\n\n    return this;\n  }\n\n  unbind({target = this.target, index = this.accessor && this.accessor.index} = {}) {\n    const isIndexedBuffer = target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER;\n    if (isIndexedBuffer) {\n      this.gl.bindBufferBase(target, index, null);\n    } else {\n      this.gl.bindBuffer(target, null);\n    }\n    return this;\n  }\n\n  // DEPRECATED/REMOVED METHODS\n\n  get data() {\n    log.removed('Buffer.data', 'N/A', 'v6.0');\n  }\n\n  get bytes() {\n    log.deprecated('Buffer.bytes', 'Buffer.byteLength', 'v6.1');\n    return this.byteLength;\n  }\n\n  // PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)\n\n  // Returns a short initial data array\n  getDebugData() {\n    if (!this.debugData) {\n      this.debugData = this.getData({length: DEBUG_DATA_LENGTH});\n      return {data: this.debugData, changed: true};\n    }\n    return {data: this.debugData, changed: false};\n  }\n\n  invalidateDebugData() {\n    this.debugData = null;\n  }\n\n  // PRIVATE METHODS\n\n  // Signature: `new Buffer(gl, {data: new Float32Array(...)})`\n  // Signature: `new Buffer(gl, new Float32Array(...))`\n  // Signature: `new Buffer(gl, 100)`\n  _initialize(props = {}) {\n    // Signature `new Buffer(gl, new Float32Array(...)`\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    // Signature: `new Buffer(gl, 100)`\n    if (Number.isFinite(props)) {\n      props = {byteLength: props};\n    }\n\n    if (props.bytes) {\n      log.deprecated('bytes', 'byteLength');\n    }\n\n    const byteLength = props.byteLength || props.bytes || 0;\n    // assert(props.data || byteLength);\n\n    this.usage = props.usage || GL.STATIC_DRAW;\n\n    // DEPRECATE - remove `props` from this list in next major release\n    this.setAccessor(new Accessor(props, props.accessor));\n\n    return props.data ? this._setData(props.data) : this._setByteLength(byteLength);\n  }\n\n  // Allocate a new buffer and initialize to contents of typed array\n  _setData(data, usage = this.usage) {\n    assert(ArrayBuffer.isView(data));\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data, usage);\n    this.gl.bindBuffer(target, null);\n\n    this.usage = usage;\n    this.debugData = data.slice(0, DEBUG_DATA_LENGTH);\n    this.byteLength = data.byteLength;\n    this.bytesUsed = data.byteLength;\n\n    // infer GL type from supplied typed array\n    const type = getGLTypeFromTypedArray(data);\n    assert(type);\n    this.setAccessor(new Accessor(this.accessor, {type}));\n    return this;\n  }\n\n  // Allocate a GPU buffer of specified size.\n  _setByteLength(byteLength, usage = this.usage) {\n    assert(byteLength >= 0);\n\n    // Workaround needed for Safari (#291):\n    // gl.bufferData with size equal to 0 crashes. Instead create zero sized array.\n    let data = byteLength;\n    if (byteLength === 0) {\n      data = new Float32Array(0);\n    }\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data, usage);\n    this.gl.bindBuffer(target, null);\n\n    this.usage = usage;\n    this.debugData = null;\n    this.byteLength = byteLength;\n    this.bytesUsed = byteLength;\n    return this;\n  }\n\n  // Binding a buffer for the first time locks the type\n  // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n  _getTarget() {\n    return this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n  }\n\n  _getAvailableElementCount(srcByteOffset) {\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;\n    return this.getElementCount() - sourceElementOffset;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createBuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteBuffer(this.handle);\n  }\n\n  _getParameter(pname) {\n    this.gl.bindBuffer(this.target, this.handle);\n    const value = this.gl.getBufferParameter(this.target, pname);\n    this.gl.bindBuffer(this.target, null);\n    return value;\n  }\n\n  // DEPRECATED\n\n  updateAccessor(opts) {\n    log.deprecated('updateAccessor(...)', 'setAccessor(new Accessor(buffer.accessor, ...)');\n    this.accessor = new Accessor(this.accessor, opts);\n    return this;\n  }\n\n  setByteLength(byteLength) {\n    log.deprecated('setByteLength', 'reallocate');\n    return this.reallocate(byteLength);\n  }\n}\n"],"file":"buffer.js"}