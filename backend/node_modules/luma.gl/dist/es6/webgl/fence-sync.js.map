{"version":3,"sources":["../../../src/webgl/fence-sync.js"],"names":["Resource","assertWebGL2Context","queryManager","FenceSync","constructor","gl","opts","promise","Object","seal","wait","flags","timeout","waitSync","handle","clientWait","result","clientWaitSync","cancel","cancelQuery","isSignaled","getParameter","isResultAvailable","getResult","pname","getSyncParameter","_createHandle","fenceSync","_deleteHandle","deleteQuery","deleteSync"],"mappings":"AACA,OAAOA,QAAP,MAAqB,YAArB;AACA,SAAQC,mBAAR,QAAkC,gBAAlC;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AAEA,eAAe,MAAMC,SAAN,SAAwBH,QAAxB,CAAiC;AAK9CI,EAAAA,WAAW,CAACC,EAAD,EAAKC,IAAL,EAAW;AACpBL,IAAAA,mBAAmB,CAACI,EAAD,CAAnB;AACA,UAAMA,EAAN,EAAUC,IAAV;AAEA,SAAKC,OAAL,GAAe,IAAf;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAY,IAAZ;AACD;;AAYDC,EAAAA,IAAI,CAAC;AAACC,IAAAA,KAAK,GAAG,CAAT;AAAYC,IAAAA,OAAO;AAAnB,MAA4C,EAA7C,EAAiD;AACnD,SAAKP,EAAL,CAAQQ,QAAR,CAAiB,KAAKC,MAAtB,EAA8BH,KAA9B,EAAqCC,OAArC;AACA,WAAO,IAAP;AACD;;AAQDG,EAAAA,UAAU,CAAC;AAACJ,IAAAA,KAAK,IAAN;AAAqCC,IAAAA;AAArC,GAAD,EAAgD;AACxD,UAAMI,MAAM,GAAG,KAAKX,EAAL,CAAQY,cAAR,CAAuB,KAAKH,MAA5B,EAAoCH,KAApC,EAA2CC,OAA3C,CAAf;;AAEA,YAAQI,MAAR;AACA;AAEE;;AACF;AAEE;;AACF;AAEE;;AACF;AAEE;;AACF;AAbA;;AAeA,WAAOA,MAAP;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACPhB,IAAAA,YAAY,CAACiB,WAAb,CAAyB,IAAzB;AACD;;AAEDC,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKC,YAAL,iBAAP;AACD;;AAGDC,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAKF,UAAL,EAAP;AACD;;AAEDG,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKH,UAAL,EAAP;AACD;;AAEDC,EAAAA,YAAY,CAACG,KAAD,EAAQ;AAClB,WAAO,KAAKnB,EAAL,CAAQoB,gBAAR,CAAyB,KAAKX,MAA9B,EAAsCU,KAAtC,CAAP;AACD;;AAIDE,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKrB,EAAL,CAAQsB,SAAR,QAAiD,CAAjD,CAAP;AACD;;AAEDC,EAAAA,aAAa,GAAG;AACd1B,IAAAA,YAAY,CAAC2B,WAAb,CAAyB,IAAzB;AACA,SAAKxB,EAAL,CAAQyB,UAAR,CAAmB,KAAKhB,MAAxB;AACD;;AArF6C","sourcesContent":["import GL from '../constants';\nimport Resource from './resource';\nimport {assertWebGL2Context} from '../webgl-utils';\nimport queryManager from '../webgl-utils/query-manager';\n\nexport default class FenceSync extends Resource {\n  /*\n   * @class\n   * @param {WebGL2RenderingContext} gl\n   */\n  constructor(gl, opts) {\n    assertWebGL2Context(gl);\n    super(gl, opts);\n    // query manager needs a promise field\n    this.promise = null;\n    Object.seal(this);\n  }\n\n  /**\n   * The method is a no-op in the absence of the possibility of\n   * synchronizing between multiple GL contexts.\n   * Prevent commands from being added to GPU command queue.\n   * Note: commands can still be buffered in driver.\n   *\n   * @param {GLbitfield} flags\n   * @param {GLint64} timeout\n   * @return {Sync} status\n   */\n  wait({flags = 0, timeout = GL.TIMEOUT_IGNORED} = {}) {\n    this.gl.waitSync(this.handle, flags, timeout);\n    return this;\n  }\n\n  /**\n   * Block all CPU operations until fence is signalled\n   * @param {GLbitfield} flags\n   * @param {GLint64} timeout\n   * @return {GLenum} result\n   */\n  clientWait({flags = GL.SYNC_FLUSH_COMMANDS_BIT, timeout}) {\n    const result = this.gl.clientWaitSync(this.handle, flags, timeout);\n    // TODO - map to boolean?\n    switch (result) {\n    case GL.ALREADY_SIGNALED:\n      // Indicates that sync object was signaled when this method was called.\n      break;\n    case GL.TIMEOUT_EXPIRED:\n      // Indicates that timeout time passed, sync object did not become signaled\n      break;\n    case GL.CONDITION_SATISFIED:\n      // Indicates that sync object was signaled before timeout expired.\n      break;\n    case GL.WAIT_FAILED:\n      // Indicates that an error occurred during execution.\n      break;\n    default:\n    }\n    return result;\n  }\n\n  cancel() {\n    queryManager.cancelQuery(this);\n  }\n\n  isSignaled() {\n    return this.getParameter(GL.SYNC_STATUS) === GL.SIGNALED;\n  }\n\n  // TODO - Query manager needs these?\n  isResultAvailable() {\n    return this.isSignaled();\n  }\n\n  getResult() {\n    return this.isSignaled();\n  }\n\n  getParameter(pname) {\n    return this.gl.getSyncParameter(this.handle, pname);\n  }\n\n  // PRIVATE METHODS\n\n  _createHandle() {\n    return this.gl.fenceSync(GL.SYNC_GPU_COMMANDS_COMPLETE, 0);\n  }\n\n  _deleteHandle() {\n    queryManager.deleteQuery(this);\n    this.gl.deleteSync(this.handle);\n  }\n}\n"],"file":"fence-sync.js"}