{"version":3,"sources":["../../../src/webgl/framebuffer.js"],"names":["Resource","Texture2D","Renderbuffer","Buffer","clear","clearBuffer","withParameters","getFeatures","getTypedArrayFromGLType","getGLTypeFromTypedArray","glFormatToComponents","glTypeToBytes","isWebGL2","assertWebGL2Context","flipRows","scalePixels","glKey","log","assert","ERR_MULTIPLE_RENDERTARGETS","Framebuffer","isSupported","gl","colorBufferFloat","colorBufferHalfFloat","supported","getExtension","getDefaultFramebuffer","luma","defaultFramebuffer","id","handle","attachments","MAX_COLOR_ATTACHMENTS","getParameter","MAX_DRAW_BUFFERS","constructor","opts","width","height","readBuffer","drawBuffers","initialize","Object","seal","color","texture","depth","stencil","check","attachment","target","object","Array","isArray","resize","_createDefaultAttachments","update","clearAttachments","checkStatus","attach","prevHandle","bindFramebuffer","_setReadBuffer","_setDrawBuffers","undefined","drawingBufferWidth","drawingBufferHeight","attachmentPoint","newAttachments","keys","forEach","key","assign","Number","descriptor","_unattach","_attachRenderbuffer","renderbuffer","layer","level","_attachTexture","filter","status","checkFramebufferStatus","Error","_getFrameBufferStatus","value","drawBuffer","readPixels","x","y","format","type","pixelArray","ArrayType","clamped","components","readPixelsToBuffer","buffer","byteOffset","byteCount","bytes","size","bind","framebuffer","unbind","copyToDataUrl","maxHeight","MAX_SAFE_INTEGER","data","canvas","document","createElement","context","getContext","imageData","createImageData","set","putImageData","toDataURL","copyToImage","image","dataUrl","readDataUrl","Image","src","copyToTexture","xoffset","yoffset","zoffset","mipmapLevel","prevBuffer","isFinite","copyTexSubImage2D","copyTexSubImage3D","blit","srcFramebuffer","srcX0","srcY0","srcX1","srcY1","dstX0","dstY0","dstX1","dstY1","mask","prevDrawHandle","prevReadHandle","blitFramebuffer","invalidate","invalidateAll","invalidateFramebuffer","getAttachmentParameter","pname","_getAttachmentParameterFallback","getFramebufferAttachmentParameter","getAttachmentParameters","parameters","ATTACHMENT_PARAMETERS","values","getParameters","attachmentName","show","window","open","priority","message","defaultAttachments","pixels","mipmaps","bindRenderbuffer","framebufferRenderbuffer","bindTexture","framebufferTextureLayer","face","mapIndexToCubeMapFace","framebufferTexture2D","ext","drawBuffersWEBGL","length","caps","webgl2","EXT_sRGB","_createHandle","createFramebuffer","_deleteHandle","deleteFramebuffer","_bindHandle","STATUS","FRAMEBUFFER_ATTACHMENT_PARAMETERS"],"mappings":"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","sourcesContent":["import Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport Buffer from './buffer';\nimport {clear, clearBuffer} from './clear';\n\nimport {withParameters} from '../webgl-context';\nimport {getFeatures} from '../webgl-context/context-features';\n\nimport {getTypedArrayFromGLType, getGLTypeFromTypedArray} from '../webgl-utils/typed-array-utils';\nimport {glFormatToComponents, glTypeToBytes} from '../webgl-utils/format-utils';\nimport {isWebGL2, assertWebGL2Context} from '../webgl-utils';\nimport {flipRows, scalePixels} from '../webgl-utils';\nimport {glKey} from '../webgl-utils/constants-to-keys';\n\nimport {log} from '../utils';\nimport assert from '../utils/assert';\n\nimport GL from '../constants';\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n\n  static isSupported(gl, {\n    colorBufferFloat,    // Whether floating point textures can be rendered and read\n    colorBufferHalfFloat // Whether half float textures can be rendered and read\n  } = {}) {\n    let supported = true;\n    supported = colorBufferFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'WEBGL.color_buffer_float');\n    supported = colorBufferHalfFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'EXT_color_buffer_half_float');\n    return supported;\n  }\n\n  // Create a Framebuffer wrapper for the default framebuffer (target === null)\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultFramebuffer = gl.luma.defaultFramebuffer || new Framebuffer(gl, {\n      id: 'default-framebuffer',\n      handle: null,\n      attachments: {}\n    });\n    // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    return this.gl.getParameter(this.gl.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    return this.gl.getParameter(this.gl.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL.COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL.COLOR_ATTACHMENT0];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return this.attachments[GL.DEPTH_ATTACHMENT] ||\n      this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] || null;\n  }\n\n  get stencil() {\n    return this.attachments[GL.STENCIL_ATTACHMENT] ||\n      this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] || null;\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer,\n    drawBuffers\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments({color, depth, stencil, width, height});\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false\n  }) {\n    this.attach(attachments, {clearAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize({width, height} = {}) {\n    // for default framebuffer, just update the stored size\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`);\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {clearAttachments = false} = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const key in newAttachments) {\n      // Ensure key is not undefined\n      assert(key !== undefined, 'Misspelled framebuffer binding point?');\n\n      const attachment = Number(key);\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach({attachment});\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments).filter(key => !this.attachments[key]).forEach(key => {\n      delete this.attachments[key];\n    });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL.FRAMEBUFFER);\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  clear({\n    color,\n    depth,\n    stencil,\n    drawBuffers = []\n  } = {}) {\n    // Bind framebuffer and delegate to global clear functions\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer({drawBuffer, value});\n    });\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels({\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    format = GL.RGBA,\n    type, // Auto deduced from pixelArray or gl.UNSIGNED_BYTE\n    pixelArray = null,\n    attachment = GL.COLOR_ATTACHMENT0 // TODO - support gl.readBuffer\n  }) {\n    const {gl} = this;\n\n    // TODO - Set and unset gl.readBuffer\n    if (attachment === GL.COLOR_ATTACHMENT0 && this.handle === null) {\n      attachment = GL.FRONT;\n    }\n\n    // Deduce type and allocated pixelArray if needed\n    if (!pixelArray) {\n      // Allocate pixel array if not already available, using supplied type\n      type = type || gl.UNSIGNED_BYTE;\n      const ArrayType = getTypedArrayFromGLType(type, {clamped: false});\n      const components = glFormatToComponents(format);\n      // TODO - check for composite type (components = 1).\n      pixelArray = pixelArray || new ArrayType(width * height * components);\n    }\n\n    // Pixel array available, if necessary, deduce type from it.\n    type = type || getGLTypeFromTypedArray(pixelArray);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    this.gl.readPixels(x, y, width, height, format, type, pixelArray);\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return pixelArray;\n  }\n\n  // Reads data into provided buffer object asynchronously\n  // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n  readPixelsToBuffer({\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    format = GL.RGBA,\n    type, // When not provided, auto deduced from buffer or GL.UNSIGNED_BYTE\n    buffer = null, // A new Buffer object is created when not provided.\n    byteOffset = 0 // byte offset in buffer object\n  }) {\n    const {gl} = this;\n\n    // Asynchronus read (PIXEL_PACK_BUFFER) is WebGL2 only feature\n    assertWebGL2Context(gl);\n\n    // deduce type if not available.\n    type = type || (buffer ? buffer.type : GL.UNSIGNED_BYTE);\n\n    if (!buffer) {\n      // Create new buffer with enough size\n      const components = glFormatToComponents(format);\n      const byteCount = glTypeToBytes(type);\n      const bytes = byteOffset + (width * height * components * byteCount);\n      buffer = new Buffer(gl, {\n        bytes,\n        type,\n        size: components\n      });\n    }\n\n    buffer.bind({target: GL.PIXEL_PACK_BUFFER});\n    withParameters(gl, {framebuffer: this}, () => {\n      gl.readPixels(x, y, width, height, format, type, byteOffset);\n    });\n    buffer.unbind({target: GL.PIXEL_PACK_BUFFER});\n\n    return buffer;\n  }\n\n  // Reads pixels as a dataUrl\n  copyToDataUrl({\n    attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    maxHeight = Number.MAX_SAFE_INTEGER\n  } = {}) {\n    let data = this.readPixels({attachment});\n\n    // Scale down\n    let {width, height} = this;\n    while (height > maxHeight) {\n      ({data, width, height} = scalePixels({data, width, height}));\n    }\n\n    // Flip to top down coordinate system\n    flipRows({data, width, height});\n\n    /* global document */\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const context = canvas.getContext('2d');\n\n    // Copy the pixels to a 2D canvas\n    const imageData = context.createImageData(width, height);\n    imageData.data.set(data);\n    context.putImageData(imageData, 0, 0);\n\n    return canvas.toDataURL();\n  }\n\n  // Reads pixels into an HTML Image\n  copyToImage({\n    image = null,\n    attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    maxHeight = Number.MAX_SAFE_INTEGER\n  } = {}) {\n    /* global Image */\n    const dataUrl = this.readDataUrl({attachment});\n    image = image || new Image();\n    image.src = dataUrl;\n    return image;\n  }\n\n  // copyToFramebuffer({width, height}) {\n  //   const scaleX = width / this.width;\n  //   const scaleY = height / this.height;\n  //   const scale = Math.min(scaleX, scaleY);\n  //   width = width * scale;\n  //   height = height * scale;\n  //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n  //   this.blit();\n  // }\n\n  // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n  copyToTexture({\n    // Target\n    texture,\n    target, // for cubemaps\n    xoffset = 0,\n    yoffset = 0,\n    zoffset = 0,\n    mipmapLevel = 0,\n\n    // Source\n    attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    x = 0,\n    y = 0,\n    width, // defaults to texture width\n    height // defaults to texture height\n  }) {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const prevBuffer = gl.readBuffer(attachment);\n\n    width = Number.isFinite(width) ? width : texture.width;\n    height = Number.isFinite(height) ? height : texture.height;\n\n    // target\n    switch (texture.target) {\n    case GL.TEXTURE_2D:\n    case GL.TEXTURE_CUBE_MAP:\n      gl.copyTexSubImage2D(\n        target || texture.target,\n        mipmapLevel,\n        xoffset,\n        yoffset,\n        x,\n        y,\n        width,\n        height\n      );\n      break;\n    case GL.TEXTURE_2D_ARRAY:\n    case GL.TEXTURE_3D:\n      gl.copyTexSubImage3D(\n        target || texture.target,\n        mipmapLevel,\n        xoffset,\n        yoffset,\n        zoffset,\n        x,\n        y,\n        width,\n        height\n      );\n      break;\n    default:\n    }\n\n    gl.readBuffer(prevBuffer);\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    return texture;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  blit({\n    srcFramebuffer,\n    attachment = GL.COLOR_ATTACHMENT0,\n    srcX0 = 0, srcY0 = 0, srcX1, srcY1,\n    dstX0 = 0, dstY0 = 0, dstX1, dstY1,\n    color = true,\n    depth = false,\n    stencil = false,\n    mask = 0,\n    filter = GL.NEAREST\n  }) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n\n    if (!srcFramebuffer.handle && attachment === GL.COLOR_ATTACHMENT0) {\n      attachment = GL.FRONT;\n    }\n\n    if (color) {\n      mask |= GL.COLOR_BUFFER_BIT;\n    }\n    if (depth) {\n      mask |= GL.DEPTH_BUFFER_BIT;\n    }\n    if (stencil) {\n      mask |= GL.STENCIL_BUFFER_BIT;\n    }\n    assert(mask);\n\n    srcX1 = srcX1 === undefined ? srcFramebuffer.width : srcX1;\n    srcY1 = srcY1 === undefined ? srcFramebuffer.height : srcY1;\n    dstX1 = dstX1 === undefined ? this.width : dstX1;\n    dstY1 = dstY1 === undefined ? this.height : dstY1;\n\n    const prevDrawHandle = gl.bindFramebuffer(GL.DRAW_FRAMEBUFFER, this.handle);\n    const prevReadHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, srcFramebuffer.handle);\n    gl.readBuffer(attachment);\n    gl.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);\n    gl.readBuffer(this.readBuffer);\n    gl.bindFramebuffer(GL.READ_FRAMEBUFFER, prevReadHandle || null);\n    gl.bindFramebuffer(GL.DRAW_FRAMEBUFFER, prevDrawHandle || null);\n\n    return this;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region of the framebuffer\n  invalidate({attachments = [], x = 0, y = 0, width, height}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n    const prevHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments);\n    } else {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    gl.bindFramebuffer(GL.READ_FRAMEBUFFER, prevHandle);\n    return this;\n  }\n\n  // Return the value for `pname` of the specified attachment.\n  // The type returned is the type of the requested pname\n  getAttachmentParameter(attachment, pname, keys) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(GL.FRAMEBUFFER, attachment, pname);\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, null);\n    }\n    if (keys && value > 1000) {\n      value = glKey(this.gl, value);\n    }\n    return value;\n  }\n\n  getAttachmentParameters(\n    attachment = GL.COLOR_ATTACHMENT0,\n    keys,\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || []\n  ) {\n    const values = {};\n    for (const pname of parameters) {\n      const key = keys ? glKey(this.gl, pname) : pname;\n      values[key] = this.getAttachmentParameter(attachment, pname, keys);\n    }\n    return values;\n  }\n\n  getParameters(keys = true) {\n    const attachments = Object.keys(this.attachments);\n    // if (this === this.gl.luma.defaultFramebuffer) {\n    //   attachments = [GL.COLOR_ATTACHMENT0, GL.DEPTH_STENCIL_ATTACHMENT];\n    // }\n    const parameters = {};\n    for (const attachmentName of attachments) {\n      const attachment = Number(attachmentName);\n      const key = keys ? glKey(this.gl, attachment) : attachment;\n      parameters[key] = this.getAttachmentParameters(attachment, keys);\n    }\n    return parameters;\n  }\n\n  // DEBUG\n\n  // Note: Will only work when called in an event handler\n  show() {\n    /* global window */\n    if (typeof window !== 'undefined') {\n      window.open(this.copyToDataUrl(), 'luma-debug-texture');\n    }\n    return this;\n  }\n\n  log(priority = 0, message = '') {\n    if (priority > log.priority || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || `Framebuffer ${this.id}`;\n    const image = this.copyToDataUrl({maxHeight: 100});\n    log.image({priority, message, image}, message)();\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments({color, depth, stencil, width, height}) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        id: `${this.id}-color0`,\n        pixels: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n          [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n    }\n\n    if (depth && stencil) {\n      // TODO - handle separate stencil\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT] =\n        new Renderbuffer(this.gl, {\n          id: `${this.id}-depth-stencil`,\n          format: GL.DEPTH24_STENCIL8,\n          width,\n          height: 111\n        });\n        // TODO - optional texture\n        // new Texture2D(this.gl, {\n        //   id: `${this.id}-depth-stencil`,\n        //   format: GL.DEPTH24_STENCIL8,\n        //   dataFormat: GL.DEPTH_STENCIL,\n        //   type: GL.UNSIGNED_INT_24_8,\n        //   width,\n        //   height,\n        //   mipmaps: false\n        // });\n    } else if (depth) {\n      // Add a depth buffer if requested and not supplied\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_ATTACHMENT] =\n        new Renderbuffer(this.gl, {\n          id: `${this.id}-depth`,\n          format: GL.DEPTH_COMPONENT16,\n          width,\n          height\n        });\n    } else if (stencil) {\n      // TODO - handle separate stencil\n      assert(false);\n    }\n\n    return defaultAttachments;\n  }\n\n  _unattach({attachment}) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n    this.gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, null);\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL.COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL.COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n    case GL.TEXTURE_2D_ARRAY:\n    case GL.TEXTURE_3D:\n      gl.framebufferTextureLayer(GL.FRAMEBUFFER, attachment, texture.target, level, layer);\n      break;\n\n    case GL.TEXTURE_CUBE_MAP:\n      // layer must be a cubemap face (or if index, converted to cube map face)\n      const face = mapIndexToCubeMapFace(layer);\n      gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, face, texture.handle, level);\n      break;\n\n    case GL.TEXTURE_2D:\n      gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, texture.handle, level);\n      break;\n\n    default:\n      assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(gl, readBuffer) {\n    if (isWebGL2(gl)) {\n      gl.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(readBuffer === GL.COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS);\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(gl, drawBuffers) {\n    if (isWebGL2(gl)) {\n      gl.drawBuffers(drawBuffers);\n    } else {\n      const ext = gl.getExtension('WEBGL.draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(drawBuffers.length === 1 &&\n          (drawBuffers[0] === GL.COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS);\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  // TODO - move to webgl1 polyfills\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n    case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n      return !caps.webgl2 ? 0 : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n      return !caps.webgl2 ? 8 : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n      return !caps.webgl2 ? GL.UNSIGNED_INT : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n      return !caps.webgl2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n    default:\n      return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n\n  _bindHandle(handle) {\n    return this.gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL.TEXTURE_CUBE_MAP_POSITIVE_X ? layer + GL.TEXTURE_CUBE_MAP_POSITIVE_X : layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n\nexport const FRAMEBUFFER_ATTACHMENT_PARAMETERS = [\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, // WebGLRenderbuffer or WebGLTexture\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint\n  // EXT_sRGB or WebGL2\n  GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, // GL.LINEAR, GL.SRBG\n  // WebGL2\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE // GLint\n  // GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\n  // GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.\n];\n\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\n"],"file":"framebuffer.js"}