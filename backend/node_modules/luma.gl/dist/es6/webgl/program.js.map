{"version":3,"sources":["../../../src/webgl/program.js"],"names":["Resource","Texture","Framebuffer","parseUniformName","getUniformSetter","VertexShader","FragmentShader","ProgramConfiguration","withParameters","checkUniformValues","areUniformsEqual","assertWebGL2Context","isWebGL2","getPrimitiveDrawMode","getKey","log","uid","assert","LOG_PROGRAM_PERF_PRIORITY","GL_SEPARATE_ATTRIBS","Program","constructor","gl","opts","stubRemovedMethods","_isCached","initialize","Object","seal","_setId","id","props","vs","fs","varyings","bufferMode","source","uniforms","samplers","transformFeedbackVaryings","handle","_compileAndLink","_readUniformLocationsFromLinkedProgram","configuration","setProps","delete","setUniforms","draw","logPriority","drawMode","vertexCount","offset","start","end","isIndexed","indexType","isInstanced","instanceCount","vertexArray","transformFeedback","framebuffer","parameters","undefined","fb","message","useProgram","bindForDraw","deprecated","assign","primitiveMode","begin","drawElementsInstanced","isNaN","drawRangeElements","drawElements","drawArraysInstanced","drawArrays","setSamplers","_onChangeCallback","somethingChanged","key","_uniformSetters","_setUniforms","uniformName","uniform","uniformSetter","sampler","texture","textureIndex","_textureIndexCounter","bind","_createHandle","createProgram","_deleteHandle","deleteProgram","_getOptionsFromHandle","shaderHandles","getAttachedShaders","shaderHandle","type","getShaderParameter","_getParameter","pname","getProgramParameter","programName","_getName","getName","replace","attachShader","time","linkProgram","timeEnd","debug","priority","validateProgram","linked","Error","getProgramInfoLog","_uniformCount","i","info","getActiveUniform","name","isArray","location","getUniformLocation","reset","getActiveUniforms","uniformIndices","getUniformBlockIndex","blockName","getActiveUniformBlockParameter","blockIndex","uniformBlockBinding","blockBinding"],"mappings":"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","sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from '../constants';\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport {withParameters} from '../webgl-context/context-state';\nimport {checkUniformValues, areUniformsEqual} from '../webgl/uniforms';\nimport {assertWebGL2Context, isWebGL2} from '../webgl-utils';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {getKey} from '../webgl-utils/constants-to-keys';\nimport {log, uid} from '../utils';\nimport assert from '../utils/assert';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\n// const GL_INTERLEAVED_ATTRIBS = 0x8C8C;\nconst GL_SEPARATE_ATTRIBS = 0x8C8D;\n\nexport default class Program extends Resource {\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    this.stubRemovedMethods('Program', 'v6.0', [\n      'setVertexArray',\n      'setAttributes',\n      'setBuffers',\n      'unsetBuffers',\n\n      'use',\n      'getUniformCount',\n      'getUniformInfo',\n      'getUniformLocation',\n      'getUniformValue',\n\n      'getVarying',\n      'getFragDataLocation',\n      'getAttachedShaders',\n      'getAttributeCount',\n      'getAttributeLocation',\n      'getAttributeInfo'\n    ]);\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    this.initialize(opts);\n\n    Object.seal(this);\n\n    this._setId(opts.id);\n  }\n\n  initialize(props = {}) {\n    const {vs, fs, varyings, bufferMode = GL_SEPARATE_ATTRIBS} = props;\n    // Create shaders if needed\n    this.vs = typeof vs === 'string' ?\n      new VertexShader(this.gl, {id: `${props.id}-vs`, source: vs}) :\n      vs;\n    this.fs = typeof fs === 'string' ?\n      new FragmentShader(this.gl, {id: `${props.id}-fs`, source: fs}) :\n      fs;\n    assert(this.vs instanceof VertexShader);\n    assert(this.fs instanceof FragmentShader);\n\n    // uniforms\n    this.uniforms = {};\n    this.samplers = {};\n\n    // Setup varyings if supplied\n    if (varyings) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n    this._readUniformLocationsFromLinkedProgram();\n    this.configuration = new ProgramConfiguration(this);\n\n    return this.setProps(props);\n  }\n\n  delete(opts = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(opts);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms, props.samplers);\n    }\n    return this;\n  }\n\n  // Another thing about the WebGL API is that there are so many ways to draw things.\n  // This function unifies those ways into a single call using common parameters with sane defaults\n  draw({\n    logPriority,\n\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    isInstanced = false,\n    instanceCount = 0,\n\n    vertexArray = null,\n    transformFeedback,\n    framebuffer,\n    parameters = {},\n\n    // Deprecated\n    uniforms = {},\n    samplers = {}\n  }) {\n    if (logPriority !== undefined) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message =\n        `mode=${getKey(this.gl, drawMode)} verts=${vertexCount} ` +\n        `instances=${instanceCount} indexType=${getKey(this.gl, indexType)} ` +\n        `isInstanced=${isInstanced} isIndexed=${isIndexed} ` +\n        `Framebuffer=${fb}`;\n      log.log(logPriority, message)();\n    }\n\n    this.gl.useProgram(this.handle);\n\n    // TODO - move vertex array binding and transform feedback binding to withParameters?\n    assert(vertexArray);\n\n    vertexArray.bindForDraw(vertexCount, instanceCount, () => {\n\n      if (uniforms) {\n        log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)');\n        this.setUniforms(uniforms, samplers);\n      }\n\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {framebuffer});\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      withParameters(this.gl, parameters,\n        () => {\n          // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n          if (isIndexed && isInstanced) {\n            this.gl.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n          } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n            this.gl.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n          } else if (isIndexed) {\n            this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n          } else if (isInstanced) {\n            this.gl.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n          } else {\n            this.gl.drawArrays(drawMode, offset, vertexCount);\n          }\n        }\n      );\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n\n    });\n\n    return this;\n  }\n\n  setSamplers(samplers) {\n    Object.assign(this.samplers, samplers);\n  }\n\n  setUniforms(uniforms = {}, samplers = {}, _onChangeCallback = () => {}) {\n    // Simple change detection - if all uniforms are unchanged, do nothing\n    // TODO - Disabled since it interferes with textures\n    // we must still rebind texture units to current program's textures before drawing\n    // If modifying, test with `picking` example on website\n    let somethingChanged = false;\n    for (const key in uniforms) {\n      if (!areUniformsEqual(this.uniforms[key], uniforms[key])) {\n        somethingChanged = true;\n        break;\n      }\n    }\n\n    if (somethingChanged) {\n      _onChangeCallback();\n      checkUniformValues(uniforms, this.id, this._uniformSetters);\n      Object.assign(this.uniforms, uniforms);\n      Object.assign(this.samplers, samplers);\n    }\n\n    // TODO - should only set updated uniforms\n    this._setUniforms(this.uniforms, this.samplers);\n\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // Apply a set of uniform values to a program\n  // Only uniforms actually present in the linked program will be updated.\n  /* eslint-disable max-depth */\n  _setUniforms(uniforms, samplers = {}) {\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      let uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n      const sampler = samplers[uniformName];\n\n      if (uniformSetter) {\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          if (uniformSetter.textureIndex === undefined) {\n            uniformSetter.textureIndex = this._textureIndexCounter++;\n          }\n\n          // Bind texture to index\n          const texture = uniform;\n          const {textureIndex} = uniformSetter;\n\n          // TODO - this should be separated out from uniform setting, since it needs to be done\n          // before every draw even if uniforms have not changed\n          texture.bind(textureIndex);\n\n          // Bind a sampler (if supplied) to index\n          if (sampler) {\n            sampler.bind(textureIndex);\n          }\n\n          // Set the uniform sampler to the texture index\n          uniformSetter(textureIndex);\n        } else {\n          // Just set the value\n          uniformSetter(uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  // Extract opts needed to initialize a `Program` from an independently created WebGLProgram handle\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n      case GL.VERTEX_SHADER:\n        opts.vs = new VertexShader({handle: shaderHandle});\n        break;\n      case GL.FRAGMENT_SHADER:\n        opts.fs = new FragmentShader({handle: shaderHandle});\n        break;\n      default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // If program is not named, name it after shader names\n  // TODO - this.id will already have been initialized\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n      this.id = uid(programName);\n    }\n  }\n\n  // Generate a default name for the program based on names of the shaders\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    if (gl.debug || log.priority > 0) {\n      gl.validateProgram(this.handle);\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  // query uniform locations and build name to setter map.\n  _readUniformLocationsFromLinkedProgram() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(GL.ACTIVE_UNIFORMS);\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {name, isArray} = parseUniformName(info.name);\n      const location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info, isArray);\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  // stub for shader chache, should reset uniforms to default valiues\n  reset() {\n  }\n\n  // TO BE REMOVED in v7?\n\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    return this.gl.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n}\n"],"file":"program.js"}