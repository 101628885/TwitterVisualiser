{"version":3,"sources":["../../../src/webgl/query.js"],"names":["Resource","FEATURES","hasFeatures","isWebGL2","queryManager","assert","noop","x","ERR_GPU_DISJOINT","ERR_TIMER_QUERY_NOT_SUPPORTED","GL_QUERY_COUNTER_BITS_EXT","GL_QUERY_RESULT","GL_QUERY_RESULT_AVAILABLE","GL_TIME_ELAPSED_EXT","GL_TIMESTAMP_EXT","GL_GPU_DISJOINT_EXT","GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","GL_ANY_SAMPLES_PASSED","GL_ANY_SAMPLES_PASSED_CONSERVATIVE","Query","isSupported","gl","opts","webgl2","hasTimerQuery","TIMER_QUERY","supported","key","queryCounterBits","getQuery","constructor","onComplete","onError","target","promise","Object","seal","beginTimeElapsedQuery","begin","beginOcclusionQuery","conservative","beginTransformFeedbackQuery","getTimestamp","beginQuery","queryCounter","handle","error","rejectQuery","end","ext","endQuery","cancel","cancelQuery","isResultAvailable","getQueryParameter","getResult","result","Number","isFinite","poll","_createHandle","createQuery","_deleteHandle","deleteQuery","setInvalidator","queryType","errorMessage","checkInvalid","getParameter"],"mappings":"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","sourcesContent":["// WebGL2 Query (also handles disjoint timer extensions)\nimport Resource from './resource';\nimport {FEATURES, hasFeatures} from '../webgl-context/context-features';\nimport {isWebGL2} from '../webgl-utils';\nimport queryManager from '../webgl-utils/query-manager';\nimport assert from '../utils/assert';\n\nconst noop = x => x;\n\nconst ERR_GPU_DISJOINT = 'Disjoint GPU operation invalidated timer queries';\nconst ERR_TIMER_QUERY_NOT_SUPPORTED = 'Timer queries require \"EXT_disjoint_timer_query\" extension';\n\nconst GL_QUERY_COUNTER_BITS_EXT = 0x8864; // # bits in query result for the given target.\n\nconst GL_QUERY_RESULT = 0x8866;           // Returns a GLuint containing the query result.\nconst GL_QUERY_RESULT_AVAILABLE = 0x8867; // whether query result is available.\n\nconst GL_TIME_ELAPSED_EXT = 0x88BF;       // Elapsed time (in nanoseconds).\nconst GL_TIMESTAMP_EXT = 0x8E28;          // The current time.\nconst GL_GPU_DISJOINT_EXT = 0x8FBB;       // Whether GPU performed any disjoint operation.\n\nconst GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88; // #primitives written to feedback buffers\nconst GL_ANY_SAMPLES_PASSED = 0x8C2F;             // Occlusion query (if drawing passed depth test)\nconst GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;  // Occlusion query less accurate/faster version\n\nexport default class Query extends Resource {\n\n  // Returns true if Query is supported by the WebGL implementation\n  // Can also check whether timestamp queries are available.\n  static isSupported(gl, opts = []) {\n    const webgl2 = isWebGL2(gl);\n\n    // Initial value\n    const hasTimerQuery = hasFeatures(gl, FEATURES.TIMER_QUERY);\n    let supported = webgl2 || hasTimerQuery;\n\n    for (const key of opts) {\n      switch (key) {\n      case 'queries':\n        supported = supported && webgl2;\n        break;\n      case 'timers':\n        supported = supported && hasTimerQuery;\n        break;\n      case 'timestamps':\n        const queryCounterBits =\n          hasTimerQuery ? gl.getQuery(GL_TIMESTAMP_EXT, GL_QUERY_COUNTER_BITS_EXT) : 0;\n        supported = supported && (queryCounterBits > 0);\n        break;\n      default:\n        assert(false);\n      }\n    }\n\n    return supported;\n  }\n\n  // Create a query class\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      onComplete = noop,\n      onError = noop\n    } = opts;\n\n    this.target = null;\n    this.onComplete = onComplete;\n    this.onError = onError;\n\n    // query manager needs a promise field\n    this.promise = null;\n\n    Object.seal(this);\n  }\n\n  // Shortcut for timer query (dependent on extension in both WebGL1 and 2)\n  // Measures GPU time delta between this call and a matching `end` call in the\n  // GPU instruction stream.\n  beginTimeElapsedQuery() {\n    return this.begin(GL_TIME_ELAPSED_EXT);\n  }\n\n  // Shortcut for occlusion queries\n  beginOcclusionQuery({conservative = false} = {}) {\n    return this.begin(conservative ? GL_ANY_SAMPLES_PASSED_CONSERVATIVE : GL_ANY_SAMPLES_PASSED);\n  }\n\n  // Shortcut for transformFeedbackQuery\n  beginTransformFeedbackQuery() {\n    return this.begin(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);\n  }\n\n  // Generates a GPU time stamp when the GPU instruction stream reaches this instruction.\n  // To measure time deltas, two timestamp queries are needed.\n  // Note: timestamp() queries may not be available even when the timer query extension is.\n  getTimestamp() {\n    queryManager.beginQuery(this, this.onComplete, this.onError);\n    try {\n      this.gl.queryCounter(this.handle, GL_TIMESTAMP_EXT);\n    } catch (error) {\n      queryManager.rejectQuery(this, ERR_TIMER_QUERY_NOT_SUPPORTED);\n    }\n    return this;\n  }\n\n  // Due to OpenGL API limitations, after calling `begin()` on one Query\n  // instance, `end()` must be called on that same instance before\n  // calling `begin()` on another query. While there can be multiple\n  // outstanding queries representing disjoint `begin()`/`end()` intervals.\n  // It is not possible to interleave or overlap `begin` and `end` calls.\n  begin(target) {\n    // - Triggering a new query when a Query is already tracking an\n    //   unresolved query causes that query to be cancelled.\n    queryManager.beginQuery(this, this.onComplete, this.onError);\n    this.target = target;\n\n    try {\n      this.gl.beginQuery(this.target, this.handle);\n    } catch (error) {\n      queryManager.rejectQuery(this, 'Query not supported');\n    }\n    return this;\n  }\n\n  // ends the current query\n  end() {\n    // Note: calling end does not affect the pending promise\n    if (this.target) {\n      this.ext.endQuery(this.target);\n      this.target = null;\n    }\n    return this;\n  }\n\n  // Cancels a pending query\n  cancel() {\n    this.end();\n    queryManager.cancelQuery(this);\n    return this;\n  }\n\n  // Returns true if the query result is available\n  isResultAvailable() {\n    return this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT_AVAILABLE);\n  }\n\n  // Returns the query result, converted to milliseconds to match JavaScript conventions.\n  // TODO - what about non-timer queries\n  getResult() {\n    const result = this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT);\n    return Number.isFinite(result) ? result / 1e6 : 0;\n  }\n\n  static poll(gl) {\n    queryManager.poll(gl);\n  }\n\n  _createHandle() {\n    return Query.isSupported(this.gl) ? this.gl.createQuery() : null;\n  }\n\n  _deleteHandle() {\n    queryManager.deleteQuery(this);\n    this.gl.deleteQuery(this.handle);\n  }\n}\n\n// NOTE: This call lets the queryManager know how to detect disjoint GPU state\n// It will check dsjoint state on polls and before adding a new query\n// and reject any outstanding TimerQueries with our supplied error message.\nqueryManager.setInvalidator({\n  queryType: Query,\n  errorMessage: ERR_GPU_DISJOINT,\n  // Note: Querying the disjoint state resets it\n  checkInvalid: gl => gl.getParameter(GL_GPU_DISJOINT_EXT)\n});\n"],"file":"query.js"}