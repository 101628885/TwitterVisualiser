{"version":3,"sources":["../../../src/webgl/renderbuffer.js"],"names":["isWebGL2","Resource","assert","GL_RENDERBUFFER","GL_SAMPLES","GL_RENDERBUFFER_WIDTH","GL_RENDERBUFFER_HEIGHT","GL_RENDERBUFFER_INTERNAL_FORMAT","GL_RENDERBUFFER_SAMPLES","CB_FLOAT_WEBGL2","RENDERBUFFER_FORMATS","gl2","isFormatSupported","gl","format","formats","info","value","gl1","getExtension","Renderbuffer","isSupported","getSamplesForFormat","getInternalformatParameter","constructor","opts","initialize","Object","seal","width","height","samples","bindRenderbuffer","handle","renderbufferStorageMultisample","renderbufferStorage","resize","_createHandle","createRenderbuffer","_deleteHandle","deleteRenderbuffer","_bindHandle","_syncHandle","getParameter","_getParameter","pname","getRenderbufferParameter"],"mappings":"AAEA,SAAQA,QAAR,QAAuB,gBAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAGA,MAAMC,eAAe,GAAG,MAAxB;AACA,MAAMC,UAAU,GAAG,MAAnB;AACA,MAAMC,qBAAqB,GAAG,MAA9B;AACA,MAAMC,sBAAsB,GAAG,MAA/B;AACA,MAAMC,+BAA+B,GAAG,MAAxC;AACA,MAAMC,uBAAuB,GAAG,MAAhC;AAKA,MAAMC,eAAe,GAAG,wBAAxB;AAGA,OAAO,MAAMC,oBAAoB,GAAG;AAClC,WAAwB,EADU;AAElC,WAAwB;AAACC,IAAAA,GAAG,EAAE;AAAN,GAFU;AAGlC,WAAyB;AAACA,IAAAA,GAAG,EAAE;AAAN,GAHS;AAKlC,WAAqB,EALa;AAOlC,WAAoB,EAPc;AAQlC,WAAuB;AAACA,IAAAA,GAAG,EAAE;AAAN,GARW;AASlC,WAAwB;AAACA,IAAAA,GAAG,EAAE;AAAN,GATU;AAYlC,WAAY,EAZsB;AAalC,WAAa,EAbqB;AAclC,WAAc,EAdoB;AAiBlC,WAAS;AAACA,IAAAA,GAAG,EAAE;AAAN,GAjByB;AAkBlC,WAAW;AAACA,IAAAA,GAAG,EAAE;AAAN,GAlBuB;AAmBlC,WAAU;AAACA,IAAAA,GAAG,EAAE;AAAN,GAnBwB;AAoBlC,WAAY;AAACA,IAAAA,GAAG,EAAE;AAAN,GApBsB;AAqBlC,WAAW;AAACA,IAAAA,GAAG,EAAE;AAAN,GArBuB;AAsBlC,WAAY;AAACA,IAAAA,GAAG,EAAE;AAAN,GAtBsB;AAuBlC,WAAW;AAACA,IAAAA,GAAG,EAAE;AAAN,GAvBuB;AAwBlC,WAAU;AAACA,IAAAA,GAAG,EAAE;AAAN,GAxBwB;AAyBlC,WAAY;AAACA,IAAAA,GAAG,EAAE;AAAN,GAzBsB;AA0BlC,WAAW;AAACA,IAAAA,GAAG,EAAE;AAAN,GA1BuB;AA2BlC,WAAa;AAACA,IAAAA,GAAG,EAAE;AAAN,GA3BqB;AA4BlC,WAAY;AAACA,IAAAA,GAAG,EAAE;AAAN,GA5BsB;AA6BlC,WAAa;AAACA,IAAAA,GAAG,EAAE;AAAN,GA7BqB;AA8BlC,WAAY;AAACA,IAAAA,GAAG,EAAE;AAAN,GA9BsB;AA+BlC,WAAW;AAACA,IAAAA,GAAG,EAAE;AAAN,GA/BuB;AAgClC,WAAY;AAACA,IAAAA,GAAG,EAAE;AAAN,GAhCsB;AAkClC,WAAe;AAACA,IAAAA,GAAG,EAAE;AAAN,GAlCmB;AAmClC,WAAc;AAACA,IAAAA,GAAG,EAAE;AAAN,GAnCoB;AAoClC,WAAa;AAACA,IAAAA,GAAG,EAAE;AAAN,GApCqB;AAqClC,WAAiB;AAACA,IAAAA,GAAG,EAAE;AAAN,GArCiB;AAsClC,WAAe;AAACA,IAAAA,GAAG,EAAE;AAAN,GAtCmB;AAuClC,WAAc;AAACA,IAAAA,GAAG,EAAE;AAAN,GAvCoB;AAwClC,WAAc;AAACA,IAAAA,GAAG,EAAE;AAAN,GAxCoB;AAyClC,WAAe;AAACA,IAAAA,GAAG,EAAE;AAAN,GAzCmB;AA4ClC,WAAW;AAACA,IAAAA,GAAG,EAAEF;AAAN,GA5CuB;AA6ClC,WAAY;AAACE,IAAAA,GAAG,EAAEF;AAAN,GA7CsB;AA8ClC,WAAc;AAACE,IAAAA,GAAG,EAAEF;AAAN,GA9CoB;AA+ClC,WAAW;AAACE,IAAAA,GAAG,EAAEF;AAAN,GA/CuB;AAgDlC,WAAY;AAACE,IAAAA,GAAG,EAAEF;AAAN,GAhDsB;AAkDlC,WAAc;AAACE,IAAAA,GAAG,EAAEF;AAAN,GAlDoB;AAoDlC,WAAqB;AAACE,IAAAA,GAAG,EAAEF;AAAN;AApDa,CAA7B;;AAuDP,SAASG,iBAAT,CAA2BC,EAA3B,EAA+BC,MAA/B,EAAuCC,OAAvC,EAAgD;AAC9C,QAAMC,IAAI,GAAGD,OAAO,CAACD,MAAD,CAApB;;AACA,MAAI,CAACE,IAAL,EAAW;AACT,WAAO,KAAP;AACD;;AACD,QAAMC,KAAK,GAAGjB,QAAQ,CAACa,EAAD,CAAR,GAAeG,IAAI,CAACL,GAAL,IAAYK,IAAI,CAACE,GAAhC,GAAsCF,IAAI,CAACE,GAAzD;;AACA,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOJ,EAAE,CAACM,YAAH,CAAgBF,KAAhB,CAAP;AACD;;AACD,SAAOA,KAAP;AACD;;AAED,eAAe,MAAMG,YAAN,SAA2BnB,QAA3B,CAAoC;AAEjD,SAAOoB,WAAP,CAAmBR,EAAnB,EAAuB;AAACC,IAAAA;AAAD,MAAW,EAAlC,EAAsC;AACpC,WAAO,CAACA,MAAD,IAAWF,iBAAiB,CAACC,EAAD,EAAKC,MAAL,EAAaJ,oBAAb,CAAnC;AACD;;AAED,SAAOY,mBAAP,CAA2BT,EAA3B,EAA+B;AAACC,IAAAA;AAAD,GAA/B,EAAyC;AAEvC,WAAOD,EAAE,CAACU,0BAAH,CAA8BpB,eAA9B,EAA+CW,MAA/C,EAAuDV,UAAvD,CAAP;AACD;;AAEDoB,EAAAA,WAAW,CAACX,EAAD,EAAKY,IAAI,GAAG,EAAZ,EAAgB;AACzB,UAAMZ,EAAN,EAAUY,IAAV;AACA,SAAKC,UAAL,CAAgBD,IAAhB;AACAE,IAAAA,MAAM,CAACC,IAAP,CAAY,IAAZ;AACD;;AAGDF,EAAAA,UAAU,CAAC;AAACZ,IAAAA,MAAD;AAASe,IAAAA,KAAK,GAAG,CAAjB;AAAoBC,IAAAA,MAAM,GAAG,CAA7B;AAAgCC,IAAAA,OAAO,GAAG;AAA1C,GAAD,EAA+C;AACvD7B,IAAAA,MAAM,CAACY,MAAD,EAAS,cAAT,CAAN;AACA,SAAKD,EAAL,CAAQmB,gBAAR,CAAyB7B,eAAzB,EAA0C,KAAK8B,MAA/C;;AAEA,QAAIF,OAAO,KAAK,CAAZ,IAAiB/B,QAAQ,CAAC,KAAKa,EAAN,CAA7B,EAAwC;AACtC,WAAKA,EAAL,CAAQqB,8BAAR,CAAuC/B,eAAvC,EAAwD4B,OAAxD,EAAiEjB,MAAjE,EAAyEe,KAAzE,EAAgFC,MAAhF;AACD,KAFD,MAEO;AACL,WAAKjB,EAAL,CAAQsB,mBAAR,CAA4BhC,eAA5B,EAA6CW,MAA7C,EAAqDe,KAArD,EAA4DC,MAA5D;AACD;;AAID,SAAKhB,MAAL,GAAcA,MAAd;AACA,SAAKe,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AAEA,WAAO,IAAP;AACD;;AAEDK,EAAAA,MAAM,CAAC;AAACP,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,EAAkB;AAEtB,QAAID,KAAK,KAAK,KAAKA,KAAf,IAAwBC,MAAM,KAAK,KAAKA,MAA5C,EAAoD;AAClD,aAAO,KAAKJ,UAAL,CAAgB;AAACG,QAAAA,KAAD;AAAQC,QAAAA,MAAR;AAAgBhB,QAAAA,MAAM,EAAE,KAAKA,MAA7B;AAAqCiB,QAAAA,OAAO,EAAE,KAAKA;AAAnD,OAAhB,CAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAGDM,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKxB,EAAL,CAAQyB,kBAAR,EAAP;AACD;;AAEDC,EAAAA,aAAa,GAAG;AACd,SAAK1B,EAAL,CAAQ2B,kBAAR,CAA2B,KAAKP,MAAhC;AACD;;AAEDQ,EAAAA,WAAW,CAACR,MAAD,EAAS;AAClB,SAAKpB,EAAL,CAAQmB,gBAAR,CAAyB7B,eAAzB,EAA0C8B,MAA1C;AACD;;AAEDS,EAAAA,WAAW,CAACT,MAAD,EAAS;AAClB,SAAKnB,MAAL,GAAc,KAAK6B,YAAL,CAAkBpC,+BAAlB,CAAd;AACA,SAAKsB,KAAL,GAAa,KAAKc,YAAL,CAAkBtC,qBAAlB,CAAb;AACA,SAAKyB,MAAL,GAAc,KAAKa,YAAL,CAAkBrC,sBAAlB,CAAd;AACA,SAAKyB,OAAL,GAAe,KAAKY,YAAL,CAAkBnC,uBAAlB,CAAf;AACD;;AAIDoC,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACnB,SAAKhC,EAAL,CAAQmB,gBAAR,CAAyB7B,eAAzB,EAA0C,KAAK8B,MAA/C;AACA,UAAMhB,KAAK,GAAG,KAAKJ,EAAL,CAAQiC,wBAAR,CAAiC3C,eAAjC,EAAkD0C,KAAlD,CAAd;AAEA,WAAO5B,KAAP;AACD;;AAzEgD","sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from '../constants';\nimport {isWebGL2} from '../webgl-utils';\nimport Resource from './resource';\nimport assert from '../utils/assert';\n\n// Define local GL constants to optimize minification\nconst GL_RENDERBUFFER = 0x8D41;\nconst GL_SAMPLES = 0x80A9;\nconst GL_RENDERBUFFER_WIDTH = 0x8D42;\nconst GL_RENDERBUFFER_HEIGHT = 0x8D43;\nconst GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;\nconst GL_RENDERBUFFER_SAMPLES = 0x8CAB;\n\n// Define local extension strings to optimize minification\n// const SRGB = 'EXT_sRGB';\n// const CB_FLOAT_WEBGL1 = 'WEBGL_color_buffer_float';\nconst CB_FLOAT_WEBGL2 = 'EXT_color_buffer_float';\n// const CB_HALF_FLOAT_WEBGL1 = 'EXT_color_buffer_half_float';\n\nexport const RENDERBUFFER_FORMATS = {\n  [GL.DEPTH_COMPONENT16]: {}, // 16 depth bits.\n  [GL.DEPTH_COMPONENT24]: {gl2: true},\n  [GL.DEPTH_COMPONENT32F]: {gl2: true},\n\n  [GL.STENCIL_INDEX8]: {}, // 8 stencil bits.\n\n  [GL.DEPTH_STENCIL]: {},\n  [GL.DEPTH24_STENCIL8]: {gl2: true},\n  [GL.DEPTH32F_STENCIL8]: {gl2: true},\n\n  // When using a WebGL 1 context, color renderbuffer formats are limited\n  [GL.RGBA4]: {},\n  [GL.RGB565]: {},\n  [GL.RGB5_A1]: {},\n\n  // When using a WebGL 2 context, the following values are available additionally:\n  [GL.R8]: {gl2: true},\n  [GL.R8UI]: {gl2: true},\n  [GL.R8I]: {gl2: true},\n  [GL.R16UI]: {gl2: true},\n  [GL.R16I]: {gl2: true},\n  [GL.R32UI]: {gl2: true},\n  [GL.R32I]: {gl2: true},\n  [GL.RG8]: {gl2: true},\n  [GL.RG8UI]: {gl2: true},\n  [GL.RG8I]: {gl2: true},\n  [GL.RG16UI]: {gl2: true},\n  [GL.RG16I]: {gl2: true},\n  [GL.RG32UI]: {gl2: true},\n  [GL.RG32I]: {gl2: true},\n  [GL.RGB8]: {gl2: true},\n  [GL.RGBA8]: {gl2: true},\n  // [GL.SRGB8_ALPHA8]: {gl2: true, gl1: SRGB}, // When using the EXT_sRGB WebGL1 extension\n  [GL.RGB10_A2]: {gl2: true},\n  [GL.RGBA8UI]: {gl2: true},\n  [GL.RGBA8I]: {gl2: true},\n  [GL.RGB10_A2UI]: {gl2: true},\n  [GL.RGBA16UI]: {gl2: true},\n  [GL.RGBA16I]: {gl2: true},\n  [GL.RGBA32I]: {gl2: true},\n  [GL.RGBA32UI]: {gl2: true},\n\n  // When using a WebGL 2 context and the EXT_color_buffer_float WebGL2 extension\n  [GL.R16F]: {gl2: CB_FLOAT_WEBGL2},\n  [GL.RG16F]: {gl2: CB_FLOAT_WEBGL2},\n  [GL.RGBA16F]: {gl2: CB_FLOAT_WEBGL2},\n  [GL.R32F]: {gl2: CB_FLOAT_WEBGL2},\n  [GL.RG32F]: {gl2: CB_FLOAT_WEBGL2},\n  // TODO - can't get WEBGL_color_buffer_float to work on renderbuffers\n  [GL.RGBA32F]: {gl2: CB_FLOAT_WEBGL2},\n  // [GL.RGBA32F]: {gl2: CB_FLOAT_WEBGL2, gl1: CB_FLOAT_WEBGL1},\n  [GL.R11F_G11F_B10F]: {gl2: CB_FLOAT_WEBGL2}\n};\n\nfunction isFormatSupported(gl, format, formats) {\n  const info = formats[format];\n  if (!info) {\n    return false;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  if (typeof value === 'string') {\n    return gl.getExtension(value);\n  }\n  return value;\n}\n\nexport default class Renderbuffer extends Resource {\n\n  static isSupported(gl, {format} = {}) {\n    return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);\n  }\n\n  static getSamplesForFormat(gl, {format}) {\n    // Polyfilled to return [0] under WebGL1\n    return gl.getInternalformatParameter(GL_RENDERBUFFER, format, GL_SAMPLES);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  // Creates and initializes a renderbuffer object's data store\n  initialize({format, width = 1, height = 1, samples = 0}) {\n    assert(format, 'Needs format');\n    this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);\n\n    if (samples !== 0 && isWebGL2(this.gl)) {\n      this.gl.renderbufferStorageMultisample(GL_RENDERBUFFER, samples, format, width, height);\n    } else {\n      this.gl.renderbufferStorage(GL_RENDERBUFFER, format, width, height);\n    }\n\n    // this.gl.bindRenderbuffer(GL_RENDERBUFFER, null);\n\n    this.format = format;\n    this.width = width;\n    this.height = height;\n    this.samples = samples;\n\n    return this;\n  }\n\n  resize({width, height}) {\n    // Don't resize if width/height haven't changed\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({width, height, format: this.format, samples: this.samples});\n    }\n    return this;\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createRenderbuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteRenderbuffer(this.handle);\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindRenderbuffer(GL_RENDERBUFFER, handle);\n  }\n\n  _syncHandle(handle) {\n    this.format = this.getParameter(GL_RENDERBUFFER_INTERNAL_FORMAT);\n    this.width = this.getParameter(GL_RENDERBUFFER_WIDTH);\n    this.height = this.getParameter(GL_RENDERBUFFER_HEIGHT);\n    this.samples = this.getParameter(GL_RENDERBUFFER_SAMPLES);\n  }\n\n  // @param {Boolean} opt.autobind=true - method call will bind/unbind object\n  // @returns {GLenum|GLint} - depends on pname\n  _getParameter(pname) {\n    this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);\n    const value = this.gl.getRenderbufferParameter(GL_RENDERBUFFER, pname);\n    // this.gl.bindRenderbuffer(GL_RENDERBUFFER, null);\n    return value;\n  }\n}\n"],"file":"renderbuffer.js"}