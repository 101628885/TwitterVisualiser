{"version":3,"sources":["../../../src/webgl/shader.js"],"names":["Resource","parseGLSLCompilerError","getShaderName","assertWebGLContext","uid","log","assert","ERR_SOURCE","GL_FRAGMENT_SHADER","GL_VERTEX_SHADER","GL_COMPILE_STATUS","GL_SHADER_TYPE","Shader","getTypeName","shaderType","constructor","gl","props","source","id","initialize","shaderName","_compile","getParameter","pname","getShaderParameter","handle","toString","getName","getSource","getShaderSource","getTranslatedSource","extension","getExtension","getTranslatedShaderSource","shaderSource","compileShader","compileStatus","infoLog","getShaderInfoLog","errors","warnings","error","warn","Error","_deleteHandle","deleteShader","_getOptsFromHandle","type","VertexShader","deprecated","Object","assign","_createHandle","createShader","FragmentShader"],"mappings":"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","sourcesContent":["import Resource from './resource';\nimport {parseGLSLCompilerError, getShaderName} from '../webgl-utils';\nimport {assertWebGLContext} from '../webgl-utils';\nimport {uid, log} from '../utils';\nimport assert from '../utils/assert';\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\n\nconst GL_FRAGMENT_SHADER = 0x8B30;\nconst GL_VERTEX_SHADER = 0x8B31;\nconst GL_COMPILE_STATUS = 0x8B81;\nconst GL_SHADER_TYPE = 0x8B4F;\n\n// For now this is an internal class\nexport class Shader extends Resource {\n\n  static getTypeName(shaderType) {\n    switch (shaderType) {\n    case GL_VERTEX_SHADER: return 'vertex-shader';\n    case GL_FRAGMENT_SHADER: return 'fragment-shader';\n    default: assert(false); return 'unknown';\n    }\n  }\n\n  /* eslint-disable max-statements */\n  constructor(gl, props) {\n    assertWebGLContext(gl);\n\n    // Validate arguments\n    assert(typeof props.source === 'string', ERR_SOURCE);\n\n    // Deduce an id, from shader source, or supplied id, or shader type\n    const id =\n      getShaderName(props.source, null) ||\n      props.id ||\n      uid(`unnamed ${Shader.getTypeName(props.shaderType)}`);\n\n    super(gl, {id});\n\n    this.shaderType = props.shaderType;\n    this.source = props.source;\n\n    this.initialize(props);\n  }\n\n  initialize({source}) {\n    const shaderName = getShaderName(source, null);\n    if (shaderName) {\n      this.id = uid(shaderName);\n    }\n    this._compile(source);\n  }\n\n  // Accessors\n\n  getParameter(pname) {\n    return this.gl.getShaderParameter(this.handle, pname);\n  }\n\n  toString() {\n    return `${this.getTypeName(this.shaderType)}:${this.id}`;\n  }\n\n  getName() {\n    return getShaderName(this.source) || 'unnamed-shader';\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  // Debug method - Returns translated source if available\n  getTranslatedSource() {\n    const extension = this.gl.getExtension('WEBGL_debug_shaders');\n    return extension ?\n      extension.getTranslatedShaderSource(this.handle) :\n      'No translated source available. WEBGL_debug_shaders not implemented';\n  }\n\n  // PRIVATE METHODS\n  _compile() {\n    this.gl.shaderSource(this.handle, this.source);\n    this.gl.compileShader(this.handle);\n\n    // TODO - For performance reasons, avoid checking shader compilation errors on production?\n    // TODO - Load log even when no error reported, to catch warnings?\n    // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n    const compileStatus = this.getParameter(GL_COMPILE_STATUS);\n    if (!compileStatus) {\n      const infoLog = this.gl.getShaderInfoLog(this.handle);\n      const {shaderName, errors, warnings} =\n        parseGLSLCompilerError(infoLog, this.source, this.shaderType, this.id);\n      log.error(`GLSL compilation errors in ${shaderName}\\n${errors}`)();\n      log.warn(`GLSL compilation warnings in ${shaderName}\\n${warnings}`)();\n      throw new Error(`GLSL compilation errors in ${shaderName}`);\n    }\n  }\n\n  _deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  _getOptsFromHandle() {\n    return {\n      type: this.getParameter(GL_SHADER_TYPE),\n      source: this.getSource()\n    };\n  }\n}\n\nexport class VertexShader extends Shader {\n  constructor(gl, props) {\n    // DEPRECATED: Support old constructor signature: VertexShader(gl, source)\n    if (typeof props === 'string') {\n      log.deprecated('new FragmentShader(gl, source)', 'new FragmentShader(gl, {source})', '6.1');\n      props = {source: props};\n    }\n    super(gl, Object.assign({}, props, {shaderType: GL_VERTEX_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL_VERTEX_SHADER);\n  }\n}\n\nexport class FragmentShader extends Shader {\n  constructor(gl, props) {\n    // DEPRECATED: Support old constructor signature: FragmentShader(gl, source)\n    if (typeof props === 'string') {\n      log.deprecated('new FragmentShader(gl, source)', 'new FragmentShader(gl, {source})', '6.1');\n      props = {source: props};\n    }\n\n    super(gl, Object.assign({}, props, {shaderType: GL_FRAGMENT_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL_FRAGMENT_SHADER);\n  }\n}\n"],"file":"shader.js"}