{"version":3,"sources":["../../../src/webgl/texture-3d.js"],"names":["isWebGL2","assertWebGL2Context","withParameters","Texture","Buffer","Texture3D","isSupported","gl","constructor","opts","Object","assign","target","width","height","depth","seal","setImageData","generateMipmap","initialize","pixels","settings","setImage3D","setParameters","level","internalformat","border","format","type","offset","ArrayBuffer","isView","texImage3D","bindBuffer","handle"],"mappings":"AACA,SAAQA,QAAR,EAAkBC,mBAAlB,QAA4C,gBAA5C;AACA,SAAQC,cAAR,QAA6B,gCAA7B;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,eAAe,MAAMC,SAAN,SAAwBF,OAAxB,CAAgC;AAE7C,SAAOG,WAAP,CAAmBC,EAAnB,EAAuB;AACrB,WAAOP,QAAQ,CAACO,EAAD,CAAf;AACD;;AAcDC,EAAAA,WAAW,CAACD,EAAD,EAAKE,IAAI,GAAG,EAAZ,EAAgB;AACzBR,IAAAA,mBAAmB,CAACM,EAAD,CAAnB;AACA,UAAMA,EAAN,EAAUG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,IAAlB,EAAwB;AAACG,MAAAA,MAAM,EAAEH,IAAI,CAACG,MAAL;AAAT,KAAxB,CAAV;AAEA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,KAAL,GAAa,IAAb;AACAL,IAAAA,MAAM,CAACM,IAAP,CAAY,IAAZ;AAEA,SAAKC,YAAL,CAAkBR,IAAlB;;AACA,QAAIA,IAAI,CAACS,cAAT,EAAyB;AACvB,WAAKA,cAAL;AACD;AACF;;AAEDC,EAAAA,UAAU,CAACV,IAAI,GAAG,EAAR,EAAY;AACpB,SAAKA,IAAL,GAAYC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKF,IAAvB,EAA6BA,IAA7B,CAAZ;AADoB,uBAEO,KAAKA,IAFZ;AAAA,UAEbW,MAFa,cAEbA,MAFa;AAAA,UAELC,QAFK,cAELA,QAFK;;AAGpB,QAAIA,QAAJ,EAAc;AACZnB,MAAAA,cAAc,CAACmB,QAAD,EAAW,MAAM;AAC7B,YAAID,MAAJ,EAAY;AACV,eAAKE,UAAL,CAAgB,KAAKb,IAArB;AACD;AACF,OAJa,CAAd;AAKA,WAAKc,aAAL,CAAmBd,IAAnB;AACD;AACF;;AAKDa,EAAAA,UAAU,CAAC;AACTE,IAAAA,KAAK,GAAG,CADC;AAETC,IAAAA,cAAc,OAFL;AAGTZ,IAAAA,KAHS;AAITC,IAAAA,MAJS;AAKTC,IAAAA,KAAK,GAAG,CALC;AAMTW,IAAAA,MAAM,GAAG,CANA;AAOTC,IAAAA,MAPS;AAQTC,IAAAA,IAAI,OARK;AASTC,IAAAA,MAAM,GAAG,CATA;AAUTT,IAAAA;AAVS,GAAD,EAWP;AACD,QAAIU,WAAW,CAACC,MAAZ,CAAmBX,MAAnB,CAAJ,EAAgC;AAC9B,WAAKb,EAAL,CAAQyB,UAAR,CACE,KAAKpB,MADP,EAEEY,KAFF,EAESC,cAFT,EAGEZ,KAHF,EAGSC,MAHT,EAGiBC,KAHjB,EAGwBW,MAHxB,EAGgCC,MAHhC,EAGwCC,IAHxC,EAG8CR,MAH9C;AAIA;AACD;;AACD,QAAIA,MAAM,YAAYhB,MAAtB,EAA8B;AAC5B,WAAKG,EAAL,CAAQ0B,UAAR,QAA2Cb,MAAM,CAACc,MAAlD;AACA,WAAK3B,EAAL,CAAQyB,UAAR,CACE,KAAKpB,MADP,EAEEY,KAFF,EAESC,cAFT,EAGEZ,KAHF,EAGSC,MAHT,EAGiBC,KAHjB,EAGwBW,MAHxB,EAGgCC,MAHhC,EAGwCC,IAHxC,EAG8CC,MAH9C;AAIA,WAAKtB,EAAL,CAAQ0B,UAAR,QAA2Cb,MAAM,CAACc,MAAlD;AACD;AACF;;AA5E4C","sourcesContent":["import GL from '../constants';\nimport {isWebGL2, assertWebGL2Context} from '../webgl-utils';\nimport {withParameters} from '../webgl-context/context-state';\nimport Texture from '../webgl/texture';\nimport Buffer from './buffer';\n\nexport default class Texture3D extends Texture {\n\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n\n  /**\n   * @classdesc\n   * 3D WebGL Texture\n   * Note: Constructor will initialize your texture.\n   *\n   * @class\n   * @param {WebGLRenderingContext} gl - gl context\n   * @param {Image|ArrayBuffer|null} opts= - named options\n   * @param {Image|ArrayBuffer|null} opts.data= - buffer\n   * @param {GLint} width - width of texture\n   * @param {GLint} height - height of texture\n   */\n  constructor(gl, opts = {}) {\n    assertWebGL2Context(gl);\n    super(gl, Object.assign({}, opts, {target: opts.target || GL.TEXTURE_3D}));\n\n    this.width = null;\n    this.height = null;\n    this.depth = null;\n    Object.seal(this);\n\n    this.setImageData(opts);\n    if (opts.generateMipmap) {\n      this.generateMipmap();\n    }\n  }\n\n  initialize(opts = {}) {\n    this.opts = Object.assign({}, this.opts, opts);\n    const {pixels, settings} = this.opts;\n    if (settings) {\n      withParameters(settings, () => {\n        if (pixels) {\n          this.setImage3D(this.opts);\n        }\n      });\n      this.setParameters(opts);\n    }\n  }\n\n  // WebGL2\n\n  // Image 3D copies from Typed Array or WebGLBuffer\n  setImage3D({\n    level = 0,\n    internalformat = GL.RGBA,\n    width,\n    height,\n    depth = 1,\n    border = 0,\n    format,\n    type = GL.UNSIGNED_BYTE,\n    offset = 0,\n    pixels\n  }) {\n    if (ArrayBuffer.isView(pixels)) {\n      this.gl.texImage3D(\n        this.target,\n        level, internalformat,\n        width, height, depth, border, format, type, pixels);\n      return;\n    }\n    if (pixels instanceof Buffer) {\n      this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, pixels.handle);\n      this.gl.texImage3D(\n        this.target,\n        level, internalformat,\n        width, height, depth, border, format, type, offset);\n      this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, pixels.handle);\n    }\n  }\n}\n"],"file":"texture-3d.js"}