{"version":3,"sources":["../../../src/core/attribute.js"],"names":["Buffer","log","uid","Attribute","gl","opts","id","type","isIndexed","target","value","externalBuffer","buffer","userData","update","Object","seal","_validateAttributeDefinition","delete","constant","accessor","divisor","undefined","assign","setData","data","_setAccessor","size","offset","stride","normalized","integer","instanced","isInstanced","deprecated"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport GL from '../constants';\nimport {Buffer} from '../webgl';\nimport {log, uid} from '../utils';\n\nexport default class Attribute {\n  constructor(gl, opts = {}) {\n    const {\n      id = uid('attribute'),\n      type,\n      isIndexed = false\n    } = opts;\n\n    // Options that cannot be changed later\n    this.gl = gl;\n    this.id = id;\n    this.isIndexed = isIndexed;\n    this.target = isIndexed ? GL.ELEMENT_ARRAY_BUFFER : GL.ARRAY_BUFFER;\n    this.type = type;\n\n    // Initialize the attribute descriptor, with WebGL and metadata fields\n    this.value = null;\n    this.externalBuffer = null;\n    this.buffer = null;\n    this.userData = {}; // Reserved for application\n    this.update(opts);\n\n    // Sanity - no app fields on our attributes. Use userData instead.\n    Object.seal(this);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeDefinition();\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n      this.buffer = null;\n    }\n  }\n\n  update(opts) {\n    const {\n      value,\n      buffer,\n      constant = this.constant || false\n    } = opts;\n\n    this.constant = constant;\n\n    if (buffer) {\n      this.externalBuffer = buffer;\n      this.constant = false;\n\n      this.type = buffer.accessor.type;\n      if (buffer.accessor.divisor !== undefined) {\n        this.divisor = buffer.accessor.divisor;\n      }\n    } else if (value) {\n      this.externalBuffer = null;\n      this.value = value;\n\n      if (!constant) {\n        // Create buffer if needed\n        this.buffer = this.buffer ||\n          new Buffer(this.gl, Object.assign({}, opts, {\n            id: this.id,\n            target: this.target,\n            type: this.type\n          }));\n        this.buffer.setData({data: value});\n        this.type = this.buffer.accessor.type;\n      }\n    }\n\n    this._setAccessor(opts);\n  }\n\n  getBuffer() {\n    if (this.constant) {\n      return null;\n    }\n    return this.externalBuffer || this.buffer;\n  }\n\n  getValue() {\n    if (this.constant) {\n      return this.value;\n    }\n    const buffer = this.externalBuffer || this.buffer;\n    if (buffer) {\n      return [buffer, this];\n    }\n    return null;\n  }\n\n  // Sets all accessor props except type\n  // TODO - store on `this.accessor`\n  _setAccessor(opts) {\n    const {\n      // accessor props\n      size = this.size,\n      offset = this.offset || 0,\n      stride = this.stride || 0,\n      normalized = this.normalized || false,\n      integer = this.integer || false,\n      divisor = this.divisor || 0,\n      instanced,\n      isInstanced\n    } = opts;\n\n    this.size = size;\n    this.offset = offset;\n    this.stride = stride;\n    this.normalized = normalized;\n    this.integer = integer;\n\n    this.divisor = divisor;\n\n    if (isInstanced !== undefined) {\n      log.deprecated('Attribute.isInstanced');\n      this.divisor = isInstanced ? 1 : 0;\n    }\n    if (instanced !== undefined) {\n      log.deprecated('Attribute.instanced');\n      this.divisor = instanced ? 1 : 0;\n    }\n  }\n\n  _validateAttributeDefinition() {\n    // Can be undefined for buffers (auto deduced from shaders)\n    // or larger than 4 for uniform arrays\n    // assert(\n    //   this.size >= 1 && this.size <= 4,\n    //   `Attribute definition for ${this.id} invalid size`\n    // );\n  }\n}\n"],"file":"attribute.js"}