{"version":3,"sources":["../../../src/core/model.js"],"names":["Attribute","Object3D","getDrawMode","Buffer","Query","Program","TransformFeedback","VertexArray","clear","isWebGL","MODULAR_SHADERS","assembleShaders","addModel","removeModel","logModel","getOverrides","getDebugTableForUniforms","getDebugTableForVertexArray","getDebugTableForProgramConfiguration","log","isObjectEmpty","assert","ERR_MODEL_PARAMS","LOG_DRAW_PRIORITY","LOG_DRAW_TIMEOUT","DEPRECATED_PICKING_UNIFORMS","Model","gl","props","lastLogTime","initialize","program","_createProgram","vertexArray","userData","needsRedraw","_attributes","attributes","animatedUniforms","animated","animationLoop","timerQueryEnabled","timeElapsedQuery","undefined","lastQueryReturned","stats","accumulatedFrameTime","averageFrameTime","profileFrameCount","pickable","setProps","setUniforms","Object","assign","getModuleUniforms","moduleSettings","isInstanced","instanced","onBeforeRender","onAfterRender","drawMode","Number","isFinite","vertexCount","instanceCount","setGeometry","geometry","setAttributes","uniforms","samplers","isSupported","warn","_setFeedbackBuffers","_feedbackBuffers","_setAnimationProps","_animationProps","_animationLoop","key","delete","id","clearRedrawFlags","redraw","getNeedsRedraw","getUniforms","buffers","_createBuffersFromAttributeDescriptors","getAttributes","setNeedsRedraw","_extractAnimatedUniforms","_checkForDeprecatedUniforms","animationProps","_evaluateAnimateUniforms","opts","framebuffer","transformFeedback","parameters","updateModuleSettings","_refreshAnimationProps","logPriority","_logDrawCallStart","drawParams","getDrawParams","isIndexed","indexType","_timerQueryStart","draw","getVertexCount","_timerQueryEnd","_logDrawCallEnd","discard","feedbackBuffers","unbindModels","forEach","model","unbindBuffers","bindBuffers","arguments","length","vs","fs","modules","defines","inject","shaderCache","varyings","bufferMode","x","assembleResult","getProgram","uniform","deprecated","uniformName","valueFunction","foundAnimated","newValue","staticUniforms","setBuffers","beginTimeElapsedQuery","end","isResultAvailable","elapsedTime","getResult","lastFrameTime","attributeName","descriptor","attribute","layout","update","buffer","getValue","priority","logDrawTimeout","Date","now","group","collapsed","attributeTable","header","uniformTable","table","unusedTable","unusedCount","undefinedOnly","missingTable","missingCount","count","keys","configTable","configuration","message","groupEnd"],"mappings":"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","sourcesContent":["import GL from '../constants';\nimport Attribute from './attribute';\nimport Object3D from './object-3d';\nimport {getDrawMode} from '../geometry/geometry';\nimport {Buffer, Query, Program, TransformFeedback, VertexArray, clear} from '../webgl';\nimport {isWebGL} from '../webgl-utils';\nimport {MODULAR_SHADERS} from '../shadertools/src/shaders';\nimport {assembleShaders} from '../shadertools/src';\nimport {addModel, removeModel, logModel, getOverrides} from '../debug/seer-integration';\nimport {getDebugTableForUniforms} from '../webgl-debug/debug-uniforms';\nimport {getDebugTableForVertexArray} from '../webgl-debug/debug-vertex-array';\nimport {getDebugTableForProgramConfiguration} from '../webgl-debug/debug-program-configuration';\nimport {log, isObjectEmpty} from '../utils';\nimport assert from '../utils/assert';\n\nconst ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';\n\nconst LOG_DRAW_PRIORITY = 2;\nconst LOG_DRAW_TIMEOUT = 10000;\n\n// These old picking uniforms should be avoided and we should use picking module\n// and set uniforms using Model class 'updateModuleSettings()'\n// TODO - move to shader modules\nconst DEPRECATED_PICKING_UNIFORMS = ['renderPickingBuffer', 'pickingEnabled'];\n\n// Model abstract O3D Class\nexport default class Model extends Object3D {\n  constructor(gl, props = {}) {\n    super(props);\n    assert(isWebGL(gl));\n    this.gl = gl;\n    this.lastLogTime = 0; // TODO - move to probe.gl\n    this.initialize(props);\n    // intended to be subclassed, do not seal\n  }\n\n  /* eslint-disable max-statements  */\n  /* eslint-disable complexity  */\n  initialize(props = {}) {\n    this.props = {};\n    this.program = this._createProgram(props);\n\n    // Create a vertex array configured after this program\n    this.vertexArray = new VertexArray(this.gl, {program: this.program});\n\n    // Initialize state\n    this.userData = {};\n    this.needsRedraw = true;\n    // Model manages auto Buffer creation from typed arrays\n    this._attributes = {}; // All attributes\n    this.attributes = {}; // User defined attributes\n\n    // Model manages uniform animation\n    this.animatedUniforms = {};\n    this.animated = false;\n    this.animationLoop = null; // if set, used as source for animationProps\n\n    this.timerQueryEnabled = false;\n    this.timeElapsedQuery = undefined;\n    this.lastQueryReturned = true;\n\n    this.stats = {\n      accumulatedFrameTime: 0,\n      averageFrameTime: 0,\n      profileFrameCount: 0\n    };\n\n    // picking options\n    this.pickable = true;\n    // this.pick = pick || (() => false);\n\n    this.setProps(props);\n\n    // Make sure we have some reasonable default uniforms in place\n    this.setUniforms(Object.assign(\n      {},\n      this.getModuleUniforms(), // Get all default uniforms\n      this.getModuleUniforms(props.moduleSettings) // Get unforms for supplied parameters\n    ));\n\n    // Attributes and buffers\n\n    // geometry might have set drawMode and vertexCount\n    this.isInstanced = props.isInstanced || props.instanced;\n\n    this.onBeforeRender = props.onBeforeRender || (() => {});\n    this.onAfterRender = props.onAfterRender || (() => {});\n\n    // assert(program || program instanceof Program);\n    assert(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);\n\n  }\n  /* eslint-enable max-statements */\n\n  setProps(props) {\n    Object.assign(this.props, props);\n\n    // params\n    // if ('drawMode' in props) {\n    //   this.drawMode = getDrawMode(props.drawMode);\n    // }\n    // if ('vertexCount' in props) {\n    //   this.vertexCount = props.vertexCount;\n    // }\n    if ('instanceCount' in props) {\n      this.instanceCount = props.instanceCount;\n    }\n    if ('geometry' in props) {\n      this.setGeometry(props.geometry);\n    }\n\n    // webgl settings\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms, props.samplers);\n    }\n\n    if ('pickable' in props) {\n      this.pickable = props.pickable;\n    }\n\n    // Experimental props\n    if ('timerQueryEnabled' in props) {\n      this.timerQueryEnabled = props.timerQueryEnabled && Query.isSupported(this.gl, ['timers']);\n      if (props.timerQueryEnabled && !this.timerQueryEnabled) {\n        log.warn('GPU timer not supported')();\n      }\n    }\n    if ('_feedbackBuffers' in props) {\n      this._setFeedbackBuffers(props._feedbackBuffers);\n    }\n    if ('_animationProps' in props) {\n      this._setAnimationProps(props._animationProps);\n    }\n    if ('_animationLoop' in props) {\n      this.animationLoop = props._animationLoop;\n    }\n  }\n\n  delete() {\n    // delete all attributes created by this model\n    // TODO - should buffer deletes be handled by vertex array?\n    for (const key in this._attributes) {\n      if (this._attributes[key] !== this.attributes[key]) {\n        this._attributes[key].delete();\n      }\n    }\n\n    this.program.delete();\n    this.vertexArray.delete();\n\n    removeModel(this.id);\n  }\n\n  destroy() {\n    this.delete();\n  }\n\n  // GETTERS\n\n  get vertexCount() {\n    if (Number.isFinite(this.props.vertexCount)) {\n      return this.props.vertexCount;\n    }\n    return this.geometry && this.geometry.getVertexCount();\n  }\n\n  get drawMode() {\n    if (Number.isFinite(this.props.drawMode)) {\n      return this.props.drawMode;\n    }\n    return this.geometry && this.geometry.drawMode;\n  }\n\n  getNeedsRedraw({clearRedrawFlags = false} = {}) {\n    let redraw = false;\n    redraw = redraw || this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !clearRedrawFlags;\n    if (this.geometry) {\n      redraw = redraw || this.geometry.getNeedsRedraw({clearRedrawFlags});\n    }\n    if (this.animated) {\n      redraw = redraw || `animated model ${this.id}`;\n    }\n    return redraw;\n  }\n\n  getDrawMode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  getInstanceCount() {\n    return this.instanceCount;\n  }\n\n  getProgram() {\n    return this.program;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  getUniforms() {\n    return this.program.getUniforms;\n  }\n\n  // SETTERS\n\n  setNeedsRedraw(redraw = true) {\n    this.needsRedraw = redraw;\n    return this;\n  }\n\n  setDrawMode(drawMode) {\n    this.props.drawMode = getDrawMode(drawMode);\n    return this;\n  }\n\n  setVertexCount(vertexCount) {\n    assert(Number.isFinite(vertexCount));\n    this.props.vertexCount = vertexCount;\n    return this;\n  }\n\n  setInstanceCount(instanceCount) {\n    assert(Number.isFinite(instanceCount));\n    this.instanceCount = instanceCount;\n    return this;\n  }\n\n  // TODO - just set attributes, don't hold on to geometry\n  setGeometry(geometry) {\n    this.geometry = geometry;\n    const buffers = this._createBuffersFromAttributeDescriptors(this.geometry.getAttributes());\n    this.vertexArray.setAttributes(buffers);\n    this.setNeedsRedraw();\n    return this;\n  }\n\n  setAttributes(attributes = {}) {\n    // Avoid setting needsRedraw if no attributes\n    if (isObjectEmpty(attributes)) {\n      return this;\n    }\n\n    Object.assign(this.attributes, attributes);\n    const buffers = this._createBuffersFromAttributeDescriptors(attributes);\n\n    // Object.assign(this.attributes, buffers);\n    this.vertexArray.setAttributes(buffers);\n    this.setNeedsRedraw();\n\n    return this;\n  }\n\n  // TODO - should actually set the uniforms\n  setUniforms(uniforms = {}, samplers = {}) {\n    // Let Seer override edited uniforms\n    uniforms = Object.assign({}, uniforms);\n    getOverrides(this.id, uniforms);\n\n    // Resolve any animated uniforms so that we have an initial value\n    uniforms = this._extractAnimatedUniforms(uniforms);\n\n    this.program.setUniforms(uniforms, samplers, () => {\n      // if something changed\n      this._checkForDeprecatedUniforms(uniforms);\n      this.setNeedsRedraw();\n    });\n  }\n\n  // Updates (evaluates) all function valued uniforms based on a new set of animationProps\n  // experimental\n  _setAnimationProps(animationProps) {\n    if (this.animated) {\n      assert(animationProps, 'Model.draw(): animated uniforms but no animationProps');\n      const animatedUniforms = this._evaluateAnimateUniforms(animationProps);\n      this.program.setUniforms(animatedUniforms, {}, () => {\n        // if something changed\n        this._checkForDeprecatedUniforms(animatedUniforms);\n        this.setNeedsRedraw();\n      });\n    }\n  }\n\n  updateModuleSettings(opts) {\n    const uniforms = this.getModuleUniforms(opts || {});\n    return this.setUniforms(uniforms);\n  }\n\n  // DRAW CALLS\n\n  clear(opts) {\n    clear(this.program.gl, opts);\n    return this;\n  }\n\n  /* eslint-disable max-statements  */\n  draw(opts = {}) {\n    const {\n      moduleSettings = null,\n      framebuffer,\n      uniforms = {},\n      attributes = {},\n      samplers = {},\n      transformFeedback = this.transformFeedback,\n      parameters = {},\n      vertexArray = this.vertexArray,\n      animationProps\n    } = opts;\n\n    // Update module settings\n\n    addModel(this);\n\n    // Update model with any just provided attributes, settings or uniforms\n    this.setAttributes(attributes);\n    this.updateModuleSettings(moduleSettings);\n    this.setUniforms(uniforms, samplers);\n\n    // Animate any function valued uniforms\n    this._refreshAnimationProps(animationProps);\n\n    const logPriority = this._logDrawCallStart(2);\n\n    const drawParams = this.vertexArray.getDrawParams(this.props);\n    if (drawParams.isInstanced && !this.isInstanced) {\n      log.warn('Found instanced attributes on non-instanced model', this.id)();\n    }\n\n    const {isIndexed, indexType} = drawParams;\n    const {isInstanced, instanceCount} = this;\n\n    this.onBeforeRender();\n    this._timerQueryStart();\n\n    this.program.draw(Object.assign({}, opts, {\n      logPriority,\n      uniforms: null, // Already set (may contain \"function values\" not understood by Program)\n      framebuffer,\n      parameters,\n      drawMode: this.getDrawMode(),\n      vertexCount: this.getVertexCount(),\n      vertexArray,\n      transformFeedback,\n      isIndexed,\n      indexType,\n      isInstanced,\n      instanceCount\n    }));\n\n    this._timerQueryEnd();\n    this.onAfterRender();\n\n    this.setNeedsRedraw(false);\n\n    this._logDrawCallEnd(logPriority, vertexArray, framebuffer);\n\n    return this;\n  }\n  /* eslint-enable max-statements  */\n\n  // Draw call for transform feedback\n  transform(opts = {}) {\n    const {\n      discard = true,\n      feedbackBuffers,\n      unbindModels = []\n    } = opts;\n\n    let {\n      parameters\n    } = opts;\n\n    if (feedbackBuffers) {\n      this._setFeedbackBuffers(feedbackBuffers);\n    }\n\n    if (discard) {\n      parameters = Object.assign({}, parameters, {[GL.RASTERIZER_DISCARD]: discard});\n    }\n\n    unbindModels.forEach(model => model.vertexArray.unbindBuffers());\n    try {\n      this.draw(Object.assign({}, opts, {parameters}));\n    } finally {\n      unbindModels.forEach(model => model.vertexArray.bindBuffers());\n    }\n\n    return this;\n  }\n\n  // DEPRECATED METHODS\n\n  render(uniforms = {}) {\n    assert(arguments.length <= 1);\n    // log.deprecated('Model.render()', 'Model.draw()')();\n    return this.draw({uniforms});\n  }\n\n  // PRIVATE METHODS\n\n  _createProgram({\n    vs = null,\n    fs = null,\n    // 1: Modular shaders\n    modules = null,\n    defines = {},\n    inject = {},\n    shaderCache = null,\n    // TransformFeedback\n    varyings = null,\n    bufferMode = GL.SEPARATE_ATTRIBS,\n    program = null\n  }) {\n    this.getModuleUniforms = x => {};\n\n    const id = this.id;\n\n    if (!program) {\n      // Assign default shaders if none are provided\n      vs = vs || MODULAR_SHADERS.vs;\n      fs = fs || MODULAR_SHADERS.fs;\n\n      const assembleResult = assembleShaders(this.gl, {vs, fs, modules, inject, defines, log});\n      ({vs, fs} = assembleResult);\n\n      if (shaderCache) {\n        program = shaderCache.getProgram(this.gl, {id, vs, fs});\n      } else {\n        program = new Program(this.gl, {id, vs, fs, varyings, bufferMode});\n      }\n\n      this.getModuleUniforms = assembleResult.getUniforms || (x => {});\n    }\n\n    assert(program instanceof Program, 'Model needs a program');\n    return program;\n  }\n  /* eslint-enable complexity */\n\n  // Uniforms\n\n  _checkForDeprecatedUniforms(uniforms) {\n    // deprecated picking uniforms\n    DEPRECATED_PICKING_UNIFORMS.forEach((uniform) => {\n      if (uniform in uniforms) {\n        log.deprecated(uniform,\n          'use picking shader module and Model class updateModuleSettings()')();\n      }\n    });\n  }\n\n  // Refreshes animated uniforms, attempting to get animated props from animationLoop if registered\n  _refreshAnimationProps(animationProps) {\n    // Try to read animationProps\n    animationProps = animationProps || (this.animationLoop && this.animationLoop.animationProps);\n    if (animationProps) {\n      this._setAnimationProps(animationProps);\n    }\n  }\n\n  // Calculate new values for any function uniforms based on supplied animationProps\n  _evaluateAnimateUniforms(animationProps) {\n    if (!this.animated) {\n      return {};\n    }\n    const animatedUniforms = {};\n    for (const uniformName in this.animatedUniforms) {\n      const valueFunction = this.animatedUniforms[uniformName];\n      animatedUniforms[uniformName] = valueFunction(animationProps);\n    }\n    return animatedUniforms;\n  }\n\n  // Extracts a list of function valued uniforms, so we can update them before each draw call\n  // Also removes such uniforms from the returned list\n  _extractAnimatedUniforms(uniforms) {\n    let foundAnimated = false;\n\n    // Keep our animatedUniforms map up-to-date\n    for (const uniformName in uniforms) {\n      const newValue = uniforms[uniformName];\n      if (typeof newValue === 'function') {\n        this.animatedUniforms[uniformName] = newValue;\n        foundAnimated = true;\n      } else {\n        delete this.animatedUniforms[uniformName];\n      }\n    }\n\n    // Update animated flag: `Model` is animated if any uniforms are animated (i.e. functions)\n    this.animated = !isObjectEmpty(this.animatedUniforms);\n\n    if (!foundAnimated) {\n      return uniforms;\n    }\n\n    // If animated uniforms were found, remove them from ordinary uniform list\n    // `Program` class can't (and shouldn't) handle function valued uniforms\n    const staticUniforms = {};\n    for (const uniformName in uniforms) {\n      if (!this.animatedUniforms[uniformName]) {\n        staticUniforms[uniformName] = uniforms[uniformName];\n      }\n    }\n    return staticUniforms;\n  }\n\n  // Transform Feedback\n\n  _setFeedbackBuffers(feedbackBuffers = {}) {\n    // Avoid setting needsRedraw if no feedbackBuffers\n    if (isObjectEmpty(feedbackBuffers)) {\n      return this;\n    }\n\n    const {gl} = this.program;\n    this.transformFeedback = this.transformFeedback || new TransformFeedback(gl, {\n      program: this.program\n    });\n\n    this.transformFeedback.setBuffers(feedbackBuffers);\n\n    this.setNeedsRedraw();\n\n    return this;\n  }\n\n  // Timer Queries\n\n  _timerQueryStart() {\n    if (this.timerQueryEnabled === true) {\n      if (!this.timeElapsedQuery) {\n        this.timeElapsedQuery = new Query(this.gl);\n      }\n      if (this.lastQueryReturned) {\n        this.lastQueryReturned = false;\n        this.timeElapsedQuery.beginTimeElapsedQuery();\n      }\n    }\n  }\n\n  _timerQueryEnd() {\n    if (this.timerQueryEnabled === true) {\n      this.timeElapsedQuery.end();\n      // TODO: Skip results if 'gl.getParameter(this.ext.GPU_DISJOINT_EXT)' returns false\n      // should this be incorporated into Query object?\n      if (this.timeElapsedQuery.isResultAvailable()) {\n        this.lastQueryReturned = true;\n        const elapsedTime = this.timeElapsedQuery.getResult();\n\n        // Update stats (e.g. for seer)\n        this.stats.lastFrameTime = elapsedTime;\n        this.stats.accumulatedFrameTime += elapsedTime;\n        this.stats.profileFrameCount++;\n        this.stats.averageFrameTime =\n          this.stats.accumulatedFrameTime / this.stats.profileFrameCount;\n\n        // Log stats\n        log.log(LOG_DRAW_PRIORITY, `\\\nGPU time ${this.program.id}: ${this.stats.lastFrameTime}ms \\\naverage ${this.stats.averageFrameTime}ms \\\naccumulated: ${this.stats.accumulatedFrameTime}ms \\\ncount: ${this.stats.profileFrameCount}`\n        )();\n      }\n    }\n  }\n\n  // Makes sure buffers are created for all attributes\n  // and that the program is updated with those buffers\n  // TODO - do we need the separation between \"attributes\" and \"buffers\"\n  // couldn't apps just create buffers directly?\n  _createBuffersFromAttributeDescriptors(attributes) {\n    const {program: {gl}} = this;\n\n    // const attributes = {};\n    const buffers = {};\n\n    for (const attributeName in attributes) {\n\n      const descriptor = attributes[attributeName];\n\n      let attribute = this._attributes[attributeName];\n\n      if (descriptor instanceof Attribute) {\n        attribute = descriptor;\n      } else if (descriptor instanceof Buffer) {\n        attribute = attribute || new Attribute(gl,\n          Object.assign({}, descriptor, descriptor.layout, {\n            id: attributeName\n          })\n        );\n        attribute.update({buffer: descriptor});\n      } else if (attribute) {\n        attribute.update(descriptor);\n      } else {\n        attribute = new Attribute(gl, Object.assign({}, descriptor, {\n          id: attributeName\n        }));\n      }\n\n      this._attributes[attributeName] = attribute;\n      buffers[attributeName] = attribute.getValue();\n    }\n\n    return buffers;\n  }\n\n  _logDrawCallStart(priority) {\n    const logDrawTimeout = priority > 3 ? 0 : LOG_DRAW_TIMEOUT;\n    if (log.priority < priority || (Date.now() - this.lastLogTime < logDrawTimeout)) {\n      return undefined;\n    }\n\n    this.lastLogTime = Date.now();\n\n    log.group(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`, {collapsed: log.priority <= 2})();\n\n    return priority;\n  }\n\n  _logDrawCallEnd(priority, vertexArray, uniforms, framebuffer) {\n    // HACK: priority === undefined means logDrawCallStart didn't run\n    if (priority === undefined) {\n      return;\n    }\n\n    const attributeTable = getDebugTableForVertexArray({\n      vertexArray,\n      header: `${this.id} attributes`,\n      attributes: this._attributes\n    });\n\n    const {table: uniformTable, unusedTable, unusedCount} = getDebugTableForUniforms({\n      header: `${this.id} uniforms`,\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms)\n    });\n\n    // log missing uniforms\n    const {table: missingTable, count: missingCount} = getDebugTableForUniforms({\n      header: `${this.id} uniforms`,\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms),\n      undefinedOnly: true\n    });\n\n    if (missingCount > 0) {\n      log.log('MISSING UNIFORMS', Object.keys(missingTable))();\n      // log.table(priority, missingTable)();\n    }\n    if (unusedCount > 0) {\n      log.log('UNUSED UNIFORMS', Object.keys(unusedTable))();\n      // log.log(priority, 'Unused uniforms ', unusedTable)();\n    }\n\n    const configTable = getDebugTableForProgramConfiguration(this.vertexArray.configuration);\n\n    log.table(priority, attributeTable)();\n\n    log.table(priority, uniformTable)();\n\n    log.table(priority + 1, configTable)();\n\n    logModel(this, uniforms);\n\n    if (framebuffer) {\n      framebuffer.log({priority: LOG_DRAW_PRIORITY, message: `Rendered to ${framebuffer.id}`});\n    }\n\n    log.groupEnd(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`)();\n  }\n}\n"],"file":"model.js"}