{"version":3,"sources":["../../../src/geometry/ico-sphere-geometry.js"],"names":["Geometry","Vector3","ICO_POSITIONS","ICO_INDICES","IcoSphereGeometry","opts","iterations","PI","Math","PI2","positions","indices","push","getMiddlePoint","pointMemo","i1","i2","mini","maxi","key","x1","y1","z1","x2","y2","z2","xm","ym","zm","len","sqrt","length","i","indices2","j","a","b","c","normals","Array","texCoords","l","i3","in1","in2","in3","iu1","iu2","iu3","theta1","acos","phi1","atan2","v1","u1","theta2","phi2","v2","u2","x3","y3","z3","theta3","phi3","v3","u3","vec1","vec2","normal","cross","normalize","newIndex","x","y","z","Object","assign","attributes","Float32Array","Uint16Array"],"mappings":"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","sourcesContent":["import Geometry from './geometry';\nimport {Vector3} from 'math.gl';\n\n/* eslint-disable comma-spacing, max-statements, complexity */\n\nconst ICO_POSITIONS = [-1,0,0, 0,1,0, 0,0,-1, 0,0,1, 0,-1,0, 1,0,0];\nconst ICO_INDICES = [3,4,5,3,5,1,3,1,0,3,0,4,4,0,2,4,2,5,2,0,1,5,2,1];\n\nexport default class IcoSphereGeometry extends Geometry {\n  constructor(opts = {}) {\n    const {iterations = 0} = opts;\n\n    const PI = Math.PI;\n    const PI2 = PI * 2;\n\n    const positions = [...ICO_POSITIONS];\n    let indices = [...ICO_INDICES];\n\n    positions.push();\n    indices.push();\n\n    const getMiddlePoint = (() => {\n      const pointMemo = {};\n\n      return (i1, i2) => {\n        i1 *= 3;\n        i2 *= 3;\n        const mini = i1 < i2 ? i1 : i2;\n        const maxi = i1 > i2 ? i1 : i2;\n        const key = `${mini}|${maxi}`;\n\n        if (key in pointMemo) {\n          return pointMemo[key];\n        }\n\n        const x1 = positions[i1];\n        const y1 = positions[i1 + 1];\n        const z1 = positions[i1 + 2];\n        const x2 = positions[i2];\n        const y2 = positions[i2 + 1];\n        const z2 = positions[i2 + 2];\n        let xm = (x1 + x2) / 2;\n        let ym = (y1 + y2) / 2;\n        let zm = (z1 + z2) / 2;\n        const len = Math.sqrt(xm * xm + ym * ym + zm * zm);\n\n        xm /= len;\n        ym /= len;\n        zm /= len;\n\n        positions.push(xm, ym, zm);\n\n        return (pointMemo[key] = (positions.length / 3 - 1));\n      };\n    })();\n\n    for (let i = 0; i < iterations; i++) {\n      const indices2 = [];\n      for (let j = 0; j < indices.length; j += 3) {\n        const a = getMiddlePoint(indices[j + 0], indices[j + 1]);\n        const b = getMiddlePoint(indices[j + 1], indices[j + 2]);\n        const c = getMiddlePoint(indices[j + 2], indices[j + 0]);\n\n        indices2.push(\n          c, indices[j + 0], a,\n          a, indices[j + 1], b,\n          b, indices[j + 2], c,\n          a, b, c);\n      }\n      indices = indices2;\n    }\n\n    // Calculate texCoords and normals\n    const normals = new Array(indices.length * 3);\n    const texCoords = new Array(indices.length * 2);\n\n    const l = indices.length;\n    for (let i = l - 3; i >= 0; i -= 3) {\n      const i1 = indices[i + 0];\n      const i2 = indices[i + 1];\n      const i3 = indices[i + 2];\n      const in1 = i1 * 3;\n      const in2 = i2 * 3;\n      const in3 = i3 * 3;\n      const iu1 = i1 * 2;\n      const iu2 = i2 * 2;\n      const iu3 = i3 * 2;\n      const x1 = positions[in1 + 0];\n      const y1 = positions[in1 + 1];\n      const z1 = positions[in1 + 2];\n      const theta1 = Math.acos(z1 / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1));\n      const phi1 = Math.atan2(y1, x1) + PI;\n      const v1 = theta1 / PI;\n      const u1 = 1 - phi1 / PI2;\n      const x2 = positions[in2 + 0];\n      const y2 = positions[in2 + 1];\n      const z2 = positions[in2 + 2];\n      const theta2 = Math.acos(z2 / Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2));\n      const phi2 = Math.atan2(y2, x2) + PI;\n      const v2 = theta2 / PI;\n      const u2 = 1 - phi2 / PI2;\n      const x3 = positions[in3 + 0];\n      const y3 = positions[in3 + 1];\n      const z3 = positions[in3 + 2];\n      const theta3 = Math.acos(z3 / Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3));\n      const phi3 = Math.atan2(y3, x3) + PI;\n      const v3 = theta3 / PI;\n      const u3 = 1 - phi3 / PI2;\n      const vec1 = [\n        x3 - x2,\n        y3 - y2,\n        z3 - z2\n      ];\n      const vec2 = [\n        x1 - x2,\n        y1 - y2,\n        z1 - z2\n      ];\n      const normal = new Vector3(vec1).cross(vec2).normalize();\n      let newIndex;\n\n      if ((u1 === 0 || u2 === 0 || u3 === 0) &&\n          (u1 === 0 || u1 > 0.5) &&\n            (u2 === 0 || u2 > 0.5) &&\n              (u3 === 0 || u3 > 0.5)) {\n\n        positions.push(\n          positions[in1 + 0],\n          positions[in1 + 1],\n          positions[in1 + 2]\n        );\n        newIndex = positions.length / 3 - 1;\n        indices.push(newIndex);\n        texCoords[newIndex * 2 + 0] = 1;\n        texCoords[newIndex * 2 + 1] = v1;\n        normals[newIndex * 3 + 0] = normal.x;\n        normals[newIndex * 3 + 1] = normal.y;\n        normals[newIndex * 3 + 2] = normal.z;\n\n        positions.push(\n          positions[in2 + 0],\n          positions[in2 + 1],\n          positions[in2 + 2]\n        );\n        newIndex = positions.length / 3 - 1;\n        indices.push(newIndex);\n        texCoords[newIndex * 2 + 0] = 1;\n        texCoords[newIndex * 2 + 1] = v2;\n        normals[newIndex * 3 + 0] = normal.x;\n        normals[newIndex * 3 + 1] = normal.y;\n        normals[newIndex * 3 + 2] = normal.z;\n\n        positions.push(\n          positions[in3 + 0],\n          positions[in3 + 1],\n          positions[in3 + 2]\n        );\n        newIndex = positions.length / 3 - 1;\n        indices.push(newIndex);\n        texCoords[newIndex * 2 + 0] = 1;\n        texCoords[newIndex * 2 + 1] = v3;\n        normals[newIndex * 3 + 0] = normal.x;\n        normals[newIndex * 3 + 1] = normal.y;\n        normals[newIndex * 3 + 2] = normal.z;\n      }\n\n      normals[in1 + 0] = normals[in2 + 0] = normals[in3 + 0] = normal.x;\n      normals[in1 + 1] = normals[in2 + 1] = normals[in3 + 1] = normal.y;\n      normals[in1 + 2] = normals[in2 + 2] = normals[in3 + 2] = normal.z;\n\n      texCoords[iu1 + 0] = u1;\n      texCoords[iu1 + 1] = v1;\n\n      texCoords[iu2 + 0] = u2;\n      texCoords[iu2 + 1] = v2;\n\n      texCoords[iu3 + 0] = u3;\n      texCoords[iu3 + 1] = v3;\n    }\n\n    super(Object.assign({}, opts, {\n      attributes: {\n        positions: new Float32Array(positions),\n        normals: new Float32Array(normals),\n        texCoords: new Float32Array(texCoords),\n        indices: new Uint16Array(indices)\n      }\n    }));\n  }\n}\n"],"file":"ico-sphere-geometry.js"}