{"version":3,"sources":["../../../src/geometry/plane-geometry.js"],"names":["Geometry","uid","PlaneGeometry","opts","type","offset","flipCull","unpack","id","coords","split","c1len","c2len","subdivisions1","subdivisions2","numVertices","positions","Float32Array","normals","texCoords","i2","i3","z","x","u","v","numVertsAcross","indices","Uint16Array","index","positions2","length","normals2","texCoords2","undefined","attributes","Object","assign"],"mappings":"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","sourcesContent":["import Geometry from './geometry';\nimport {uid} from '../utils';\n\nexport default class PlaneGeometry extends Geometry {\n\n  // Primitives inspired by TDL http://code.google.com/p/webglsamples/,\n  // copyright 2011 Google Inc. new BSD License\n  // (http://www.opensource.org/licenses/bsd-license.php).\n  /* eslint-disable max-statements, complexity */\n  /* eslint-disable complexity, max-statements */\n  constructor(opts = {}) {\n    const {\n      type = 'x,y',\n      offset = 0,\n      flipCull = false,\n      unpack = false,\n      id = uid('plane-geometry')\n    } = opts;\n\n    const coords = type.split(',');\n    // width, height\n    let c1len = opts[`${coords[0]}len`];\n    const c2len = opts[`${coords[1]}len`];\n    // subdivisionsWidth, subdivisionsDepth\n    const subdivisions1 = opts[`n${coords[0]}`] || 1;\n    const subdivisions2 = opts[`n${coords[1]}`] || 1;\n    const numVertices = (subdivisions1 + 1) * (subdivisions2 + 1);\n\n    let positions = new Float32Array(numVertices * 3);\n    let normals = new Float32Array(numVertices * 3);\n    let texCoords = new Float32Array(numVertices * 2);\n\n    if (flipCull) {\n      c1len = -c1len;\n    }\n\n    let i2 = 0;\n    let i3 = 0;\n    for (let z = 0; z <= subdivisions2; z++) {\n      for (let x = 0; x <= subdivisions1; x++) {\n        const u = x / subdivisions1;\n        const v = z / subdivisions2;\n        texCoords[i2 + 0] = flipCull ? 1 - u : u;\n        texCoords[i2 + 1] = v;\n\n        switch (type) {\n        case 'x,y':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = c2len * v - c2len * 0.5;\n          positions[i3 + 2] = offset;\n\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = flipCull ? 1 : -1;\n          break;\n\n        case 'x,z':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = offset;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = flipCull ? 1 : -1;\n          normals[i3 + 2] = 0;\n          break;\n\n        case 'y,z':\n          positions[i3 + 0] = offset;\n          positions[i3 + 1] = c1len * u - c1len * 0.5;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n\n          normals[i3 + 0] = flipCull ? 1 : -1;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = 0;\n          break;\n\n        default:\n          break;\n        }\n\n        i2 += 2;\n        i3 += 3;\n      }\n    }\n\n    const numVertsAcross = subdivisions1 + 1;\n    let indices = new Uint16Array(subdivisions1 * subdivisions2 * 6);\n\n    for (let z = 0; z < subdivisions2; z++) {\n      for (let x = 0; x < subdivisions1; x++) {\n        const index = (z * subdivisions1 + x) * 6;\n        // Make triangle 1 of quad.\n        indices[index + 0] = (z + 0) * numVertsAcross + x;\n        indices[index + 1] = (z + 1) * numVertsAcross + x;\n        indices[index + 2] = (z + 0) * numVertsAcross + x + 1;\n\n        // Make triangle 2 of quad.\n        indices[index + 3] = (z + 1) * numVertsAcross + x;\n        indices[index + 4] = (z + 1) * numVertsAcross + x + 1;\n        indices[index + 5] = (z + 0) * numVertsAcross + x + 1;\n      }\n    }\n\n    // Optionally, unpack indexed geometry\n    if (unpack) {\n      const positions2 = new Float32Array(indices.length * 3);\n      const normals2 = new Float32Array(indices.length * 3);\n      const texCoords2 = new Float32Array(indices.length * 2);\n\n      for (let x = 0; x < indices.length; ++x) {\n        const index = indices[x];\n        positions2[x * 3 + 0] = positions[index * 3 + 0];\n        positions2[x * 3 + 1] = positions[index * 3 + 1];\n        positions2[x * 3 + 2] = positions[index * 3 + 2];\n        normals2[x * 3 + 0] = normals[index * 3 + 0];\n        normals2[x * 3 + 1] = normals[index * 3 + 1];\n        normals2[x * 3 + 2] = normals[index * 3 + 2];\n        texCoords2[x * 2 + 0] = texCoords[index * 2 + 0];\n        texCoords2[x * 2 + 1] = texCoords[index * 2 + 1];\n      }\n\n      positions = positions2;\n      normals = normals2;\n      texCoords = texCoords2;\n      indices = undefined;\n    }\n\n    const attributes = {\n      positions,\n      normals,\n      texCoords\n    };\n\n    if (indices) {\n      attributes.indices = indices;\n    }\n\n    super(Object.assign({}, opts, {attributes, id}));\n  }\n}\n"],"file":"plane-geometry.js"}