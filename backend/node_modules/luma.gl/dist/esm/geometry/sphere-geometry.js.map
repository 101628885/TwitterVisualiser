{"version":3,"sources":["../../../src/geometry/sphere-geometry.js"],"names":["Geometry","uid","SphereGeometry","opts","nlat","nlong","radius","id","Object","assign","attributes","getSphereAttributes","startLat","endLat","Math","PI","latRange","startLong","endLong","longRange","numVertices","value","n1","n2","n3","u","v","positions","Float32Array","normals","texCoords","indices","Uint16Array","y","x","index","i2","i3","theta","phi","sinTheta","sin","cosTheta","cos","sinPhi","cosPhi","ux","uy","uz","r","numVertsAround"],"mappings":"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","sourcesContent":["import Geometry from './geometry';\nimport {uid} from '../utils';\n\nexport default class SphereGeometry extends Geometry {\n  constructor(opts = {}) {\n    const {\n      nlat = 10,\n      nlong = 10,\n      radius = 1,\n      id = uid('sphere-geometry')\n    } = opts;\n\n    super(Object.assign({}, opts, {id, attributes: getSphereAttributes(nlat, nlong, radius)}));\n  }\n}\n\n// Primitives inspired by TDL http://code.google.com/p/webglsamples/,\n// copyright 2011 Google Inc. new BSD License\n// (http://www.opensource.org/licenses/bsd-license.php).\n/* eslint-disable max-statements, complexity */\nfunction getSphereAttributes(nlat, nlong, radius) {\n  const startLat = 0;\n  const endLat = Math.PI;\n  const latRange = endLat - startLat;\n  const startLong = 0;\n  const endLong = 2 * Math.PI;\n  const longRange = endLong - startLong;\n  const numVertices = (nlat + 1) * (nlong + 1);\n\n  if (typeof radius === 'number') {\n    const value = radius;\n    radius = (n1, n2, n3, u, v) => value;\n  }\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n  const texCoords = new Float32Array(numVertices * 2);\n  const indices = new Uint16Array(nlat * nlong * 6);\n\n  // Create positions, normals and texCoords\n  for (let y = 0; y <= nlat; y++) {\n    for (let x = 0; x <= nlong; x++) {\n\n      const u = x / nlong;\n      const v = y / nlat;\n\n      const index = x + y * (nlong + 1);\n      const i2 = index * 2;\n      const i3 = index * 3;\n\n      const theta = longRange * u;\n      const phi = latRange * v;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n\n      const r = radius(ux, uy, uz, u, v);\n\n      positions[i3 + 0] = r * ux;\n      positions[i3 + 1] = r * uy;\n      positions[i3 + 2] = r * uz;\n\n      normals[i3 + 0] = ux;\n      normals[i3 + 1] = uy;\n      normals[i3 + 2] = uz;\n\n      texCoords[i2 + 0] = u;\n      texCoords[i2 + 1] = v;\n    }\n  }\n\n  // Create indices\n  const numVertsAround = nlat + 1;\n  for (let x = 0; x < nlat; x++) {\n    for (let y = 0; y < nlong; y++) {\n      const index = (x * nlong + y) * 6;\n\n      indices[index + 0] = y * numVertsAround + x;\n      indices[index + 1] = y * numVertsAround + x + 1;\n      indices[index + 2] = (y + 1) * numVertsAround + x;\n\n      indices[index + 3] = (y + 1) * numVertsAround + x;\n      indices[index + 4] = y * numVertsAround + x + 1;\n      indices[index + 5] = (y + 1) * numVertsAround + x + 1;\n    }\n  }\n\n  return {\n    positions,\n    indices,\n    normals,\n    texCoords\n  };\n}\n"],"file":"sphere-geometry.js"}