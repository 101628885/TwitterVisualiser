{"version":3,"sources":["../../../src/multipass/pass.js"],"names":["Framebuffer","withParameters","Pass","gl","props","id","enabled","screen","swap","Object","assign","renderState","animationProps","renderParams","outputBuffer","writeBuffer","inputBuffer","readBuffer","swapBuffers","_swapFramebuffers","getDefaultFramebuffer","framebuffer","_renderPass","log"],"mappings":";;;;;;AAMA,SAAQA,WAAR,QAA0B,UAA1B;AACA,SAAQC,cAAR,QAA6B,kBAA7B;;IAEqBC,I;AACnB,gBAAYC,EAAZ,EAAgBC,KAAhB,EAAuB;AAAA;;AAAA,oBACCA,KADD,CACdC,EADc;AAAA,QACdA,EADc,0BACT,MADS;AAErB,SAAKA,EAAL,GAAUA,EAAV;AACA,SAAKF,EAAL,GAAUA,EAAV;AACA,SAAKC,KAAL,GAAa;AAACE,MAAAA,OAAO,EAAE,IAAV;AAAgBC,MAAAA,MAAM,EAAE,KAAxB;AAA+BC,MAAAA,IAAI,EAAE;AAArC,KAAb;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKN,KAAnB,EAA0BA,KAA1B;AACD;;;;6BAEQA,K,EAAO;AACdK,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAKN,KAAnB,EAA0BA,KAA1B;AACD;;;2BAEMO,W,EAAaC,c,EAAgB;AAAA;;AAClC,UAAI,CAAC,KAAKR,KAAL,CAAWE,OAAhB,EAAyB;AACvB;AACD;;AAED,UAAMH,EAAE,GAAG,KAAKA,EAAhB;AAEA,UAAMU,YAAY,GAAG;AACnBV,QAAAA,EAAE,EAAFA,EADmB;AAEnBW,QAAAA,YAAY,EAAEH,WAAW,CAACI,WAFP;AAGnBC,QAAAA,WAAW,EAAEL,WAAW,CAACM,UAHN;AAInBL,QAAAA,cAAc,EAAdA,cAJmB;AAKnBM,QAAAA,WAAW,EAAE;AAAA,iBAAMP,WAAW,CAACQ,iBAAZ,EAAN;AAAA;AALM,OAArB;;AAQA,UAAI,KAAKf,KAAL,CAAWG,MAAf,EAAuB;AACrBM,QAAAA,YAAY,CAACG,WAAb,GAA2BH,YAAY,CAACC,YAAxC;AACAD,QAAAA,YAAY,CAACC,YAAb,GAA4Bd,WAAW,CAACoB,qBAAZ,CAAkCjB,EAAlC,CAA5B;AACD,OAHD,MAGO,IAAI,KAAKC,KAAL,CAAWI,IAAf,EAAqB;AAC1BK,QAAAA,YAAY,CAACG,WAAb,GAA2BL,WAAW,CAACI,WAAvC;AACAF,QAAAA,YAAY,CAACC,YAAb,GAA4BH,WAAW,CAACM,UAAxC;AACD;;AAEDhB,MAAAA,cAAc,CAACE,EAAD,EAAK;AAACkB,QAAAA,WAAW,EAAER,YAAY,CAACC;AAA3B,OAAL,EACZ;AAAA,eAAM,KAAI,CAACQ,WAAL,CAAiBT,YAAjB,CAAN;AAAA,OADY,CAAd;AAIAA,MAAAA,YAAY,CAACC,YAAb,CAA0BS,GAA1B,CAA8B,CAA9B,EAAiC,KAAKlB,EAAtC;;AAEA,UAAI,KAAKD,KAAL,CAAWI,IAAf,EAAqB;AACnBG,QAAAA,WAAW,CAACQ,iBAAZ;AACD;AACF;;;sCAQ4D;AAAA,UAAhDhB,EAAgD,QAAhDA,EAAgD;AAAA,UAA5Ca,WAA4C,QAA5CA,WAA4C;AAAA,UAA/BF,YAA+B,QAA/BA,YAA+B;AAAA,UAAjBF,cAAiB,QAAjBA,cAAiB;AAE5D;;;;;;SAvDkBV,I","sourcesContent":["//\n// A base render pass.\n//\n// Attribution: This class and the multipass system were strongly inspired by\n// the THREE.js EffectComposer and *Pass classes\n\nimport {Framebuffer} from '../webgl';\nimport {withParameters} from '../webgl-context';\n\nexport default class Pass {\n  constructor(gl, props) {\n    const {id = 'pass'} = props;\n    this.id = id;           // id of this pass\n    this.gl = gl;\n    this.props = {enabled: true, screen: false, swap: false};\n    Object.assign(this.props, props);\n  }\n\n  setProps(props) {\n    Object.assign(this.props, props);\n  }\n\n  render(renderState, animationProps) {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    const gl = this.gl;\n\n    const renderParams = {\n      gl,\n      outputBuffer: renderState.writeBuffer,\n      inputBuffer: renderState.readBuffer,\n      animationProps,\n      swapBuffers: () => renderState._swapFramebuffers()\n    };\n\n    if (this.props.screen) {\n      renderParams.inputBuffer = renderParams.outputBuffer;\n      renderParams.outputBuffer = Framebuffer.getDefaultFramebuffer(gl);\n    } else if (this.props.swap) {\n      renderParams.inputBuffer = renderState.writeBuffer;\n      renderParams.outputBuffer = renderState.readBuffer;\n    }\n\n    withParameters(gl, {framebuffer: renderParams.outputBuffer},\n      () => this._renderPass(renderParams)\n    );\n\n    renderParams.outputBuffer.log(3, this.id);\n\n    if (this.props.swap) {\n      renderState._swapFramebuffers();\n    }\n  }\n\n  /**\n   * Renders the effect.\n   * This is an abstract method that should be overridden.\n   * @param {Framebuffer} inputBuffer - Frame buffer that contains the result of the previous pass\n   * @param {Framebuffer} outputBuffer - Frame buffer that serves as the output render target\n   */\n  _renderPass({gl, inputBuffer, outputBuffer, animationProps}) {\n    // assert(false, 'Draw/render methods not implemented!');\n  }\n}\n"],"file":"pass.js"}