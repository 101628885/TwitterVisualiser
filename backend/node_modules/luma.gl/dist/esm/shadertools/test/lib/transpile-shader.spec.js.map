{"version":3,"sources":["../../../../../src/shadertools/test/lib/transpile-shader.spec.js"],"names":["transpileShader","test","VS_GLSL_300","VS_GLSL_300_transpiled","VS_GLSL_100","FS_GLSL_300","FS_GLSL_300_transpiled","FS_GLSL_100","t","ok","undefined","end","assembleResult","equal"],"mappings":"AACA,OAAOA,eAAP,MAA4B,8CAA5B;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAGA,IAAMC,WAAW,uVAAjB;AAmBA,IAAMC,sBAAsB,mVAA5B;AAkBA,IAAMC,WAAW,oWAAjB;AAmBA,IAAMC,WAAW,kVAAjB;AAoBA,IAAMC,sBAAsB,8UAA5B;AAmBA,IAAMC,WAAW,yVAAjB;AA0IAN,IAAI,CAAC,wBAAD,EAA2B,UAAAO,CAAC,EAAI;AAClCA,EAAAA,CAAC,CAACC,EAAF,CAAKT,eAAe,KAAKU,SAAzB,EAAoC,mCAApC;AACAF,EAAAA,CAAC,CAACG,GAAF;AACD,CAHG,CAAJ;AAKAV,IAAI,CAAC,0BAAD,EAA6B,UAAAO,CAAC,EAAI;AACpC,MAAII,cAAJ;AAEAA,EAAAA,cAAc,GAAGZ,eAAe,CAACE,WAAD,EAAc,GAAd,EAAmB,IAAnB,CAAhC;AACAM,EAAAA,CAAC,CAACK,KAAF,CAAQD,cAAR,EAAwBR,WAAxB,EAAqC,sBAArC;AAEAQ,EAAAA,cAAc,GAAGZ,eAAe,CAACK,WAAD,EAAc,GAAd,EAAmB,KAAnB,CAAhC;AACAG,EAAAA,CAAC,CAACK,KAAF,CAAQD,cAAR,EAAwBL,WAAxB,EAAqC,sBAArC;AAEAK,EAAAA,cAAc,GAAGZ,eAAe,CAACI,WAAD,EAAc,GAAd,EAAmB,IAAnB,CAAhC;AACAI,EAAAA,CAAC,CAACK,KAAF,CAAQD,cAAR,EAAwBT,sBAAxB,EAAgD,sBAAhD;AAEAS,EAAAA,cAAc,GAAGZ,eAAe,CAACO,WAAD,EAAc,GAAd,EAAmB,KAAnB,CAAhC;AACAC,EAAAA,CAAC,CAACK,KAAF,CAAQD,cAAR,EAAwBN,sBAAxB,EAAgD,sBAAhD;AAIAM,EAAAA,cAAc,GAAGZ,eAAe,CAACE,WAAD,EAAc,GAAd,EAAmB,IAAnB,CAAhC;AACAM,EAAAA,CAAC,CAACK,KAAF,CAAQD,cAAR,EAAwBT,sBAAxB,EAAgD,sBAAhD;AAEAS,EAAAA,cAAc,GAAGZ,eAAe,CAACK,WAAD,EAAc,GAAd,EAAmB,KAAnB,CAAhC;AACAG,EAAAA,CAAC,CAACK,KAAF,CAAQD,cAAR,EAAwBN,sBAAxB,EAAgD,sBAAhD;AACAE,EAAAA,CAAC,CAACG,GAAF;AACD,CAvBG,CAAJ","sourcesContent":["/* eslint-disable camelcase */\nimport transpileShader from 'luma.gl/shadertools/src/lib/transpile-shader';\nimport test from 'tape-catch';\n\n// 300 version should use 'textureCube()'' instead of 'texture()'\nconst VS_GLSL_300 = `\\\n#version 300 es\n\nin vec4 positions;\nuniform sampler2D sampler;\nuniform samplerCube sCube;\nout vec4 vColor;\n\nvoid f(out float a, in float b) {}\n\nvoid main(void) {\n  gl_Position = positions;\n  vec4 texColor = texture(sampler, texCoord);\n  vec4 texCubeColor = textureCube(sCube, cubeCoord);\n  vColor = vec4(1., 0., 0., 1.);\n}\n`;\n\n// transpiled 300 version should have correct `texure()` syntax\nconst VS_GLSL_300_transpiled = `\\\n#version 300 es\n\nin vec4 positions;\nuniform sampler2D sampler;\nuniform samplerCube sCube;\nout vec4 vColor;\n\nvoid f(out float a, in float b) {}\n\nvoid main(void) {\n  gl_Position = positions;\n  vec4 texColor = texture(sampler, texCoord);\n  vec4 texCubeColor = texture(sCube, cubeCoord);\n  vColor = vec4(1., 0., 0., 1.);\n}\n`;\n\nconst VS_GLSL_100 = `\\\n#version 300 es\n\nattribute vec4 positions;\nuniform sampler2D sampler;\nuniform samplerCube sCube;\nvarying vec4 vColor;\n\nvoid f(out float a, in float b) {}\n\nvoid main(void) {\n  gl_Position = positions;\n  vec4 texColor = texture2D(sampler, texCoord);\n  vec4 texCubeColor = textureCube(sCube, cubeCoord);\n  vColor = vec4(1., 0., 0., 1.);\n}\n`;\n\n// 300 version should use 'textureCube()'' instead of 'texture()'\nconst FS_GLSL_300 = `\\\n#version 300 es\n\nprecision highp float;\n\nout vec4 fragmentColor;\nuniform sampler2D sampler;\nuniform samplerCube sCube;\nin vec4 vColor;\n\nvoid f(out float a, in float b) {}\n\nvoid main(void) {\n  vec4 texColor = texture(sampler, texCoord);\n  vec4 texCubeColor = textureCube(sCube, cubeCoord);\n  fragmentColor = vColor;\n}\n`;\n\n// transpiled 300 version should have correct `texure()` syntax\nconst FS_GLSL_300_transpiled = `\\\n#version 300 es\n\nprecision highp float;\n\nout vec4 fragmentColor;\nuniform sampler2D sampler;\nuniform samplerCube sCube;\nin vec4 vColor;\n\nvoid f(out float a, in float b) {}\n\nvoid main(void) {\n  vec4 texColor = texture(sampler, texCoord);\n  vec4 texCubeColor = texture(sCube, cubeCoord);\n  fragmentColor = vColor;\n}\n`;\n\nconst FS_GLSL_100 = `\\\n#version 300 es\n\nprecision highp float;\n\nout vec4 fragmentColor;\nuniform sampler2D sampler;\nuniform samplerCube sCube;\nvarying vec4 vColor;\n\nvoid f(out float a, in float b) {}\n\nvoid main(void) {\n  vec4 texColor = texture2D(sampler, texCoord);\n  vec4 texCubeColor = textureCube(sCube, cubeCoord);\n  fragmentColor = vColor;\n}\n`;\n/*\nconst VS_GLSL_300 = `\\\n#version 300 es\n\nin vec4 positions;\nuniform sampler2D sampler;\nuniform samplerCube sCube;\nout vec4 vColor;\n\nvoid f(out float a, in float b) {}\n\nvoid main(void) {\n  gl_Position = positions;\n  vec4 texColor = texture(sampler, texCoord);\n  vec4 texCubeColor = textureCube(sCube, cubeCoord);\n  vColor = vec4(1., 0., 0., 1.);\n}\n`;\n\n// 300 version should also be writtend with 'textureCube()'' instead of 'texture()'\nconst VS_GLSL_300_textureCube = `\\\n#version 300 es\n\nin vec4 positions;\nuniform samplerCube sCube;\nout vec4 vColor;\n\nvoid main(void) {\n  gl_Position = positions;\n  vec4 texCubeColor = textureCube(sCube, cubeCoord);\n  vColor = vec4(1., 0., 0., 1.);\n}\n`;\n\n// transpiled version should have correct `texture(` syntax\nconst VS_GLSL_300_textureCube_transpiled = `\\\n#version 300 es\n\nin vec4 positions;\nuniform samplerCube sCube;\nout vec4 vColor;\n\nvoid main(void) {\n  gl_Position = positions;\n  vec4 texCubeColor = texture(sCube, cubeCoord);\n  vColor = vec4(1., 0., 0., 1.);\n}\n`;\n\nconst VS_GLSL_100_textureCube = `\\\n#version 300 es\n\nattribute vec4 positions;\nuniform samplerCube sCube;\nvarying vec4 vColor;\n\nvoid main(void) {\n  gl_Position = positions;\n  vec4 texCubeColor = textureCube(sCube, cubeCoord);\n  vColor = vec4(1., 0., 0., 1.);\n}\n`;\n\nconst FS_GLSL_300 = `\\\n#version 300 es\n\nprecision highp float;\n\nout vec4 fragmentColor;\nuniform sampler2D sampler;\nuniform samplerCube sCube;\nin vec4 vColor;\n\nvoid f(out float a, in float b) {}\n\nvoid main(void) {\n  vec4 texColor = texture(sampler, texCoord);\n  vec4 texCubeColor = textureCube(sCube, cubeCoord);\n  fragmentColor = vColor;\n}\n`;\n\nconst FS_GLSL_100 = `\\\n#version 300 es\n\nprecision highp float;\n\nout vec4 fragmentColor;\nuniform sampler2D sampler;\nuniform samplerCube sCube;\nvarying vec4 vColor;\n\nvoid f(out float a, in float b) {}\n\nvoid main(void) {\n  vec4 texColor = texture2D(sampler, texCoord);\n  vec4 texCubeColor = textureCube(sCube, cubeCoord);\n  fragmentColor = vColor;\n}\n`;\n\nconst VS_GLSL_300 = `\\\n#version 300 es\n\nin vec4 positions;\nuniform sampler2D sampler;\nuniform samplerCube sCube;\nout vec4 vColor;\n\nvoid f(out float a, in float b) {}\n\nvoid main(void) {\n  gl_Position = positions;\n  vec4 texColor = texture(sampler, texCoord);\n  vec4 texCubeColor = textureCube(sCube, cubeCoord);\n  vColor = vec4(1., 0., 0., 1.);\n}\n`;\n*/\n\ntest('transpileShader#import', t => {\n  t.ok(transpileShader !== undefined, 'transpileShader import successful');\n  t.end();\n});\n\ntest('transpileShader#versions', t => {\n  let assembleResult;\n\n  assembleResult = transpileShader(VS_GLSL_300, 100, true);\n  t.equal(assembleResult, VS_GLSL_100, 'correctly transpiled');\n\n  assembleResult = transpileShader(FS_GLSL_300, 100, false);\n  t.equal(assembleResult, FS_GLSL_100, 'correctly transpiled');\n\n  assembleResult = transpileShader(VS_GLSL_100, 300, true);\n  t.equal(assembleResult, VS_GLSL_300_transpiled, 'correctly transpiled');\n\n  assembleResult = transpileShader(FS_GLSL_100, 300, false);\n  t.equal(assembleResult, FS_GLSL_300_transpiled, 'correctly transpiled');\n\n  // test 300 to 300 transpilation, textureCube() should be replaced with texture()\n\n  assembleResult = transpileShader(VS_GLSL_300, 300, true);\n  t.equal(assembleResult, VS_GLSL_300_transpiled, 'correctly transpiled');\n\n  assembleResult = transpileShader(FS_GLSL_300, 300, false);\n  t.equal(assembleResult, FS_GLSL_300_transpiled, 'correctly transpiled');\n  t.end();\n});\n"],"file":"transpile-shader.spec.js"}