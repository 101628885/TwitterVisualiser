{"version":3,"sources":["../../../src/webgl-context/context.js"],"names":["WebGLRenderingContext","WebGL2RenderingContext","createHeadlessContext","getCanvas","createBrowserContext","trackContextState","makeDebugContext","glGetDebugInfo","queryManager","log","isBrowser","assert","GL_ARRAY_BUFFER","GL_TEXTURE_BINDING_3D","ERR_CONTEXT","ERR_WEBGL","ERR_WEBGL2","isWebGL","glContext","Boolean","ARRAY_BUFFER","isWebGL2","TEXTURE_BINDING_3D","assertWebGLContext","gl","assertWebGL2Context","contextDefaults","webgl2","webgl1","throwOnFailure","manageState","canvas","debug","width","height","setContextDefaults","opts","Object","assign","createGLContext","throwOnError","onError","message","Error","targetCanvas","copyState","args","priority","Math","max","logInfo","destroyGLContext","ext","getExtension","destroy","resizeGLContext","devicePixelRatio","useDevicePixels","window","clientWidth","clientHeight","resize","pollGLContext","poll","webGL","info","driver","vendor","renderer","once"],"mappings":"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","sourcesContent":["/* eslint-disable quotes */\n// WebGLRenderingContext related methods\nimport {WebGLRenderingContext, WebGL2RenderingContext} from '../webgl-utils';\nimport {createHeadlessContext} from './create-headless-context';\nimport {getCanvas} from './create-canvas';\nimport {createBrowserContext} from './create-browser-context';\nimport trackContextState from './track-context-state';\nimport {makeDebugContext} from './debug-context';\nimport {glGetDebugInfo} from './context-limits';\nimport queryManager from '../webgl-utils/query-manager';\n\nimport {log, isBrowser} from '../utils';\nimport assert from '../utils/assert';\n\n// Heuristic testing of contexts (to indentify debug wrappers around gl contexts)\nconst GL_ARRAY_BUFFER = 0x8892;\nconst GL_TEXTURE_BINDING_3D = 0x806A;\n\nexport const ERR_CONTEXT = 'Invalid WebGLRenderingContext';\nexport const ERR_WEBGL = ERR_CONTEXT;\nexport const ERR_WEBGL2 = 'Requires WebGL2';\n\n// HACK: avoid use of `gl` parameter name to defeat GL constant inliner, which invalidates check\nexport function isWebGL(glContext) {\n  return Boolean(glContext && (\n    glContext instanceof WebGLRenderingContext ||\n    glContext.ARRAY_BUFFER === GL_ARRAY_BUFFER\n  ));\n}\n\n// HACK: avoid use of `gl` parameter name to defeat GL constant inliner, which invalidates check\nexport function isWebGL2(glContext) {\n  return Boolean(glContext && (\n    glContext instanceof WebGL2RenderingContext ||\n    glContext.TEXTURE_BINDING_3D === GL_TEXTURE_BINDING_3D\n  ));\n}\n\nexport function assertWebGLContext(gl) {\n  // Need to handle debug context\n  assert(isWebGL(gl), ERR_CONTEXT);\n}\n\nexport function assertWebGL2Context(gl) {\n  // Need to handle debug context\n  assert(isWebGL2(gl), ERR_WEBGL2);\n}\n\nconst contextDefaults = {\n  // COMMON CONTEXT PARAMETERS\n  // Attempt to allocate WebGL2 context\n  webgl2: true, // Attempt to create a WebGL2 context (false to force webgl1)\n  webgl1: true,  // Attempt to create a WebGL1 context (false to fail if webgl2 not available)\n  throwOnFailure: true,\n  manageState: true,\n  // BROWSER CONTEXT PARAMETERS\n  canvas: null, // A canvas element or a canvas string id\n  debug: false, // Instrument context (at the expense of performance)\n  // HEADLESS CONTEXT PARAMETERS\n  width: 800, // width are height are only used by headless gl\n  height: 600\n  // WEBGL/HEADLESS CONTEXT PARAMETERS\n  // Remaining options are passed through to context creator\n};\n\n/*\n * Change default context creation parameters.\n * Main use case is regression test suite.\n */\nexport function setContextDefaults(opts = {}) {\n  Object.assign(contextDefaults, {width: 1, height: 1}, opts);\n}\n\n/*\n * Creates a context giving access to the WebGL API\n */\n/* eslint-disable complexity, max-statements */\nexport function createGLContext(opts = {}) {\n  opts = Object.assign({}, contextDefaults, opts);\n  const {canvas, width, height, throwOnError, manageState, debug} = opts;\n\n  // Error reporting function, enables exceptions to be disabled\n  function onError(message) {\n    if (throwOnError) {\n      throw new Error(message);\n    }\n    // log.log(0, message)();\n    return null;\n  }\n\n  let gl;\n  if (isBrowser) {\n    // Get or create a canvas\n    const targetCanvas = getCanvas({canvas, width, height, onError});\n    // Create a WebGL context in the canvas\n    gl = createBrowserContext({canvas: targetCanvas, opts});\n  } else {\n    // Create a headless-gl context under Node.js\n    gl = createHeadlessContext({width, height, opts, onError});\n  }\n  if (!gl) {\n    return null;\n  }\n\n  // Install context state tracking\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: (...args) => log.log(1, ...args)()\n    });\n  }\n\n  // Add debug instrumentation to the context\n  if (isBrowser && debug) {\n    gl = makeDebugContext(gl, {debug});\n    // Debug forces log level to at least 1\n    log.priority = Math.max(log.priority, 1);\n    // Log some debug info about the context\n  }\n\n  // Log context information\n  logInfo(gl);\n\n  // Add to seer integration\n  return gl;\n}\n\nexport function destroyGLContext(gl) {\n  // TODO - Remove from seer integration\n\n  // TODO - Unregister any tracking/polyfills\n\n  // There is no way to delete browser based context\n\n  // Destroy headless gl context\n  const ext = gl.getExtension('STACKGL_destroy_context');\n  if (ext) {\n    ext.destroy();\n  }\n}\n\n/**\n * Resize the canvas' drawing buffer.\n *\n * Can match the canvas CSS size, and optionally also consider devicePixelRatio\n * Can be called every frame\n *\n * Regardless of size, the drawing buffer will always be scaled to the viewport, but\n * for best visual results, usually set to either:\n *  canvas CSS width x canvas CSS height\n *  canvas CSS width * devicePixelRatio x canvas CSS height * devicePixelRatio\n * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n *\n * resizeGLContext(gl, {width, height, useDevicePixels})\n */\nexport function resizeGLContext(gl, opts = {}) {\n  // Resize browser context\n  if (gl.canvas) {\n    /* global window */\n    const devicePixelRatio = opts.useDevicePixels ? window.devicePixelRatio || 1 : 1;\n\n    const width = `width` in opts ? opts.width : gl.canvas.clientWidth;\n    const height = `height` in opts ? opts.height : gl.canvas.clientHeight;\n\n    gl.canvas.width = width * devicePixelRatio;\n    gl.canvas.height = height * devicePixelRatio;\n\n    return;\n  }\n\n  // Resize headless gl context\n  const ext = gl.getExtension('STACKGL_resize_drawingbuffer');\n  if (ext && `width` in opts && `height` in opts) {\n    ext.resize(opts.width, opts.height);\n  }\n}\n\n// POLLING FOR PENDING QUERIES\n// Calling this function checks all pending queries for completion\nexport function pollGLContext(gl) {\n  queryManager.poll(gl);\n}\n\n// HELPER METHODS\n\nfunction logInfo(gl) {\n  const webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  const info = glGetDebugInfo(gl);\n  const driver = info ? `(${info.vendor},${info.renderer})` : '';\n  const debug = gl.debug ? ' debug' : '';\n  log.once(0, `${webGL}${debug} context ${driver}`)();\n}\n"],"file":"context.js"}