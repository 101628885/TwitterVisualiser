{"version":3,"sources":["../../../src/webgl-utils/constants-to-keys.js"],"names":["assert","log","getKeyValue","gl","name","number","Number","isNaN","replace","value","undefined","getKey","key","String","getKeyType","glGet","removed","glKey","glKeyType"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAGA,OAAO,SAASC,WAAT,CAAqBC,EAArB,EAAyBC,IAAzB,EAA+B;AAEpC,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOA,IAAP;AACD;;AAGD,MAAMC,MAAM,GAAGC,MAAM,CAACF,IAAD,CAArB;;AACA,MAAI,CAACG,KAAK,CAACF,MAAD,CAAV,EAAoB;AAClB,WAAOA,MAAP;AACD;;AAGDD,EAAAA,IAAI,GAAGA,IAAI,CAACI,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAP;AACA,MAAMC,KAAK,GAAGN,EAAE,CAACC,IAAD,CAAhB;AACAJ,EAAAA,MAAM,CAACS,KAAK,KAAKC,SAAX,4CAAyDN,IAAzD,EAAN;AACA,SAAOK,KAAP;AACD;AAED,OAAO,SAASE,MAAT,CAAgBR,EAAhB,EAAoBM,KAApB,EAA2B;AAChCA,EAAAA,KAAK,GAAGH,MAAM,CAACG,KAAD,CAAd;;AACA,OAAK,IAAMG,GAAX,IAAkBT,EAAlB,EAAsB;AACpB,QAAIA,EAAE,CAACS,GAAD,CAAF,KAAYH,KAAhB,EAAuB;AACrB,0BAAaG,GAAb;AACD;AACF;;AACD,SAAOC,MAAM,CAACJ,KAAD,CAAb;AACD;AAED,OAAO,SAASK,UAAT,CAAoBX,EAApB,EAAwBM,KAAxB,EAA+B;AACpCT,EAAAA,MAAM,CAACS,KAAK,KAAKC,SAAX,EAAsB,eAAtB,CAAN;AACAD,EAAAA,KAAK,GAAGH,MAAM,CAACG,KAAD,CAAd;;AACA,OAAK,IAAMG,GAAX,IAAkBT,EAAlB,EAAsB;AACpB,QAAIA,EAAE,CAACS,GAAD,CAAF,KAAYH,KAAhB,EAAuB;AACrB,0BAAaG,GAAb;AACD;AACF;;AACD,SAAOC,MAAM,CAACJ,KAAD,CAAb;AACD;AAMD,OAAO,SAASM,KAAT,CAAeZ,EAAf,EAAmBC,IAAnB,EAAyB;AAC9B,MAAI,CAACA,IAAL,EAAW;AACTH,IAAAA,GAAG,CAACe,OAAJ,CAAY,aAAZ,EAA2B,iBAA3B,EAA8C,KAA9C;AACD;;AACD,SAAOd,WAAW,CAACC,EAAD,EAAKC,IAAL,CAAlB;AACD;AAED,OAAO,SAASa,KAAT,CAAed,EAAf,EAAmBM,KAAnB,EAA0B;AAC/B,MAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvBT,IAAAA,GAAG,CAACe,OAAJ,CAAY,cAAZ,EAA4B,kBAA5B,EAAgD,KAAhD;AACD;;AACD,SAAOL,MAAM,CAACR,EAAD,EAAKM,KAAL,CAAb;AACD;AAED,OAAO,SAASS,SAAT,CAAmBf,EAAnB,EAAuBM,KAAvB,EAA8B;AACnC,MAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvBT,IAAAA,GAAG,CAACe,OAAJ,CAAY,kBAAZ,EAAgC,sBAAhC,EAAwD,KAAxD;AACD;;AACD,SAAOF,UAAU,CAACX,EAAD,EAAKM,KAAL,CAAjB;AACD","sourcesContent":["import assert from '../utils/assert';\nimport log from '../utils/log';\n\n// Resolve a WebGL enumeration name (returns itself if already a number)\nexport function getKeyValue(gl, name) {\n  // If not a string, return (assume number)\n  if (typeof name !== 'string') {\n    return name;\n  }\n\n  // If string converts to number, return number\n  const number = Number(name);\n  if (!isNaN(number)) {\n    return number;\n  }\n\n  // Look up string, after removing any 'GL.' or 'gl.' prefix\n  name = name.replace(/^.*\\./, '');\n  const value = gl[name];\n  assert(value !== undefined, `Accessing undefined constant GL.${name}`);\n  return value;\n}\n\nexport function getKey(gl, value) {\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `GL.${key}`;\n    }\n  }\n  return String(value);\n}\n\nexport function getKeyType(gl, value) {\n  assert(value !== undefined, 'undefined key');\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `GL.${key}`;\n    }\n  }\n  return String(value);\n}\n\n// Public methods\n\n// Resolve a WebGL enumeration name (returns itself if already a number)\n// TODO - unify with methods above\nexport function glGet(gl, name) {\n  if (!name) {\n    log.removed('glGet(name)', 'glGet(gl, name)', '6.0')();\n  }\n  return getKeyValue(gl, name);\n}\n\nexport function glKey(gl, value) {\n  if (value === undefined) {\n    log.removed('glKey(value)', 'glKey(gl, value)', '6.0')();\n  }\n  return getKey(gl, value);\n}\n\nexport function glKeyType(gl, value) {\n  if (value === undefined) {\n    log.removed('glKeyType(value)', 'glKeyType(gl, value)', '6.0')();\n  }\n  return getKeyType(gl, value);\n}\n"],"file":"constants-to-keys.js"}