{"version":3,"sources":["../../../src/webgl/buffer.js"],"names":["Resource","Accessor","assertWebGL2Context","getGLTypeFromTypedArray","getTypedArrayFromGLType","log","assert","DEBUG_DATA_LENGTH","Buffer","gl","props","stubRemovedMethods","target","webgl2","_initialize","Object","seal","accessor","Math","round","byteLength","getBytesPerElement","getBytesPerVertex","setData","opts","_setByteLength","bytesUsed","initialize","ArrayBuffer","isView","data","offset","srcOffset","length","bindBuffer","handle","undefined","bufferSubData","debugData","type","setAccessor","sourceBuffer","readOffset","writeOffset","size","copyBufferSubData","dstData","srcByteOffset","dstOffset","ArrayType","clamped","sourceAvailableElementCount","_getAvailableElementCount","dstElementOffset","dstAvailableElementCount","dstElementCount","min","copyElementCount","getBufferSubData","index","bindBufferRange","bindBufferBase","isIndexedBuffer","getData","changed","Number","isFinite","bytes","deprecated","usage","_setData","_getTarget","bufferData","slice","Float32Array","sourceElementOffset","BYTES_PER_ELEMENT","getElementCount","createBuffer","deleteBuffer","pname","value","getBufferParameter","reallocate","removed"],"mappings":"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","sourcesContent":["import GL from '../constants';\nimport Resource from './resource';\nimport Accessor from './accessor';\nimport {assertWebGL2Context} from '../webgl-utils';\nimport {getGLTypeFromTypedArray, getTypedArrayFromGLType} from '../webgl-utils/typed-array-utils';\nimport {log} from '../utils';\nimport assert from '../utils/assert';\n\nconst DEBUG_DATA_LENGTH = 10;\n\nexport default class Buffer extends Resource {\n\n  constructor(gl, props = {}) {\n    super(gl, props);\n    this.stubRemovedMethods('Buffer', 'v6.0', ['layout', 'setLayout', 'getIndexedParameter']);\n\n    // In WebGL1, need to make sure we use GL.ELEMENT_ARRAY_BUFFER when initializing element buffers\n    // otherwise buffer type will lock to generic (non-element) buffer\n    // In WebGL2, we can use GL.COPY_READ_BUFFER which avoids locking the type here\n    this.target = props.target || (this.gl.webgl2 ? GL.COPY_READ_BUFFER : GL.ARRAY_BUFFER);\n\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  // returns number of elements in the buffer (assuming that the full buffer is used)\n  getElementCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerElement(accessor));\n  }\n\n  // returns number of vertices in the buffer (assuming that the full buffer is used)\n  getVertexCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerVertex(accessor));\n  }\n\n  // Creates and initializes the buffer object's data store.\n  initialize(props) {\n    return this._initialize(props);\n  }\n\n  setProps(props) {\n    if ('data' in props) {\n      this.setData(props);\n    }\n    return this;\n  }\n\n  // Stores the accessor of data with the buffer, makes it easy to e.g. set it as an attribute later\n  // {accessor,type,size = 1,offset = 0,stride = 0,normalized = false,integer = false,divisor = 0}\n  setAccessor(opts) {\n    this.accessor = opts;\n    return this;\n  }\n\n  // Allocate a bigger GPU buffer (if the current buffer is not big enough).\n  // If a reallocation is triggered it clears the buffer\n  // Returns:\n  //  `true`: buffer was reallocated, data was cleared\n  //  `false`: buffer was big enough, data is intact\n  reallocate(byteLength) {\n    if (byteLength > this.byteLength) {\n      this._setByteLength(byteLength);\n      return true;\n    }\n    this.bytesUsed = byteLength;\n    return false;\n  }\n\n  // Update with new data\n  setData(opts) {\n    return this.initialize(opts);\n  }\n\n  // Updates a subset of a buffer object's data store.\n  // Data (Typed Array or ArrayBuffer), length is inferred unless provided\n  // Offset into buffer\n  // WebGL2 only: Offset into srcData\n  // WebGL2 only: Number of bytes to be copied\n  subData(props) {\n    // Signature: buffer.subData(new Float32Array([...]))\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    const {data, offset = 0, srcOffset = 0} = props;\n    const byteLength = props.byteLength || props.length;\n\n    // if (byteLength > this.byteLength) {\n    //   byteLength = this.byteLength;\n    // }\n\n    assert(data);\n\n    // Create the buffer - binding it here for the first time locks the type\n    // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n    const target = this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n    this.gl.bindBuffer(target, this.handle);\n    // WebGL2: subData supports additional srcOffset and length parameters\n    if (srcOffset !== 0 || byteLength !== undefined) {\n      assertWebGL2Context(this.gl);\n      this.gl.bufferSubData(this.target, offset, data, srcOffset, byteLength);\n    } else {\n      this.gl.bufferSubData(target, offset, data);\n    }\n    this.gl.bindBuffer(target, null);\n\n    // TODO - update local `data` if offsets are right\n    this.debugData = null;\n\n    if (!this.accessor.type) {\n      this.setAccessor(new Accessor(this.accessor, {type: getGLTypeFromTypedArray(data)}));\n    }\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Copies part of the data of another buffer into this buffer\n  copyData({sourceBuffer, readOffset = 0, writeOffset = 0, size}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n\n    // Use GL.COPY_READ_BUFFER+GL.COPY_WRITE_BUFFER avoid disturbing other targets and locking type\n    gl.bindBuffer(GL.COPY_READ_BUFFER, sourceBuffer.handle);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, this.handle);\n    gl.copyBufferSubData(GL.COPY_READ_BUFFER, GL.COPY_WRITE_BUFFER, readOffset, writeOffset, size);\n    gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    this.debugData = null;\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Reads data from buffer into an ArrayBufferView or SharedArrayBuffer.\n  getData({dstData = null, srcByteOffset = 0, dstOffset = 0, length = 0} = {}) {\n    assertWebGL2Context(this.gl);\n\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);\n\n    const dstElementOffset = dstOffset;\n\n    let dstAvailableElementCount;\n    let dstElementCount;\n    if (dstData) {\n      dstElementCount = dstData.length;\n      dstAvailableElementCount = dstElementCount - dstElementOffset;\n    } else {\n      // Allocate ArrayBufferView with enough size to copy all eligible data.\n      dstAvailableElementCount =\n        Math.min(sourceAvailableElementCount, length || sourceAvailableElementCount);\n      dstElementCount = dstElementOffset + dstAvailableElementCount;\n    }\n\n    const copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);\n    length = length || copyElementCount;\n    assert(length <= copyElementCount);\n    dstData = dstData || new ArrayType(dstElementCount);\n\n    // Use GL.COPY_READ_BUFFER to avoid disturbing other targets and locking type\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, this.handle);\n    this.gl.getBufferSubData(GL.COPY_READ_BUFFER, srcByteOffset, dstData, dstOffset, length);\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n\n    return dstData;\n  }\n\n  /**\n   * Binds a buffer to a given binding point (target).\n   *   GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER take an index, and optionally a range.\n   * @param {Glenum} target - target for the bind operation.\n   * @param {GLuint} index= - the index of the target.\n   *   - GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER need an index to affect state\n   * @param {GLuint} offset=0 - the index of the target.\n   *   - GL.UNIFORM_BUFFER: `offset` must be aligned to GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT.\n   * @param {GLuint} size= - the index of the target.\n   *   - GL.UNIFORM_BUFFER: `size` must be a minimum of GL.UNIFORM_BLOCK_SIZE_DATA.\n   * @returns {Buffer} - Returns itself for chaining.\n   */\n  bind({\n    target = this.target, index = this.accessor && this.accessor.index, offset = 0, size\n  } = {}) {\n    // NOTE: While GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER could\n    // be used as direct binding points, they will not affect transform feedback or\n    // uniform buffer state. Instead indexed bindings need to be made.\n    if (target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER) {\n      if (size !== undefined) {\n        this.gl.bindBufferRange(target, index, this.handle, offset, size);\n      } else {\n        assert(offset === 0); // Make sure offset wasn't supplied\n        this.gl.bindBufferBase(target, index, this.handle);\n      }\n    } else {\n      this.gl.bindBuffer(target, this.handle);\n    }\n\n    return this;\n  }\n\n  unbind({target = this.target, index = this.accessor && this.accessor.index} = {}) {\n    const isIndexedBuffer = target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER;\n    if (isIndexedBuffer) {\n      this.gl.bindBufferBase(target, index, null);\n    } else {\n      this.gl.bindBuffer(target, null);\n    }\n    return this;\n  }\n\n  // DEPRECATED/REMOVED METHODS\n\n  get data() {\n    log.removed('Buffer.data', 'N/A', 'v6.0');\n  }\n\n  get bytes() {\n    log.deprecated('Buffer.bytes', 'Buffer.byteLength', 'v6.1');\n    return this.byteLength;\n  }\n\n  // PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)\n\n  // Returns a short initial data array\n  getDebugData() {\n    if (!this.debugData) {\n      this.debugData = this.getData({length: DEBUG_DATA_LENGTH});\n      return {data: this.debugData, changed: true};\n    }\n    return {data: this.debugData, changed: false};\n  }\n\n  invalidateDebugData() {\n    this.debugData = null;\n  }\n\n  // PRIVATE METHODS\n\n  // Signature: `new Buffer(gl, {data: new Float32Array(...)})`\n  // Signature: `new Buffer(gl, new Float32Array(...))`\n  // Signature: `new Buffer(gl, 100)`\n  _initialize(props = {}) {\n    // Signature `new Buffer(gl, new Float32Array(...)`\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    // Signature: `new Buffer(gl, 100)`\n    if (Number.isFinite(props)) {\n      props = {byteLength: props};\n    }\n\n    if (props.bytes) {\n      log.deprecated('bytes', 'byteLength');\n    }\n\n    const byteLength = props.byteLength || props.bytes || 0;\n    // assert(props.data || byteLength);\n\n    this.usage = props.usage || GL.STATIC_DRAW;\n\n    // DEPRECATE - remove `props` from this list in next major release\n    this.setAccessor(new Accessor(props, props.accessor));\n\n    return props.data ? this._setData(props.data) : this._setByteLength(byteLength);\n  }\n\n  // Allocate a new buffer and initialize to contents of typed array\n  _setData(data, usage = this.usage) {\n    assert(ArrayBuffer.isView(data));\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data, usage);\n    this.gl.bindBuffer(target, null);\n\n    this.usage = usage;\n    this.debugData = data.slice(0, DEBUG_DATA_LENGTH);\n    this.byteLength = data.byteLength;\n    this.bytesUsed = data.byteLength;\n\n    // infer GL type from supplied typed array\n    const type = getGLTypeFromTypedArray(data);\n    assert(type);\n    this.setAccessor(new Accessor(this.accessor, {type}));\n    return this;\n  }\n\n  // Allocate a GPU buffer of specified size.\n  _setByteLength(byteLength, usage = this.usage) {\n    assert(byteLength >= 0);\n\n    // Workaround needed for Safari (#291):\n    // gl.bufferData with size equal to 0 crashes. Instead create zero sized array.\n    let data = byteLength;\n    if (byteLength === 0) {\n      data = new Float32Array(0);\n    }\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data, usage);\n    this.gl.bindBuffer(target, null);\n\n    this.usage = usage;\n    this.debugData = null;\n    this.byteLength = byteLength;\n    this.bytesUsed = byteLength;\n    return this;\n  }\n\n  // Binding a buffer for the first time locks the type\n  // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n  _getTarget() {\n    return this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n  }\n\n  _getAvailableElementCount(srcByteOffset) {\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;\n    return this.getElementCount() - sourceElementOffset;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createBuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteBuffer(this.handle);\n  }\n\n  _getParameter(pname) {\n    this.gl.bindBuffer(this.target, this.handle);\n    const value = this.gl.getBufferParameter(this.target, pname);\n    this.gl.bindBuffer(this.target, null);\n    return value;\n  }\n\n  // DEPRECATED\n\n  updateAccessor(opts) {\n    log.deprecated('updateAccessor(...)', 'setAccessor(new Accessor(buffer.accessor, ...)');\n    this.accessor = new Accessor(this.accessor, opts);\n    return this;\n  }\n\n  setByteLength(byteLength) {\n    log.deprecated('setByteLength', 'reallocate');\n    return this.reallocate(byteLength);\n  }\n}\n"],"file":"buffer.js"}