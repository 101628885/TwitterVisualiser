{"version":3,"sources":["../../../src/webgl/fence-sync.js"],"names":["Resource","assertWebGL2Context","queryManager","FenceSync","gl","opts","promise","Object","seal","flags","timeout","waitSync","handle","result","clientWaitSync","cancelQuery","getParameter","isSignaled","pname","getSyncParameter","fenceSync","deleteQuery","deleteSync"],"mappings":";;;;;;;;;;;;;;;;;;AACA,OAAOA,QAAP,MAAqB,YAArB;AACA,SAAQC,mBAAR,QAAkC,gBAAlC;AACA,OAAOC,YAAP,MAAyB,8BAAzB;;IAEqBC,S;;;AAKnB,qBAAYC,EAAZ,EAAgBC,IAAhB,EAAsB;AAAA;;AAAA;;AACpBJ,IAAAA,mBAAmB,CAACG,EAAD,CAAnB;AACA,mFAAMA,EAAN,EAAUC,IAAV;AAEA,UAAKC,OAAL,GAAe,IAAf;AACAC,IAAAA,MAAM,CAACC,IAAP;AALoB;AAMrB;;;;2BAYoD;AAAA,qFAAJ,EAAI;AAAA,4BAA/CC,KAA+C;AAAA,UAA/CA,KAA+C,2BAAvC,CAAuC;AAAA,8BAApCC,OAAoC;AAAA,UAApCA,OAAoC;;AACnD,WAAKN,EAAL,CAAQO,QAAR,CAAiB,KAAKC,MAAtB,EAA8BH,KAA9B,EAAqCC,OAArC;AACA,aAAO,IAAP;AACD;;;sCAQyD;AAAA,8BAA9CD,KAA8C;AAAA,UAA9CA,KAA8C;AAAA,UAAVC,OAAU,SAAVA,OAAU;AACxD,UAAMG,MAAM,GAAG,KAAKT,EAAL,CAAQU,cAAR,CAAuB,KAAKF,MAA5B,EAAoCH,KAApC,EAA2CC,OAA3C,CAAf;;AAEA,cAAQG,MAAR;AACA;AAEE;;AACF;AAEE;;AACF;AAEE;;AACF;AAEE;;AACF;AAbA;;AAeA,aAAOA,MAAP;AACD;;;6BAEQ;AACPX,MAAAA,YAAY,CAACa,WAAb,CAAyB,IAAzB;AACD;;;iCAEY;AACX,aAAO,KAAKC,YAAL,iBAAP;AACD;;;wCAGmB;AAClB,aAAO,KAAKC,UAAL,EAAP;AACD;;;gCAEW;AACV,aAAO,KAAKA,UAAL,EAAP;AACD;;;iCAEYC,K,EAAO;AAClB,aAAO,KAAKd,EAAL,CAAQe,gBAAR,CAAyB,KAAKP,MAA9B,EAAsCM,KAAtC,CAAP;AACD;;;oCAIe;AACd,aAAO,KAAKd,EAAL,CAAQgB,SAAR,QAAiD,CAAjD,CAAP;AACD;;;oCAEe;AACdlB,MAAAA,YAAY,CAACmB,WAAb,CAAyB,IAAzB;AACA,WAAKjB,EAAL,CAAQkB,UAAR,CAAmB,KAAKV,MAAxB;AACD;;;;EArFoCZ,Q;;SAAlBG,S","sourcesContent":["import GL from '../constants';\nimport Resource from './resource';\nimport {assertWebGL2Context} from '../webgl-utils';\nimport queryManager from '../webgl-utils/query-manager';\n\nexport default class FenceSync extends Resource {\n  /*\n   * @class\n   * @param {WebGL2RenderingContext} gl\n   */\n  constructor(gl, opts) {\n    assertWebGL2Context(gl);\n    super(gl, opts);\n    // query manager needs a promise field\n    this.promise = null;\n    Object.seal(this);\n  }\n\n  /**\n   * The method is a no-op in the absence of the possibility of\n   * synchronizing between multiple GL contexts.\n   * Prevent commands from being added to GPU command queue.\n   * Note: commands can still be buffered in driver.\n   *\n   * @param {GLbitfield} flags\n   * @param {GLint64} timeout\n   * @return {Sync} status\n   */\n  wait({flags = 0, timeout = GL.TIMEOUT_IGNORED} = {}) {\n    this.gl.waitSync(this.handle, flags, timeout);\n    return this;\n  }\n\n  /**\n   * Block all CPU operations until fence is signalled\n   * @param {GLbitfield} flags\n   * @param {GLint64} timeout\n   * @return {GLenum} result\n   */\n  clientWait({flags = GL.SYNC_FLUSH_COMMANDS_BIT, timeout}) {\n    const result = this.gl.clientWaitSync(this.handle, flags, timeout);\n    // TODO - map to boolean?\n    switch (result) {\n    case GL.ALREADY_SIGNALED:\n      // Indicates that sync object was signaled when this method was called.\n      break;\n    case GL.TIMEOUT_EXPIRED:\n      // Indicates that timeout time passed, sync object did not become signaled\n      break;\n    case GL.CONDITION_SATISFIED:\n      // Indicates that sync object was signaled before timeout expired.\n      break;\n    case GL.WAIT_FAILED:\n      // Indicates that an error occurred during execution.\n      break;\n    default:\n    }\n    return result;\n  }\n\n  cancel() {\n    queryManager.cancelQuery(this);\n  }\n\n  isSignaled() {\n    return this.getParameter(GL.SYNC_STATUS) === GL.SIGNALED;\n  }\n\n  // TODO - Query manager needs these?\n  isResultAvailable() {\n    return this.isSignaled();\n  }\n\n  getResult() {\n    return this.isSignaled();\n  }\n\n  getParameter(pname) {\n    return this.gl.getSyncParameter(this.handle, pname);\n  }\n\n  // PRIVATE METHODS\n\n  _createHandle() {\n    return this.gl.fenceSync(GL.SYNC_GPU_COMMANDS_COMPLETE, 0);\n  }\n\n  _deleteHandle() {\n    queryManager.deleteQuery(this);\n    this.gl.deleteSync(this.handle);\n  }\n}\n"],"file":"fence-sync.js"}