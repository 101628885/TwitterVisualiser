{"version":3,"sources":["../../../src/webgl/framebuffer.js"],"names":["Resource","Texture2D","Renderbuffer","Buffer","clear","clearBuffer","withParameters","getFeatures","getTypedArrayFromGLType","getGLTypeFromTypedArray","glFormatToComponents","glTypeToBytes","isWebGL2","assertWebGL2Context","flipRows","scalePixels","glKey","log","assert","ERR_MULTIPLE_RENDERTARGETS","Framebuffer","gl","getParameter","MAX_COLOR_ATTACHMENTS","MAX_DRAW_BUFFERS","colorBufferFloat","colorBufferHalfFloat","supported","getExtension","luma","defaultFramebuffer","id","handle","attachments","opts","width","height","readBuffer","drawBuffers","initialize","Object","seal","color","depth","stencil","check","attachment","target","object","Array","isArray","resize","_createDefaultAttachments","update","clearAttachments","checkStatus","attach","prevHandle","bindFramebuffer","_setReadBuffer","_setDrawBuffers","undefined","drawingBufferWidth","drawingBufferHeight","attachmentPoint","newAttachments","keys","forEach","key","assign","Number","descriptor","_unattach","_attachRenderbuffer","renderbuffer","texture","layer","level","_attachTexture","filter","status","checkFramebufferStatus","Error","_getFrameBufferStatus","value","drawBuffer","x","y","format","type","pixelArray","ArrayType","clamped","components","readPixels","buffer","byteOffset","byteCount","bytes","size","bind","framebuffer","unbind","maxHeight","MAX_SAFE_INTEGER","data","canvas","document","createElement","context","getContext","imageData","createImageData","set","putImageData","toDataURL","image","dataUrl","readDataUrl","Image","src","xoffset","yoffset","zoffset","mipmapLevel","prevBuffer","isFinite","copyTexSubImage2D","copyTexSubImage3D","srcFramebuffer","srcX0","srcY0","srcX1","srcY1","dstX0","dstY0","dstX1","dstY1","mask","prevDrawHandle","prevReadHandle","blitFramebuffer","invalidateAll","invalidateFramebuffer","pname","_getAttachmentParameterFallback","getFramebufferAttachmentParameter","parameters","constructor","ATTACHMENT_PARAMETERS","values","getAttachmentParameter","attachmentName","getAttachmentParameters","window","open","copyToDataUrl","priority","message","defaultAttachments","pixels","mipmaps","bindRenderbuffer","framebufferRenderbuffer","bindTexture","framebufferTextureLayer","face","mapIndexToCubeMapFace","framebufferTexture2D","ext","drawBuffersWEBGL","length","caps","webgl2","EXT_sRGB","createFramebuffer","deleteFramebuffer","STATUS","FRAMEBUFFER_ATTACHMENT_PARAMETERS"],"mappings":"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","sourcesContent":["import Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport Buffer from './buffer';\nimport {clear, clearBuffer} from './clear';\n\nimport {withParameters} from '../webgl-context';\nimport {getFeatures} from '../webgl-context/context-features';\n\nimport {getTypedArrayFromGLType, getGLTypeFromTypedArray} from '../webgl-utils/typed-array-utils';\nimport {glFormatToComponents, glTypeToBytes} from '../webgl-utils/format-utils';\nimport {isWebGL2, assertWebGL2Context} from '../webgl-utils';\nimport {flipRows, scalePixels} from '../webgl-utils';\nimport {glKey} from '../webgl-utils/constants-to-keys';\n\nimport {log} from '../utils';\nimport assert from '../utils/assert';\n\nimport GL from '../constants';\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n\n  static isSupported(gl, {\n    colorBufferFloat,    // Whether floating point textures can be rendered and read\n    colorBufferHalfFloat // Whether half float textures can be rendered and read\n  } = {}) {\n    let supported = true;\n    supported = colorBufferFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'WEBGL.color_buffer_float');\n    supported = colorBufferHalfFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'EXT_color_buffer_half_float');\n    return supported;\n  }\n\n  // Create a Framebuffer wrapper for the default framebuffer (target === null)\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultFramebuffer = gl.luma.defaultFramebuffer || new Framebuffer(gl, {\n      id: 'default-framebuffer',\n      handle: null,\n      attachments: {}\n    });\n    // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    return this.gl.getParameter(this.gl.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    return this.gl.getParameter(this.gl.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL.COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL.COLOR_ATTACHMENT0];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return this.attachments[GL.DEPTH_ATTACHMENT] ||\n      this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] || null;\n  }\n\n  get stencil() {\n    return this.attachments[GL.STENCIL_ATTACHMENT] ||\n      this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] || null;\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer,\n    drawBuffers\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments({color, depth, stencil, width, height});\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false\n  }) {\n    this.attach(attachments, {clearAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize({width, height} = {}) {\n    // for default framebuffer, just update the stored size\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`);\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {clearAttachments = false} = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const key in newAttachments) {\n      // Ensure key is not undefined\n      assert(key !== undefined, 'Misspelled framebuffer binding point?');\n\n      const attachment = Number(key);\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach({attachment});\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments).filter(key => !this.attachments[key]).forEach(key => {\n      delete this.attachments[key];\n    });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL.FRAMEBUFFER);\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  clear({\n    color,\n    depth,\n    stencil,\n    drawBuffers = []\n  } = {}) {\n    // Bind framebuffer and delegate to global clear functions\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer({drawBuffer, value});\n    });\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels({\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    format = GL.RGBA,\n    type, // Auto deduced from pixelArray or gl.UNSIGNED_BYTE\n    pixelArray = null,\n    attachment = GL.COLOR_ATTACHMENT0 // TODO - support gl.readBuffer\n  }) {\n    const {gl} = this;\n\n    // TODO - Set and unset gl.readBuffer\n    if (attachment === GL.COLOR_ATTACHMENT0 && this.handle === null) {\n      attachment = GL.FRONT;\n    }\n\n    // Deduce type and allocated pixelArray if needed\n    if (!pixelArray) {\n      // Allocate pixel array if not already available, using supplied type\n      type = type || gl.UNSIGNED_BYTE;\n      const ArrayType = getTypedArrayFromGLType(type, {clamped: false});\n      const components = glFormatToComponents(format);\n      // TODO - check for composite type (components = 1).\n      pixelArray = pixelArray || new ArrayType(width * height * components);\n    }\n\n    // Pixel array available, if necessary, deduce type from it.\n    type = type || getGLTypeFromTypedArray(pixelArray);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    this.gl.readPixels(x, y, width, height, format, type, pixelArray);\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return pixelArray;\n  }\n\n  // Reads data into provided buffer object asynchronously\n  // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n  readPixelsToBuffer({\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    format = GL.RGBA,\n    type, // When not provided, auto deduced from buffer or GL.UNSIGNED_BYTE\n    buffer = null, // A new Buffer object is created when not provided.\n    byteOffset = 0 // byte offset in buffer object\n  }) {\n    const {gl} = this;\n\n    // Asynchronus read (PIXEL_PACK_BUFFER) is WebGL2 only feature\n    assertWebGL2Context(gl);\n\n    // deduce type if not available.\n    type = type || (buffer ? buffer.type : GL.UNSIGNED_BYTE);\n\n    if (!buffer) {\n      // Create new buffer with enough size\n      const components = glFormatToComponents(format);\n      const byteCount = glTypeToBytes(type);\n      const bytes = byteOffset + (width * height * components * byteCount);\n      buffer = new Buffer(gl, {\n        bytes,\n        type,\n        size: components\n      });\n    }\n\n    buffer.bind({target: GL.PIXEL_PACK_BUFFER});\n    withParameters(gl, {framebuffer: this}, () => {\n      gl.readPixels(x, y, width, height, format, type, byteOffset);\n    });\n    buffer.unbind({target: GL.PIXEL_PACK_BUFFER});\n\n    return buffer;\n  }\n\n  // Reads pixels as a dataUrl\n  copyToDataUrl({\n    attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    maxHeight = Number.MAX_SAFE_INTEGER\n  } = {}) {\n    let data = this.readPixels({attachment});\n\n    // Scale down\n    let {width, height} = this;\n    while (height > maxHeight) {\n      ({data, width, height} = scalePixels({data, width, height}));\n    }\n\n    // Flip to top down coordinate system\n    flipRows({data, width, height});\n\n    /* global document */\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const context = canvas.getContext('2d');\n\n    // Copy the pixels to a 2D canvas\n    const imageData = context.createImageData(width, height);\n    imageData.data.set(data);\n    context.putImageData(imageData, 0, 0);\n\n    return canvas.toDataURL();\n  }\n\n  // Reads pixels into an HTML Image\n  copyToImage({\n    image = null,\n    attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    maxHeight = Number.MAX_SAFE_INTEGER\n  } = {}) {\n    /* global Image */\n    const dataUrl = this.readDataUrl({attachment});\n    image = image || new Image();\n    image.src = dataUrl;\n    return image;\n  }\n\n  // copyToFramebuffer({width, height}) {\n  //   const scaleX = width / this.width;\n  //   const scaleY = height / this.height;\n  //   const scale = Math.min(scaleX, scaleY);\n  //   width = width * scale;\n  //   height = height * scale;\n  //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n  //   this.blit();\n  // }\n\n  // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n  copyToTexture({\n    // Target\n    texture,\n    target, // for cubemaps\n    xoffset = 0,\n    yoffset = 0,\n    zoffset = 0,\n    mipmapLevel = 0,\n\n    // Source\n    attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    x = 0,\n    y = 0,\n    width, // defaults to texture width\n    height // defaults to texture height\n  }) {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const prevBuffer = gl.readBuffer(attachment);\n\n    width = Number.isFinite(width) ? width : texture.width;\n    height = Number.isFinite(height) ? height : texture.height;\n\n    // target\n    switch (texture.target) {\n    case GL.TEXTURE_2D:\n    case GL.TEXTURE_CUBE_MAP:\n      gl.copyTexSubImage2D(\n        target || texture.target,\n        mipmapLevel,\n        xoffset,\n        yoffset,\n        x,\n        y,\n        width,\n        height\n      );\n      break;\n    case GL.TEXTURE_2D_ARRAY:\n    case GL.TEXTURE_3D:\n      gl.copyTexSubImage3D(\n        target || texture.target,\n        mipmapLevel,\n        xoffset,\n        yoffset,\n        zoffset,\n        x,\n        y,\n        width,\n        height\n      );\n      break;\n    default:\n    }\n\n    gl.readBuffer(prevBuffer);\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    return texture;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  blit({\n    srcFramebuffer,\n    attachment = GL.COLOR_ATTACHMENT0,\n    srcX0 = 0, srcY0 = 0, srcX1, srcY1,\n    dstX0 = 0, dstY0 = 0, dstX1, dstY1,\n    color = true,\n    depth = false,\n    stencil = false,\n    mask = 0,\n    filter = GL.NEAREST\n  }) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n\n    if (!srcFramebuffer.handle && attachment === GL.COLOR_ATTACHMENT0) {\n      attachment = GL.FRONT;\n    }\n\n    if (color) {\n      mask |= GL.COLOR_BUFFER_BIT;\n    }\n    if (depth) {\n      mask |= GL.DEPTH_BUFFER_BIT;\n    }\n    if (stencil) {\n      mask |= GL.STENCIL_BUFFER_BIT;\n    }\n    assert(mask);\n\n    srcX1 = srcX1 === undefined ? srcFramebuffer.width : srcX1;\n    srcY1 = srcY1 === undefined ? srcFramebuffer.height : srcY1;\n    dstX1 = dstX1 === undefined ? this.width : dstX1;\n    dstY1 = dstY1 === undefined ? this.height : dstY1;\n\n    const prevDrawHandle = gl.bindFramebuffer(GL.DRAW_FRAMEBUFFER, this.handle);\n    const prevReadHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, srcFramebuffer.handle);\n    gl.readBuffer(attachment);\n    gl.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);\n    gl.readBuffer(this.readBuffer);\n    gl.bindFramebuffer(GL.READ_FRAMEBUFFER, prevReadHandle || null);\n    gl.bindFramebuffer(GL.DRAW_FRAMEBUFFER, prevDrawHandle || null);\n\n    return this;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region of the framebuffer\n  invalidate({attachments = [], x = 0, y = 0, width, height}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n    const prevHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments);\n    } else {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    gl.bindFramebuffer(GL.READ_FRAMEBUFFER, prevHandle);\n    return this;\n  }\n\n  // Return the value for `pname` of the specified attachment.\n  // The type returned is the type of the requested pname\n  getAttachmentParameter(attachment, pname, keys) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(GL.FRAMEBUFFER, attachment, pname);\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, null);\n    }\n    if (keys && value > 1000) {\n      value = glKey(this.gl, value);\n    }\n    return value;\n  }\n\n  getAttachmentParameters(\n    attachment = GL.COLOR_ATTACHMENT0,\n    keys,\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || []\n  ) {\n    const values = {};\n    for (const pname of parameters) {\n      const key = keys ? glKey(this.gl, pname) : pname;\n      values[key] = this.getAttachmentParameter(attachment, pname, keys);\n    }\n    return values;\n  }\n\n  getParameters(keys = true) {\n    const attachments = Object.keys(this.attachments);\n    // if (this === this.gl.luma.defaultFramebuffer) {\n    //   attachments = [GL.COLOR_ATTACHMENT0, GL.DEPTH_STENCIL_ATTACHMENT];\n    // }\n    const parameters = {};\n    for (const attachmentName of attachments) {\n      const attachment = Number(attachmentName);\n      const key = keys ? glKey(this.gl, attachment) : attachment;\n      parameters[key] = this.getAttachmentParameters(attachment, keys);\n    }\n    return parameters;\n  }\n\n  // DEBUG\n\n  // Note: Will only work when called in an event handler\n  show() {\n    /* global window */\n    if (typeof window !== 'undefined') {\n      window.open(this.copyToDataUrl(), 'luma-debug-texture');\n    }\n    return this;\n  }\n\n  log(priority = 0, message = '') {\n    if (priority > log.priority || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || `Framebuffer ${this.id}`;\n    const image = this.copyToDataUrl({maxHeight: 100});\n    log.image({priority, message, image}, message)();\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments({color, depth, stencil, width, height}) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        id: `${this.id}-color0`,\n        pixels: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n          [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n    }\n\n    if (depth && stencil) {\n      // TODO - handle separate stencil\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT] =\n        new Renderbuffer(this.gl, {\n          id: `${this.id}-depth-stencil`,\n          format: GL.DEPTH24_STENCIL8,\n          width,\n          height: 111\n        });\n        // TODO - optional texture\n        // new Texture2D(this.gl, {\n        //   id: `${this.id}-depth-stencil`,\n        //   format: GL.DEPTH24_STENCIL8,\n        //   dataFormat: GL.DEPTH_STENCIL,\n        //   type: GL.UNSIGNED_INT_24_8,\n        //   width,\n        //   height,\n        //   mipmaps: false\n        // });\n    } else if (depth) {\n      // Add a depth buffer if requested and not supplied\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_ATTACHMENT] =\n        new Renderbuffer(this.gl, {\n          id: `${this.id}-depth`,\n          format: GL.DEPTH_COMPONENT16,\n          width,\n          height\n        });\n    } else if (stencil) {\n      // TODO - handle separate stencil\n      assert(false);\n    }\n\n    return defaultAttachments;\n  }\n\n  _unattach({attachment}) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n    this.gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, null);\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL.COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL.COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n    case GL.TEXTURE_2D_ARRAY:\n    case GL.TEXTURE_3D:\n      gl.framebufferTextureLayer(GL.FRAMEBUFFER, attachment, texture.target, level, layer);\n      break;\n\n    case GL.TEXTURE_CUBE_MAP:\n      // layer must be a cubemap face (or if index, converted to cube map face)\n      const face = mapIndexToCubeMapFace(layer);\n      gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, face, texture.handle, level);\n      break;\n\n    case GL.TEXTURE_2D:\n      gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, texture.handle, level);\n      break;\n\n    default:\n      assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(gl, readBuffer) {\n    if (isWebGL2(gl)) {\n      gl.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(readBuffer === GL.COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS);\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(gl, drawBuffers) {\n    if (isWebGL2(gl)) {\n      gl.drawBuffers(drawBuffers);\n    } else {\n      const ext = gl.getExtension('WEBGL.draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(drawBuffers.length === 1 &&\n          (drawBuffers[0] === GL.COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS);\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  // TODO - move to webgl1 polyfills\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n    case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n      return !caps.webgl2 ? 0 : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n    case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n      return !caps.webgl2 ? 8 : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n      return !caps.webgl2 ? GL.UNSIGNED_INT : null;\n    case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n      return !caps.webgl2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n    default:\n      return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n\n  _bindHandle(handle) {\n    return this.gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL.TEXTURE_CUBE_MAP_POSITIVE_X ? layer + GL.TEXTURE_CUBE_MAP_POSITIVE_X : layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n\nexport const FRAMEBUFFER_ATTACHMENT_PARAMETERS = [\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, // WebGLRenderbuffer or WebGLTexture\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint\n  // EXT_sRGB or WebGL2\n  GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, // GL.LINEAR, GL.SRBG\n  // WebGL2\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE // GLint\n  // GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\n  // GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.\n];\n\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\n"],"file":"framebuffer.js"}