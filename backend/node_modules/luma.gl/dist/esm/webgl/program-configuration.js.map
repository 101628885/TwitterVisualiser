{"version":3,"sources":["../../../src/webgl/program-configuration.js"],"names":["Accessor","isWebGL2","decomposeCompositeGLType","ProgramConfiguration","program","id","attributeInfos","attributeInfosByName","varyingInfos","varyingInfosByName","Object","seal","_readAttributesFromProgram","_readVaryingsFromProgram","locationOrName","location","Number","isFinite","attributeInfo","getAttributeInfo","accessor","varying","getVaryingInfo","gl","count","getProgramParameter","handle","index","getActiveAttrib","name","type","size","getAttribLocation","_addAttribute","sort","a","b","getTransformFeedbackVarying","_addVarying","compositeType","components","_inferProperties","push","test","divisor"],"mappings":"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","sourcesContent":["// Contains metadata describing attribute configurations for a program's shaders\n// Much of this is automatically extracted from shaders after program linking\nimport Accessor from './accessor';\nimport {isWebGL2} from '../webgl-utils';\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\n\nexport default class ProgramConfiguration {\n\n  constructor(program) {\n    this.id = program.id;\n    this.attributeInfos = [];\n    this.attributeInfosByName = {};\n    this.varyingInfos = [];\n    this.varyingInfosByName = {};\n    Object.seal(this);\n    this._readAttributesFromProgram(program);\n    this._readVaryingsFromProgram(program);\n  }\n\n  getAttributeInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.attributeInfos[location];\n    }\n    return this.attributeInfosByName[locationOrName] || null;\n  }\n\n  // Resolves an attribute name or index to an index\n  getAttributeLocation(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.location : -1;\n  }\n\n  getAttributeAccessor(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.accessor : null;\n  }\n\n  getVaryingInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.varyingInfos[location];\n    }\n    return this.varyingInfosByName[locationOrName] || null;\n  }\n\n  getVaryingIndex(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.location : -1;\n  }\n\n  getVaryingAccessor(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.accessor : null;\n  }\n\n  // PRIVATE METHODS\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readAttributesFromProgram(program) {\n    const {gl} = program;\n    const count = gl.getProgramParameter(program.handle, gl.ACTIVE_ATTRIBUTES);\n\n    for (let index = 0; index < count; index++) {\n      const {name, type, size} = gl.getActiveAttrib(program.handle, index);\n      const location = gl.getAttribLocation(program.handle, name);\n      this._addAttribute(location, name, type, size);\n    }\n\n    this.attributeInfos.sort((a, b) => a.location - b.location);\n  }\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readVaryingsFromProgram(program) {\n    const {gl} = program;\n    if (!isWebGL2(gl)) {\n      return;\n    }\n\n    const count = gl.getProgramParameter(program.handle, gl.TRANSFORM_FEEDBACK_VARYINGS);\n    for (let location = 0; location < count; location++) {\n      const {name, type, size} = gl.getTransformFeedbackVarying(program.handle, location);\n      this._addVarying(location, name, type, size);\n    }\n\n    this.varyingInfos.sort((a, b) => a.location - b.location);\n  }\n\n  _addAttribute(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = {type, size: size * components};\n    this._inferProperties(location, name, accessor);\n\n    const attributeInfo = {location, name, accessor: new Accessor(accessor)}; // Base values\n    this.attributeInfos.push(attributeInfo);\n    this.attributeInfosByName[attributeInfo.name] = attributeInfo; // For quick name based lookup\n  }\n\n  // Extract additional attribute metadata from shader names (based on attribute naming conventions)\n  _inferProperties(location, name, accessor) {\n    if ((/instance/i).test(name)) {\n      // Any attribute containing the word \"instance\" will be assumed to be instanced\n      accessor.divisor = 1;\n    }\n  }\n\n  _addVarying(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = new Accessor({type, size: size * components});\n\n    const varying = {location, name, accessor}; // Base values\n    this.varyingInfos.push(varying);\n    this.varyingInfosByName[varying.name] = varying; // For quick name based lookup\n  }\n}\n"],"file":"program-configuration.js"}