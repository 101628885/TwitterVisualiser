{"version":3,"sources":["../../../src/webgl/shader.js"],"names":["Resource","parseGLSLCompilerError","getShaderName","assertWebGLContext","uid","log","assert","ERR_SOURCE","GL_FRAGMENT_SHADER","GL_VERTEX_SHADER","GL_COMPILE_STATUS","GL_SHADER_TYPE","Shader","shaderType","gl","props","source","id","getTypeName","initialize","shaderName","_compile","pname","getShaderParameter","handle","getShaderSource","extension","getExtension","getTranslatedShaderSource","shaderSource","compileShader","compileStatus","getParameter","infoLog","getShaderInfoLog","errors","warnings","error","warn","Error","deleteShader","type","getSource","VertexShader","deprecated","Object","assign","createShader","FragmentShader"],"mappings":"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","sourcesContent":["import Resource from './resource';\nimport {parseGLSLCompilerError, getShaderName} from '../webgl-utils';\nimport {assertWebGLContext} from '../webgl-utils';\nimport {uid, log} from '../utils';\nimport assert from '../utils/assert';\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\n\nconst GL_FRAGMENT_SHADER = 0x8B30;\nconst GL_VERTEX_SHADER = 0x8B31;\nconst GL_COMPILE_STATUS = 0x8B81;\nconst GL_SHADER_TYPE = 0x8B4F;\n\n// For now this is an internal class\nexport class Shader extends Resource {\n\n  static getTypeName(shaderType) {\n    switch (shaderType) {\n    case GL_VERTEX_SHADER: return 'vertex-shader';\n    case GL_FRAGMENT_SHADER: return 'fragment-shader';\n    default: assert(false); return 'unknown';\n    }\n  }\n\n  /* eslint-disable max-statements */\n  constructor(gl, props) {\n    assertWebGLContext(gl);\n\n    // Validate arguments\n    assert(typeof props.source === 'string', ERR_SOURCE);\n\n    // Deduce an id, from shader source, or supplied id, or shader type\n    const id =\n      getShaderName(props.source, null) ||\n      props.id ||\n      uid(`unnamed ${Shader.getTypeName(props.shaderType)}`);\n\n    super(gl, {id});\n\n    this.shaderType = props.shaderType;\n    this.source = props.source;\n\n    this.initialize(props);\n  }\n\n  initialize({source}) {\n    const shaderName = getShaderName(source, null);\n    if (shaderName) {\n      this.id = uid(shaderName);\n    }\n    this._compile(source);\n  }\n\n  // Accessors\n\n  getParameter(pname) {\n    return this.gl.getShaderParameter(this.handle, pname);\n  }\n\n  toString() {\n    return `${this.getTypeName(this.shaderType)}:${this.id}`;\n  }\n\n  getName() {\n    return getShaderName(this.source) || 'unnamed-shader';\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  // Debug method - Returns translated source if available\n  getTranslatedSource() {\n    const extension = this.gl.getExtension('WEBGL_debug_shaders');\n    return extension ?\n      extension.getTranslatedShaderSource(this.handle) :\n      'No translated source available. WEBGL_debug_shaders not implemented';\n  }\n\n  // PRIVATE METHODS\n  _compile() {\n    this.gl.shaderSource(this.handle, this.source);\n    this.gl.compileShader(this.handle);\n\n    // TODO - For performance reasons, avoid checking shader compilation errors on production?\n    // TODO - Load log even when no error reported, to catch warnings?\n    // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n    const compileStatus = this.getParameter(GL_COMPILE_STATUS);\n    if (!compileStatus) {\n      const infoLog = this.gl.getShaderInfoLog(this.handle);\n      const {shaderName, errors, warnings} =\n        parseGLSLCompilerError(infoLog, this.source, this.shaderType, this.id);\n      log.error(`GLSL compilation errors in ${shaderName}\\n${errors}`)();\n      log.warn(`GLSL compilation warnings in ${shaderName}\\n${warnings}`)();\n      throw new Error(`GLSL compilation errors in ${shaderName}`);\n    }\n  }\n\n  _deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  _getOptsFromHandle() {\n    return {\n      type: this.getParameter(GL_SHADER_TYPE),\n      source: this.getSource()\n    };\n  }\n}\n\nexport class VertexShader extends Shader {\n  constructor(gl, props) {\n    // DEPRECATED: Support old constructor signature: VertexShader(gl, source)\n    if (typeof props === 'string') {\n      log.deprecated('new FragmentShader(gl, source)', 'new FragmentShader(gl, {source})', '6.1');\n      props = {source: props};\n    }\n    super(gl, Object.assign({}, props, {shaderType: GL_VERTEX_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL_VERTEX_SHADER);\n  }\n}\n\nexport class FragmentShader extends Shader {\n  constructor(gl, props) {\n    // DEPRECATED: Support old constructor signature: FragmentShader(gl, source)\n    if (typeof props === 'string') {\n      log.deprecated('new FragmentShader(gl, source)', 'new FragmentShader(gl, {source})', '6.1');\n      props = {source: props};\n    }\n\n    super(gl, Object.assign({}, props, {shaderType: GL_FRAGMENT_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL_FRAGMENT_SHADER);\n  }\n}\n"],"file":"shader.js"}