{"version":3,"sources":["../../../src/webgl/texture-cube.js"],"names":["Texture","assert","FACES","TextureCube","gl","opts","Object","assign","target","initialize","seal","format","mipmaps","width","height","type","dataFormat","_deduceParameters","_deduceImageSize","data","setCubeMapImageData","generateMipmap","face","x","y","mipmapLevel","_subImage","pixels","border","bind","texImage2D","index","undefined","activeTexture","bindTexture","handle"],"mappings":"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","sourcesContent":["import GL from '../constants';\nimport Texture from './texture';\nimport assert from '../utils/assert';\n\nconst FACES = [\n  GL.TEXTURE_CUBE_MAP_POSITIVE_X,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_X,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Y,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Z,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Z\n];\n\nexport default class TextureCube extends Texture {\n  constructor(gl, opts = {}) {\n    super(gl, Object.assign({}, opts, {target: GL.TEXTURE_CUBE_MAP}));\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(opts = {}) {\n    const {\n      format = GL.RGBA,\n      mipmaps = true\n    } = opts;\n\n    let {\n      width = 1,\n      height = 1,\n      type = GL.UNSIGNED_BYTE,\n      dataFormat\n    } = opts;\n\n    // Deduce width and height based on one of the faces\n    ({type, dataFormat} = this._deduceParameters({format, type, dataFormat}));\n    ({width, height} = this._deduceImageSize({\n      data: opts[GL.TEXTURE_CUBE_MAP_POSITIVE_X], width, height\n    }));\n\n    // Enforce cube\n    assert(width === height);\n\n    // Temporarily apply any pixel store paramaters and build textures\n    // withParameters(this.gl, opts, () => {\n    //   for (const face of CUBE_MAP_FACES) {\n    //     this.setImageData({\n    //       target: face,\n    //       data: opts[face],\n    //       width, height, format, type, dataFormat, border, mipmaps\n    //     });\n    //   }\n    // });\n\n    this.setCubeMapImageData(opts);\n\n    // Called here so that GL.\n    // TODO - should genMipmap() be called on the cubemap or on the faces?\n    if (mipmaps) {\n      this.generateMipmap(opts);\n    }\n\n    // Store opts for accessors\n    this.opts = opts;\n  }\n\n  subImage({face, data, x = 0, y = 0, mipmapLevel = 0}) {\n    return this._subImage({target: face, data, x, y, mipmapLevel});\n  }\n\n  /* eslint-disable max-statements, max-len */\n  setCubeMapImageData({\n    width,\n    height,\n    pixels,\n    data,\n    border = 0,\n    format = GL.RGBA,\n    type = GL.UNSIGNED_BYTE,\n    generateMipmap = false\n  }) {\n    const {gl} = this;\n    pixels = pixels || data;\n    this.bind();\n    if (this.width || this.height) {\n      for (const face of FACES) {\n        gl.texImage2D(face, 0, format, width, height, border, format, type, pixels[face]);\n      }\n    } else {\n      for (const face of FACES) {\n        gl.texImage2D(face, 0, format, format, type, pixels[face]);\n      }\n    }\n  }\n\n  bind({index} = {}) {\n    if (index !== undefined) {\n      this.gl.activeTexture(GL.TEXTURE0 + index);\n    }\n    this.gl.bindTexture(GL.TEXTURE_CUBE_MAP, this.handle);\n    return index;\n  }\n\n  unbind() {\n    this.gl.bindTexture(GL.TEXTURE_CUBE_MAP, null);\n    return this;\n  }\n}\n\nTextureCube.FACES = FACES;\n"],"file":"texture-cube.js"}