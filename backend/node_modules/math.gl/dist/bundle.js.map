{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/gl-vec4/transformMat4.js","webpack:///./node_modules/gl-mat4/rotate.js","webpack:///./node_modules/gl-quat/setAxisAngle.js","webpack:///./node_modules/gl-quat/normalize.js","webpack:///./node_modules/gl-vec3/length.js","webpack:///./node_modules/gl-vec3/cross.js","webpack:///./node_modules/gl-mat4/multiply.js","webpack:///./node_modules/gl-vec3/dot.js","webpack:///./node_modules/gl-vec3/normalize.js","webpack:///./node_modules/gl-quat/slerp.js","webpack:///./node_modules/gl-quat/set.js","webpack:///./node_modules/gl-quat/scale.js","webpack:///./node_modules/gl-quat/rotateZ.js","webpack:///./node_modules/gl-quat/rotateY.js","webpack:///./node_modules/gl-quat/rotateX.js","webpack:///./node_modules/gl-quat/multiply.js","webpack:///./node_modules/gl-quat/lerp.js","webpack:///./node_modules/gl-quat/invert.js","webpack:///./node_modules/gl-quat/conjugate.js","webpack:///./node_modules/gl-quat/calculateW.js","webpack:///./node_modules/gl-quat/add.js","webpack:///./node_modules/gl-quat/rotationTo.js","webpack:///./node_modules/gl-quat/dot.js","webpack:///./node_modules/gl-quat/squaredLength.js","webpack:///./node_modules/gl-quat/length.js","webpack:///./node_modules/gl-quat/identity.js","webpack:///./node_modules/gl-quat/fromMat3.js","webpack:///./node_modules/gl-vec3/transformMat4.js","webpack:///./node_modules/gl-vec2/transformMat4.js","webpack:///./node_modules/gl-mat4/translate.js","webpack:///./node_modules/gl-mat4/scale.js","webpack:///./node_modules/gl-mat4/invert.js","webpack:///./node_modules/gl-mat4/transpose.js","webpack:///./node_modules/gl-mat4/perspective.js","webpack:///./node_modules/gl-mat4/ortho.js","webpack:///./node_modules/gl-mat4/lookAt.js","webpack:///./node_modules/gl-mat4/frustum.js","webpack:///./node_modules/gl-mat4/fromQuat.js","webpack:///./node_modules/gl-mat4/determinant.js","webpack:///./node_modules/gl-vec3/rotateZ.js","webpack:///./node_modules/gl-vec3/rotateY.js","webpack:///./node_modules/gl-vec3/rotateX.js","webpack:///./node_modules/gl-vec3/angle.js","webpack:///./node_modules/gl-vec2/cross.js","webpack:///../../../src/lib/common.js","webpack:///./test/size/import-nothing.js","webpack:///./node_modules/gl-vec4/set.js","webpack:///./node_modules/gl-vec4/scale.js","webpack:///./node_modules/gl-vec4/lerp.js","webpack:///./node_modules/gl-vec4/add.js","webpack:///./node_modules/gl-vec4/normalize.js","webpack:///./node_modules/gl-vec4/dot.js","webpack:///./node_modules/gl-vec4/squaredLength.js","webpack:///./node_modules/gl-vec4/length.js","webpack:///./node_modules/gl-mat4/identity.js","webpack:///./node_modules/gl-vec3/fromValues.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","out","a","x","y","z","w","rad","axis","t","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","b00","b01","b02","b10","b11","b12","b20","b21","b22","len","Math","sqrt","abs","sin","cos","b","ax","ay","az","bx","by","bz","a30","a31","a32","a33","b0","b1","b2","b3","omega","cosom","sinom","scale0","scale1","aw","bw","acos","a0","a1","a2","a3","dot","invDot","vecDot","vecCross","vecLength","vecNormalize","quatNormalize","quatAxisAngle","tmpvec3","xUnitVec3","yUnitVec3","PI","fRoot","fTrace","j","k","v","b03","b04","b05","b06","b07","b08","b09","det","fovy","aspect","near","far","f","tan","nf","left","right","bottom","top","lr","bt","identity","eye","center","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","rl","tb","q","xx","yx","yy","zx","zy","zz","wx","wy","wz","tempA","fromValues","tempB","normalize","cosine","config","EPSILON","debug","precision","printTypes","printDegrees","printRowMajor","console","log","Float32Array"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 44);\n","module.exports = transformMat4\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nfunction transformMat4 (out, a, m) {\n  var x = a[0], y = a[1], z = a[2], w = a[3]\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w\n  return out\n}\n","module.exports = rotate;\n\n/**\n * Rotates a mat4 by the given angle\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nfunction rotate(out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < 0.000001) { return null; }\n    \n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};","module.exports = setAxisAngle\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nfunction setAxisAngle (out, axis, rad) {\n  rad = rad * 0.5\n  var s = Math.sin(rad)\n  out[0] = s * axis[0]\n  out[1] = s * axis[1]\n  out[2] = s * axis[2]\n  out[3] = Math.cos(rad)\n  return out\n}\n","/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nmodule.exports = require('gl-vec4/normalize')\n","module.exports = length;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nfunction length(a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2]\n    return Math.sqrt(x*x + y*y + z*z)\n}","module.exports = cross;\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction cross(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2]\n\n    out[0] = ay * bz - az * by\n    out[1] = az * bx - ax * bz\n    out[2] = ax * by - ay * bx\n    return out\n}","module.exports = multiply;\n\n/**\n * Multiplies two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nfunction multiply(out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  \n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};","module.exports = dot;\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nfunction dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n}","module.exports = normalize;\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nfunction normalize(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2]\n    var len = x*x + y*y + z*z\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len)\n        out[0] = a[0] * len\n        out[1] = a[1] * len\n        out[2] = a[2] * len\n    }\n    return out\n}","module.exports = slerp\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nfunction slerp (out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n\n  var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n    bx = b[0], by = b[1], bz = b[2], bw = b[3]\n\n  var omega, cosom, sinom, scale0, scale1\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw\n  // adjust signs (if necessary)\n  if (cosom < 0.0) {\n    cosom = -cosom\n    bx = -bx\n    by = -by\n    bz = -bz\n    bw = -bw\n  }\n  // calculate coefficients\n  if ((1.0 - cosom) > 0.000001) {\n    // standard case (slerp)\n    omega = Math.acos(cosom)\n    sinom = Math.sin(omega)\n    scale0 = Math.sin((1.0 - t) * omega) / sinom\n    scale1 = Math.sin(t * omega) / sinom\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t\n    scale1 = t\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx\n  out[1] = scale0 * ay + scale1 * by\n  out[2] = scale0 * az + scale1 * bz\n  out[3] = scale0 * aw + scale1 * bw\n\n  return out\n}\n","/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nmodule.exports = require('gl-vec4/set')\n","/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nmodule.exports = require('gl-vec4/scale')\n","module.exports = rotateZ\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nfunction rotateZ (out, a, rad) {\n  rad *= 0.5\n\n  var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n    bz = Math.sin(rad), bw = Math.cos(rad)\n\n  out[0] = ax * bw + ay * bz\n  out[1] = ay * bw - ax * bz\n  out[2] = az * bw + aw * bz\n  out[3] = aw * bw - az * bz\n  return out\n}\n","module.exports = rotateY\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nfunction rotateY (out, a, rad) {\n  rad *= 0.5\n\n  var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n    by = Math.sin(rad), bw = Math.cos(rad)\n\n  out[0] = ax * bw - az * by\n  out[1] = ay * bw + aw * by\n  out[2] = az * bw + ax * by\n  out[3] = aw * bw - ay * by\n  return out\n}\n","module.exports = rotateX\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nfunction rotateX (out, a, rad) {\n  rad *= 0.5\n\n  var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n    bx = Math.sin(rad), bw = Math.cos(rad)\n\n  out[0] = ax * bw + aw * bx\n  out[1] = ay * bw + az * bx\n  out[2] = az * bw - ay * bx\n  out[3] = aw * bw - ax * bx\n  return out\n}\n","module.exports = multiply\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nfunction multiply (out, a, b) {\n  var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n    bx = b[0], by = b[1], bz = b[2], bw = b[3]\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by\n  out[1] = ay * bw + aw * by + az * bx - ax * bz\n  out[2] = az * bw + aw * bz + ax * by - ay * bx\n  out[3] = aw * bw - ax * bx - ay * by - az * bz\n  return out\n}\n","/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nmodule.exports = require('gl-vec4/lerp')\n","module.exports = invert\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nfunction invert (out, a) {\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n    dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3,\n    invDot = dot ? 1.0 / dot : 0\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot\n  out[1] = -a1 * invDot\n  out[2] = -a2 * invDot\n  out[3] = a3 * invDot\n  return out\n}\n","module.exports = conjugate\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nfunction conjugate (out, a) {\n  out[0] = -a[0]\n  out[1] = -a[1]\n  out[2] = -a[2]\n  out[3] = a[3]\n  return out\n}\n","module.exports = calculateW\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nfunction calculateW (out, a) {\n  var x = a[0], y = a[1], z = a[2]\n\n  out[0] = x\n  out[1] = y\n  out[2] = z\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z))\n  return out\n}\n","/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nmodule.exports = require('gl-vec4/add')\n","var vecDot = require('gl-vec3/dot')\nvar vecCross = require('gl-vec3/cross')\nvar vecLength = require('gl-vec3/length')\nvar vecNormalize = require('gl-vec3/normalize')\n\nvar quatNormalize = require('./normalize')\nvar quatAxisAngle = require('./setAxisAngle')\n\nmodule.exports = rotationTo\n\nvar tmpvec3 = [0, 0, 0]\nvar xUnitVec3 = [1, 0, 0]\nvar yUnitVec3 = [0, 1, 0]\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nfunction rotationTo (out, a, b) {\n  var dot = vecDot(a, b)\n  if (dot < -0.999999) {\n    vecCross(tmpvec3, xUnitVec3, a)\n    if (vecLength(tmpvec3) < 0.000001) {\n      vecCross(tmpvec3, yUnitVec3, a)\n    }\n    vecNormalize(tmpvec3, tmpvec3)\n    quatAxisAngle(out, tmpvec3, Math.PI)\n    return out\n  } else if (dot > 0.999999) {\n    out[0] = 0\n    out[1] = 0\n    out[2] = 0\n    out[3] = 1\n    return out\n  } else {\n    vecCross(tmpvec3, a, b)\n    out[0] = tmpvec3[0]\n    out[1] = tmpvec3[1]\n    out[2] = tmpvec3[2]\n    out[3] = 1 + dot\n    return quatNormalize(out, out)\n  }\n}\n","/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nmodule.exports = require('gl-vec4/dot')\n","/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nmodule.exports = require('gl-vec4/squaredLength')\n","/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\nmodule.exports = require('gl-vec4/length')\n","module.exports = identity\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nfunction identity (out) {\n  out[0] = 0\n  out[1] = 0\n  out[2] = 0\n  out[3] = 1\n  return out\n}\n","module.exports = fromMat3\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nfunction fromMat3 (out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8]\n  var fRoot\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0)  // 2w\n    out[3] = 0.5 * fRoot\n    fRoot = 0.5 / fRoot  // 1/(4w)\n    out[0] = (m[5] - m[7]) * fRoot\n    out[1] = (m[6] - m[2]) * fRoot\n    out[2] = (m[1] - m[3]) * fRoot\n  } else {\n    // |w| <= 1/2\n    var i = 0\n    if (m[4] > m[0]) {\n      i = 1\n    }\n    if (m[8] > m[i * 3 + i]) {\n      i = 2\n    }\n    var j = (i + 1) % 3\n    var k = (i + 2) % 3\n\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0)\n    out[i] = 0.5 * fRoot\n    fRoot = 0.5 / fRoot\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot\n  }\n\n  return out\n}\n","module.exports = transformMat4;\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nfunction transformMat4(out, a, m) {\n    var x = a[0], y = a[1], z = a[2],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15]\n    w = w || 1.0\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w\n    return out\n}","module.exports = transformMat4\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nfunction transformMat4(out, a, m) {\n    var x = a[0], \n        y = a[1]\n    out[0] = m[0] * x + m[4] * y + m[12]\n    out[1] = m[1] * x + m[5] * y + m[13]\n    return out\n}","module.exports = translate;\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nfunction translate(out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};","module.exports = scale;\n\n/**\n * Scales the mat4 by the dimensions in the given vec3\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nfunction scale(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};","module.exports = invert;\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nfunction invert(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};","module.exports = transpose;\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nfunction transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n    \n    return out;\n};","module.exports = perspective;\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nfunction perspective(out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};","module.exports = ortho;\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nfunction ortho(out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};","var identity = require('./identity');\n\nmodule.exports = lookAt;\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nfunction lookAt(out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < 0.000001 &&\n        Math.abs(eyey - centery) < 0.000001 &&\n        Math.abs(eyez - centerz) < 0.000001) {\n        return identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};","module.exports = frustum;\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nfunction frustum(out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};","module.exports = fromQuat;\n\n/**\n * Creates a matrix from a quaternion rotation.\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @returns {mat4} out\n */\nfunction fromQuat(out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};","module.exports = determinant;\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nfunction determinant(a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};","module.exports = rotateZ;\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nfunction rotateZ(out, a, b, c){\n    var p = [], r=[]\n    //Translate point to the origin\n    p[0] = a[0] - b[0]\n    p[1] = a[1] - b[1]\n    p[2] = a[2] - b[2]\n  \n    //perform rotation\n    r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c)\n    r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c)\n    r[2] = p[2]\n  \n    //translate to correct position\n    out[0] = r[0] + b[0]\n    out[1] = r[1] + b[1]\n    out[2] = r[2] + b[2]\n  \n    return out\n}","module.exports = rotateY;\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nfunction rotateY(out, a, b, c){\n    var p = [], r=[]\n    //Translate point to the origin\n    p[0] = a[0] - b[0]\n    p[1] = a[1] - b[1]\n    p[2] = a[2] - b[2]\n  \n    //perform rotation\n    r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c)\n    r[1] = p[1]\n    r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c)\n  \n    //translate to correct position\n    out[0] = r[0] + b[0]\n    out[1] = r[1] + b[1]\n    out[2] = r[2] + b[2]\n  \n    return out\n}","module.exports = rotateX;\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nfunction rotateX(out, a, b, c){\n    var p = [], r=[]\n    //Translate point to the origin\n    p[0] = a[0] - b[0]\n    p[1] = a[1] - b[1]\n    p[2] = a[2] - b[2]\n\n    //perform rotation\n    r[0] = p[0]\n    r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c)\n    r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c)\n\n    //translate to correct position\n    out[0] = r[0] + b[0]\n    out[1] = r[1] + b[1]\n    out[2] = r[2] + b[2]\n\n    return out\n}","module.exports = angle\n\nvar fromValues = require('./fromValues')\nvar normalize = require('./normalize')\nvar dot = require('./dot')\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nfunction angle(a, b) {\n    var tempA = fromValues(a[0], a[1], a[2])\n    var tempB = fromValues(b[0], b[1], b[2])\n \n    normalize(tempA, tempA)\n    normalize(tempB, tempB)\n \n    var cosine = dot(tempA, tempB)\n\n    if(cosine > 1.0){\n        return 0\n    } else {\n        return Math.acos(cosine)\n    }     \n}\n","module.exports = cross\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nfunction cross(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0]\n    out[0] = out[1] = 0\n    out[2] = z\n    return out\n}","// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable no-shadow */\n// TODO - remove\nconst config = {};\nconfig.EPSILON = 1e-12;\nconfig.debug = true;\nconfig.precision = 4;\nconfig.printTypes = false;\nconfig.printDegrees = false;\nconfig.printRowMajor = true;\n\nexport {config};\n\nexport function configure(options) {\n  if ('epsilon' in options) {\n    config.EPSILON = options.epsilon;\n  }\n\n  if ('debug' in options) {\n    config.debug = options.debug;\n  }\n}\n\nexport function checkNumber(value) {\n  if (!Number.isFinite(value)) {\n    throw new Error(`Invalid number ${value}`);\n  }\n  return value;\n}\n\nfunction round(value) {\n  return Math.round(value / config.EPSILON) * config.EPSILON;\n}\n\nexport function formatValue(value, {precision = config.precision || 4} = {}) {\n  value = round(value);\n  return parseFloat(value.toPrecision(precision));\n}\n\nexport function formatAngle(\n  value,\n  {precision = config.precision || 4, printDegrees = config.printAngles} = {}\n) {\n  value = printDegrees ? degrees(value) : value;\n  value = round(value);\n  return `${parseFloat(value.toPrecision(precision))}${printDegrees ? '°' : ''}`;\n}\n\n// Returns true if value is either an array or a typed array\n// Note: does not return true for ArrayBuffers and DataViews\nexport function isArray(value) {\n  return Array.isArray(value) || (ArrayBuffer.isView(value) && value.length !== undefined);\n}\n\n// If the array has a clone function, calls it, otherwise returns a copy\nexport function clone(array) {\n  return array.clone ? array.clone() : new Array(array);\n}\n\n// If the argument value is an array, applies the func element wise,\n// otherwise applies func to the argument value\nfunction map(value, func) {\n  if (isArray(value)) {\n    const result = clone(value);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = func(result[i], i, result);\n    }\n    return result;\n  }\n  return func(value);\n}\n\n//\n// GLSL math function equivalents\n// Works on both single values and vectors\n//\n\nexport function radians(degrees) {\n  return map(degrees, degrees => degrees / 180 * Math.PI);\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function degrees(radians) {\n  return map(radians, radians => radians * 180 / Math.PI);\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function sin(radians) {\n  return map(radians, angle => Math.sin(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function cos(radians) {\n  return map(radians, angle => Math.cos(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function tan(radians) {\n  return map(radians, angle => Math.tan(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function asin(radians) {\n  return map(radians, angle => Math.asin(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function acos(radians) {\n  return map(radians, angle => Math.acos(angle));\n}\n\n// GLSL equivalent: Works on single values and vectors\nexport function atan(radians) {\n  return map(radians, angle => Math.atan(angle));\n}\n\nexport function clamp(value, min, max) {\n  return map(value, value => Math.max(min, Math.min(max, value)));\n}\n\nexport function equals(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a === b) {\n      return true;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; ++i) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return Math.abs(a - b) <= config.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n","import {config} from 'math.gl';\n\nconsole.log(config); // eslint-disable-line\n","module.exports = set\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nfunction set (out, x, y, z, w) {\n  out[0] = x\n  out[1] = y\n  out[2] = z\n  out[3] = w\n  return out\n}\n","module.exports = scale\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nfunction scale (out, a, b) {\n  out[0] = a[0] * b\n  out[1] = a[1] * b\n  out[2] = a[2] * b\n  out[3] = a[3] * b\n  return out\n}\n","module.exports = lerp\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nfunction lerp (out, a, b, t) {\n  var ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3]\n  out[0] = ax + t * (b[0] - ax)\n  out[1] = ay + t * (b[1] - ay)\n  out[2] = az + t * (b[2] - az)\n  out[3] = aw + t * (b[3] - aw)\n  return out\n}\n","module.exports = add\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nfunction add (out, a, b) {\n  out[0] = a[0] + b[0]\n  out[1] = a[1] + b[1]\n  out[2] = a[2] + b[2]\n  out[3] = a[3] + b[3]\n  return out\n}\n","module.exports = normalize\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nfunction normalize (out, a) {\n  var x = a[0],\n    y = a[1],\n    z = a[2],\n    w = a[3]\n  var len = x * x + y * y + z * z + w * w\n  if (len > 0) {\n    len = 1 / Math.sqrt(len)\n    out[0] = x * len\n    out[1] = y * len\n    out[2] = z * len\n    out[3] = w * len\n  }\n  return out\n}\n","module.exports = dot\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nfunction dot (a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3]\n}\n","module.exports = squaredLength\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nfunction squaredLength (a) {\n  var x = a[0],\n    y = a[1],\n    z = a[2],\n    w = a[3]\n  return x * x + y * y + z * z + w * w\n}\n","module.exports = length\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nfunction length (a) {\n  var x = a[0],\n    y = a[1],\n    z = a[2],\n    w = a[3]\n  return Math.sqrt(x * x + y * y + z * z + w * w)\n}\n","module.exports = identity;\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nfunction identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};","module.exports = fromValues;\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nfunction fromValues(x, y, z) {\n    var out = new Float32Array(3)\n    out[0] = x\n    out[1] = y\n    out[2] = z\n    return out\n}"],"sourceRoot":""}