import MathArray from './lib/math-array';
import { checkNumber } from './lib/common';
import Vector2 from './vector2';
import Vector3 from './vector3';
import Vector4 from './vector4';
import mat4_determinant from 'gl-mat4/determinant';
import mat4_fromQuat from 'gl-mat4/fromQuat';
import mat4_frustum from 'gl-mat4/frustum';
import mat4_lookAt from 'gl-mat4/lookAt';
import mat4_ortho from 'gl-mat4/ortho';
import mat4_perspective from 'gl-mat4/perspective';
import mat4_transpose from 'gl-mat4/transpose';
import mat4_invert from 'gl-mat4/invert';
import mat4_multiply from 'gl-mat4/multiply';
import mat4_rotate from 'gl-mat4/rotate';
import mat4_scale from 'gl-mat4/scale';
import mat4_translate from 'gl-mat4/translate';
import vec2_transformMat4 from 'gl-vec2/transformMat4';
import vec3_transformMat4 from 'gl-vec3/transformMat4';
import vec4_transformMat4 from 'gl-vec4/transformMat4';
import mat4_rotateX from 'gl-mat4/rotateX';
import mat4_rotateY from 'gl-mat4/rotateY';
import mat4_rotateZ from 'gl-mat4/rotateZ';
const IDENTITY = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
export function validateMatrix4(m) {
  return m.length === 16 && Number.isFinite(m[0]) && Number.isFinite(m[1]) && Number.isFinite(m[2]) && Number.isFinite(m[3]) && Number.isFinite(m[4]) && Number.isFinite(m[5]) && Number.isFinite(m[6]) && Number.isFinite(m[7]) && Number.isFinite(m[8]) && Number.isFinite(m[9]) && Number.isFinite(m[10]) && Number.isFinite(m[11]) && Number.isFinite(m[12]) && Number.isFinite(m[13]) && Number.isFinite(m[14]) && Number.isFinite(m[15]);
}

function validateVector(v, length) {
  if (v.length !== length) {
    return false;
  }

  return v.every(Number.isFinite);
}

export default class Matrix4 extends MathArray {
  constructor(...args) {
    super();

    if (Array.isArray(args[0]) && arguments.length === 1) {
      this.copy(args[0]);
    } else {
      this.identity();
    }
  }

  get ELEMENTS() {
    return 16;
  }

  setRowMajor(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m10 = 0, m11 = 1, m12 = 0, m13 = 0, m20 = 0, m21 = 0, m22 = 1, m23 = 0, m30 = 0, m31 = 0, m32 = 0, m33 = 1) {
    this[0] = m00;
    this[1] = m10;
    this[2] = m20;
    this[3] = m30;
    this[4] = m01;
    this[5] = m11;
    this[6] = m21;
    this[7] = m31;
    this[8] = m02;
    this[9] = m12;
    this[10] = m22;
    this[11] = m32;
    this[12] = m03;
    this[13] = m13;
    this[14] = m23;
    this[15] = m33;
    return this.check();
  }

  setColumnMajor(m00 = 1, m10 = 0, m20 = 0, m30 = 0, m01 = 0, m11 = 1, m21 = 0, m31 = 0, m02 = 0, m12 = 0, m22 = 1, m32 = 0, m03 = 0, m13 = 0, m23 = 0, m33 = 1) {
    this[0] = m00;
    this[1] = m10;
    this[2] = m20;
    this[3] = m30;
    this[4] = m01;
    this[5] = m11;
    this[6] = m21;
    this[7] = m31;
    this[8] = m02;
    this[9] = m12;
    this[10] = m22;
    this[11] = m32;
    this[12] = m03;
    this[13] = m13;
    this[14] = m23;
    this[15] = m33;
    return this.check();
  }

  copy(array) {
    return this.setColumnMajor(...array);
  }

  set(...args) {
    return this.setColumnMajor(...args);
  }

  getElement(i, j, columnMajor = false) {
    return columnMajor ? this[i][j] : this[j][i];
  }

  setElement(i, j, value, columnMajor = false) {
    if (columnMajor) {
      this[i][j] = checkNumber(value);
    } else {
      this[j][i] = checkNumber(value);
    }

    return this;
  }

  determinant() {
    return mat4_determinant(this);
  }

  identity() {
    return this.copy(IDENTITY);
  }

  fromQuaternion(q) {
    mat4_fromQuat(this, q);
    return this.check();
  }

  frustum({
    left,
    right,
    bottom,
    top,
    near,
    far
  }) {
    mat4_frustum(this, left, right, bottom, top, near, far);
    return this.check();
  }

  lookAt({
    eye,
    center = [0, 0, 0],
    up = [0, 1, 0]
  }) {
    mat4_lookAt(this, eye, center, up);
    return this.check();
  }

  ortho({
    left,
    right,
    bottom,
    top,
    near = 0.1,
    far = 500
  }) {
    mat4_ortho(this, left, right, bottom, top, near, far);
    return this.check();
  }

  orthographic({
    fovy = 45 * Math.PI / 180,
    aspect = 1,
    focalDistance = 1,
    near = 0.1,
    far = 500
  }) {
    if (fovy > Math.PI * 2) {
      throw Error('radians');
    }

    const halfY = fovy / 2;
    const top = focalDistance * Math.tan(halfY);
    const right = top * aspect;
    return new Matrix4().ortho({
      left: -right,
      right,
      bottom: -top,
      top,
      near,
      far
    });
  }

  perspective({
    fovy,
    fov = 45 * Math.PI / 180,
    aspect = 1,
    near = 0.1,
    far = 500
  } = {}) {
    fovy = fovy || fov;

    if (fovy > Math.PI * 2) {
      throw Error('radians');
    }

    mat4_perspective(this, fovy, aspect, near, far);
    return this.check();
  }

  transpose() {
    mat4_transpose(this, this);
    return this.check();
  }

  invert() {
    mat4_invert(this, this);
    return this.check();
  }

  multiplyLeft(a) {
    mat4_multiply(this, a, this);
    return this.check();
  }

  multiplyRight(a) {
    mat4_multiply(this, this, a);
    return this.check();
  }

  rotateX(radians) {
    mat4_rotateX(this, this, radians);
    return this.check();
  }

  rotateY(radians) {
    mat4_rotateY(this, this, radians);
    return this.check();
  }

  rotateZ(radians) {
    mat4_rotateZ(this, this, radians);
    return this.check();
  }

  rotateXYZ([rx, ry, rz]) {
    return this.rotateX(rx).rotateY(ry).rotateZ(rz);
  }

  rotateAxis(radians, axis) {
    mat4_rotate(this, this, radians, axis);
    return this.check();
  }

  scale(vec) {
    mat4_scale(this, this, vec);
    return this.check();
  }

  translate(vec) {
    mat4_translate(this, this, vec);
    return this.check();
  }

  transformVector2(vector, out) {
    out = out || new Vector2();
    vec2_transformMat4(out, vector, this);
    validateVector(out, 2);
    return out;
  }

  transformVector3(vector, out) {
    out = out || new Vector3();
    vec3_transformMat4(out, vector, this);
    validateVector(out, 3);
    return out;
  }

  transformVector4(vector, out) {
    out = out || new Vector4();
    vec4_transformMat4(out, vector, this);
    validateVector(out, 4);
    return out.check();
  }

  transformVector(vector, out) {
    switch (vector.length) {
      case 2:
        return this.transformVector2(vector, out);

      case 3:
        return this.transformVector3(vector, out);

      case 4:
        return this.transformVector4(vector, out);

      default:
        throw new Error('Illegal vector');
    }
  }

  transformDirection(vector, out) {
    return this._transformVector(vector, out, 0);
  }

  transformPoint(vector, out) {
    return this._transformVector(vector, out, 1);
  }

  _transformVector(vector, out, w) {
    switch (vector.length) {
      case 2:
        out = out || new Vector2();
        vec4_transformMat4(out, [vector[0], vector[1], 0, w], this);
        out.length = 2;
        validateVector(out, 2);
        break;

      case 3:
        out = out || new Vector3();
        vec4_transformMat4(out, [vector[0], vector[1], vector[2], w], this);
        out.length = 3;
        validateVector(out, 3);
        break;

      case 4:
        if (Boolean(w) !== Boolean(vector[3])) {
          throw new Error('math.gl: Matrix4.transformPoint - invalid vector');
        }

        out = out || new Vector4();
        vec4_transformMat4(out, vector, this);
        validateVector(out, 4);
        break;

      default:
        throw new Error('Illegal vector');
    }

    return out;
  }

  makeRotationX(radians) {
    return this.identity().rotateX(radians);
  }

  makeTranslation(x, y, z) {
    return this.identity().translate([x, y, z]);
  }

}
//# sourceMappingURL=matrix4.js.map