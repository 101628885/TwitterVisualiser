import Vector from './lib/vector';
import { checkNumber } from './lib/common';
import vec3_angle from 'gl-vec3/angle';
import vec3_cross from 'gl-vec3/cross';
import vec3_rotateX from 'gl-vec3/rotateX';
import vec3_rotateY from 'gl-vec3/rotateY';
import vec3_rotateZ from 'gl-vec3/rotateZ';
const ORIGIN = [0, 0, 0];
export default class Vector3 extends Vector {
  constructor(x = 0, y = 0, z = 0) {
    super();

    if (Array.isArray(x) && arguments.length === 1) {
      this.copy(x);
    } else {
      this.set(x, y, z);
    }
  }

  get ELEMENTS() {
    return 3;
  }

  get z() {
    return this[2];
  }

  set z(value) {
    return this[2] = checkNumber(value);
  }

  angle(vector) {
    return vec3_angle(this, vector);
  }

  cross(vector) {
    vec3_cross(this, this, vector);
    return this.check();
  }

  rotateX({
    radians,
    origin = ORIGIN
  }) {
    vec3_rotateX(this, this, origin, radians);
    return this.check();
  }

  rotateY({
    radians,
    origin = ORIGIN
  }) {
    vec3_rotateY(this, this, origin, radians);
    return this.check();
  }

  rotateZ({
    radians,
    origin = ORIGIN
  }) {
    vec3_rotateZ(this, this, origin, radians);
    return this.check();
  }

  operation(operation, ...args) {
    operation(this, this, ...args);
    return this.check();
  }

}
//# sourceMappingURL=vector3.js.map