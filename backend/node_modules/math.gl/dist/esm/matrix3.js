import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import MathArray from './lib/math-array';
import Vector2 from './vector2';
import Vector3 from './vector3';
import mat3_determinant from 'gl-mat3/determinant';
import mat3_transpose from 'gl-mat3/transpose';
import mat3_invert from 'gl-mat3/invert';
import mat3_multiply from 'gl-mat3/multiply';
import mat3_rotate from 'gl-mat3/rotate';
import mat3_scale from 'gl-mat3/scale';
import mat3_translate from 'gl-mat3/translate';
import vec2_transformMat4 from 'gl-vec2/transformMat4';
import vec3_transformMat4 from 'gl-vec3/transformMat4';
import vec4_transformMat4 from 'gl-vec4/transformMat4';
var IDENTITY = [1, 0, 0, 0, 1, 0, 0, 0, 1];
export function validateMatrix3(m) {
  return m.length === 16 && Number.isFinite(m[0]) && Number.isFinite(m[1]) && Number.isFinite(m[2]) && Number.isFinite(m[3]) && Number.isFinite(m[4]) && Number.isFinite(m[5]) && Number.isFinite(m[6]) && Number.isFinite(m[7]) && Number.isFinite(m[8]) && Number.isFinite(m[9]) && Number.isFinite(m[10]) && Number.isFinite(m[11]) && Number.isFinite(m[12]) && Number.isFinite(m[13]) && Number.isFinite(m[14]) && Number.isFinite(m[15]);
}
var tempVector4 = [0, 0, 0, 0];

var Matrix3 = function (_MathArray) {
  _inherits(Matrix3, _MathArray);

  function Matrix3() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _classCallCheck(this, Matrix3);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Matrix3).call(this));

    if (Array.isArray(args[0]) && arguments.length === 1) {
      _this.copy(args[0]);
    } else {
      _this.identity();
    }

    return _this;
  }

  _createClass(Matrix3, [{
    key: "setRowMajor",
    value: function setRowMajor() {
      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var m10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var m20 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var m01 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var m11 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
      var m21 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
      var m02 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      var m12 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
      var m22 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;
      return this.set(m00, m01, m02, m10, m11, m12, m20, m21, m22);
    }
  }, {
    key: "setColumnMajor",
    value: function setColumnMajor() {
      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var m10 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var m11 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
      var m12 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
      var m20 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      var m21 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
      var m22 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;
      return this.set(m00, m01, m02, m10, m11, m12, m20, m21, m22);
    }
  }, {
    key: "set",
    value: function set(m00, m01, m02, m10, m11, m12, m20, m21, m22, m30, m31, m32) {
      this[0] = m00;
      this[1] = m01;
      this[2] = m02;
      this[4] = m10;
      this[5] = m11;
      this[6] = m12;
      this[8] = m20;
      this[9] = m21;
      this[10] = m22;
      this[12] = m30;
      this[13] = m31;
      this[14] = m32;
      return this.check();
    }
  }, {
    key: "determinant",
    value: function determinant() {
      return mat3_determinant(this);
    }
  }, {
    key: "identity",
    value: function identity() {
      for (var i = 0; i < IDENTITY.length; ++i) {
        this[i] = IDENTITY[i];
      }

      return this.check();
    }
  }, {
    key: "transpose",
    value: function transpose() {
      mat3_transpose(this, this);
      return this.check();
    }
  }, {
    key: "invert",
    value: function invert() {
      mat3_invert(this, this);
      return this.check();
    }
  }, {
    key: "multiplyLeft",
    value: function multiplyLeft(a) {
      mat3_multiply(this, a, this);
      return this.check();
    }
  }, {
    key: "multiplyRight",
    value: function multiplyRight(a) {
      mat3_multiply(this, this, a);
      return this.check();
    }
  }, {
    key: "rotateAxis",
    value: function rotateAxis(radians, axis) {
      mat3_rotate(this, this, radians, axis);
      return this.check();
    }
  }, {
    key: "scale",
    value: function scale(vec) {
      mat3_scale(this, this, vec);
      return this.check();
    }
  }, {
    key: "translate",
    value: function translate(vec) {
      mat3_translate(this, this, vec);
      return this.check();
    }
  }, {
    key: "transformVector2",
    value: function transformVector2(vector, out) {
      out = out || new Vector2();
      vec2_transformMat4(out, vector, this);
      return out;
    }
  }, {
    key: "transformVector3",
    value: function transformVector3(vector) {
      var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();
      out = out || new Vector3();
      vec3_transformMat4(out, vector, this);
      return out;
    }
  }, {
    key: "transformVector",
    value: function transformVector(vector, out) {
      switch (vector.length) {
        case 2:
          return this.transformVector2(vector, out);

        case 3:
          return this.transformVector3(vector, out);

        default:
          throw new Error('Illegal vector');
      }
    }
  }, {
    key: "transformDirection",
    value: function transformDirection(vector, out) {
      switch (vector.length) {
        case 2:
          vec4_transformMat4(tempVector4, [vector[0], vector[1], 0, 0], this);
          out = out || new Vector2();
          out[0] = tempVector4[0];
          out[1] = tempVector4[1];
          break;

        case 3:
          vec4_transformMat4(tempVector4, [vector[0], vector[1], vector[2], 0], this);
          out = out || new Vector3();
          out[0] = tempVector4[0];
          out[1] = tempVector4[1];
          out[2] = tempVector4[2];
          break;

        default:
          throw new Error('Illegal vector');
      }

      return out;
    }
  }, {
    key: "ELEMENTS",
    get: function get() {
      return 9;
    }
  }]);

  return Matrix3;
}(MathArray);

export { Matrix3 as default };
//# sourceMappingURL=matrix3.js.map