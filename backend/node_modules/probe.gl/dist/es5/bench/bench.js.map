{"version":3,"sources":["../../../src/bench/bench.js"],"names":["noop","TIME_THRESHOLD_MS","TIME_COOLDOWN_MS","MIN_ITERATIONS","LOG_ENTRY","GROUP","TEST","COMPLETE","CALIBRATION_TESTS","id","initFunc","testFunc","opts","Bench","log","time","delay","minIterations","markdown","global","probe","logResultsAsMarkdownTable","logResultsAsTree","tests","results","table","Object","seal","func1","func2","timer","Date","onBenchmarkComplete","promise","runAsyncTests","then","elapsed","logEntry","entry","message","onSuiteComplete","group","priority","iterations","itersPerSecond","current","Math","round","percent","max","localStorage","LocalStorage","saved","getConfiguration","updateTable","updateConfiguration","console","undefined","delta","runCalibrationTests","Promise","resolve","test","runAsyncTest","silent","setTimeout","runBenchTest","iterationsPerSecond","elapsedMillis","multiplier","runBenchTestIterations","testArgs","context","i","call","COL1","COL2","logResultsAsTreeWithElapsed","toFixed"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\n/* global setTimeout, console */\nimport {formatSI, rightPad} from '../lib/utils/formatters';\nimport {global} from '../lib/utils/globals';\nimport {autobind} from '../lib/utils/autobind';\nimport LocalStorage from '../lib/utils/local-storage';\nimport assert from 'assert';\n\nconst noop = () => {};\n\nconst TIME_THRESHOLD_MS = 80; // Minimum number of milliseconds to iterate each bench test\nconst TIME_COOLDOWN_MS = 5; // milliseconds of \"cooldown\" between tests\nconst MIN_ITERATIONS = 1; // Increase if OK to let slow benchmarks take long time\n\nexport const LOG_ENTRY = {\n  GROUP: 'group',\n  TEST: 'test',\n  COMPLETE: 'complete'\n};\n\nconst CALIBRATION_TESTS = [\n  {\n    id: 'warmup',\n    initFunc: noop,\n    testFunc: () => 100,\n    opts: {}\n  }\n];\n\nexport default class Bench {\n  constructor({\n    id, // Name is needed for regression (storing/loading)\n    log,\n    time = TIME_THRESHOLD_MS,\n    delay = TIME_COOLDOWN_MS,\n    minIterations = MIN_ITERATIONS\n  } = {}) {\n    if (!log) {\n      const markdown = global.probe && global.probe.markdown;\n      log = markdown ? logResultsAsMarkdownTable : logResultsAsTree;\n    }\n\n    this.id = id;\n    this.opts = {log, time, delay, minIterations};\n    this.tests = {};\n    this.results = {};\n    this.table = {};\n    autobind(this);\n    Object.seal(this);\n  }\n\n  calibrate(id, func1, func2, opts) {\n    return this;\n  }\n\n  run() {\n    const timer = new Date();\n\n    const {tests, onBenchmarkComplete} = this;\n    const promise = runAsyncTests({tests, onBenchmarkComplete});\n\n    promise.then(() => {\n      const elapsed = (new Date() - timer) / 1000;\n      logEntry(this, {entry: LOG_ENTRY.COMPLETE, time: elapsed, message: 'Complete'});\n      this.onSuiteComplete();\n    });\n\n    return promise;\n  }\n\n  group(id) {\n    assert(!this.tests[id], 'tests need unique id strings');\n    this.tests[id] = {id, group: true, opts: this.opts};\n    return this;\n  }\n\n  // Signatures:\n  // add(priority, id, initFunc, testFunc)\n  // add(priority, id, testFunc)\n  // add(id, initFunc, testFunc)\n  // add(id, testFunc)\n  add(priority, id, func1, func2) {\n    if (typeof priority === 'string') {\n      func2 = func1;\n      func1 = id;\n      id = priority;\n      priority = 0;\n    }\n\n    assert(id);\n    assert(typeof func1 === 'function');\n\n    let initFunc = null;\n    let testFunc = func1;\n    if (typeof func2 === 'function') {\n      initFunc = func1;\n      testFunc = func2;\n    }\n\n    assert(!this.tests[id], 'tests need unique id strings');\n    this.tests[id] = {id, priority, initFunc, testFunc, opts: this.opts};\n    return this;\n  }\n\n  onBenchmarkComplete({id, time, iterations, itersPerSecond}) {\n    // calculate iterations per second, save as numeric value\n    const current = Math.round(iterations / time);\n    // Format as human readable strings\n    this.table[id] = {\n      percent: '',\n      iterations: `${itersPerSecond}/s`,\n      current,\n      max: ''\n    };\n  }\n\n  onSuiteComplete() {\n    const localStorage = new LocalStorage({id: this.id});\n    const saved = localStorage.getConfiguration();\n    const current = this.updateTable(this.table, saved);\n    localStorage.updateConfiguration(current);\n    console.table(current);\n  }\n\n  updateTable(current, saved) {\n    for (const id in this.table) {\n      if (saved[id] && saved[id].max !== undefined) {\n        current[id].max = Math.max(current[id].current, saved[id].max);\n        const delta = current[id].current / saved[id].max;\n        current[id].percent = `${Math.round(delta * 100 - 100)}%`;\n      } else {\n        current[id].max = current[id].current;\n      }\n    }\n    return current;\n  }\n}\n\n// Helper methods\n\nfunction runCalibrationTests({tests}) {\n  let promise = Promise.resolve(true);\n\n  // Run default warm up and calibration tests\n  for (const test of CALIBRATION_TESTS) {\n    promise = promise.then(() => runAsyncTest({test, silent: true}));\n  }\n\n  return promise;\n}\n\n// Run a list of bench test case async\nfunction runAsyncTests({tests, onBenchmarkComplete = noop}) {\n  // Run default warm up and calibration tests\n  let promise = runCalibrationTests({tests, onBenchmarkComplete});\n\n  // Run the suite tests\n  for (const id in tests) {\n    const test = tests[id];\n    promise = promise.then(() => runAsyncTest({test, onBenchmarkComplete}));\n  }\n  return promise;\n}\n\nfunction runAsyncTest({test, onBenchmarkComplete, silent = false}) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      try {\n        if (test.group) {\n          logEntry(test, {entry: LOG_ENTRY.GROUP, id: test.id, message: test.id});\n        } else {\n          const {time, iterations} = runBenchTest(test);\n\n          const iterationsPerSecond = iterations / time;\n          const itersPerSecond = formatSI(iterationsPerSecond);\n          if (!silent) {\n            logEntry(test, {\n              entry: LOG_ENTRY.TEST, id: test.id, priority: test.priority, itersPerSecond, time,\n              message: `${test.id} ${itersPerSecond}/s`\n            });\n          }\n\n          if (onBenchmarkComplete) {\n            onBenchmarkComplete({\n              id: test.id,\n              time,\n              iterations,\n              iterationsPerSecond,\n              itersPerSecond\n            });\n          }\n        }\n      } finally {\n        resolve(true);\n      }\n    }, test.opts.delay); // small delay between each test. System cools and DOM console updates...\n  });\n}\n\n// Run a test func for an increasing amount of iterations until time threshold exceeded\nfunction runBenchTest(test) {\n  let iterations = test.opts.minIterations / 10;\n  let elapsedMillis = 0;\n\n  // Run increasing amount of interations until we reach time threshold, default at least 100ms\n  while (elapsedMillis < test.opts.time) {\n    let multiplier = 10;\n    if (elapsedMillis > 10) {\n      multiplier = (test.opts.time / elapsedMillis) * 1.25;\n    }\n    iterations *= multiplier;\n    const timer = new Date();\n    runBenchTestIterations(test, iterations);\n    elapsedMillis = new Date() - timer;\n  }\n\n  const time = elapsedMillis / 1000;\n\n  return {time, iterations};\n}\n\n// Run a test func for a specific amount of iterations\nfunction runBenchTestIterations(test, iterations) {\n  const testArgs = test.initFunc && test.initFunc();\n\n  const {context, testFunc} = test;\n  if (context && testArgs) {\n    for (let i = 0; i < iterations; i++) {\n      testFunc.call(context, testArgs);\n    }\n  } else {\n    for (let i = 0; i < iterations; i++) {\n      testFunc.call(context);\n    }\n  }\n}\n\nfunction logEntry(test, opts) {\n  const priority = (global.probe && global.probe.priority) | 10;\n  if ((opts.priority | 0) <= priority) {\n    test.opts.log(opts);\n  }\n}\n\nexport function logResultsAsMarkdownTable({entry, id, itersPerSecond, time}) {\n  const COL1 = 50;\n  const COL2 = 12;\n  switch (entry) {\n  case LOG_ENTRY.GROUP:\n    console.log('');\n    console.log(`| ${rightPad(id, COL1)} | iterations/s |`);\n    console.log(`| ${rightPad('---', COL1)} | ---          |`);\n    break;\n  case LOG_ENTRY.TEST:\n    console.log(`| ${rightPad(id, COL1)} | ${rightPad(itersPerSecond, COL2)} |`);\n    break;\n  case LOG_ENTRY.COMPLETE:\n    console.log('');\n    console.log(`Completed benchmark in ${time}s`);\n    break;\n  default:\n  }\n}\n\nexport function logResultsAsTree({entry, id, itersPerSecond, time}) {\n  switch (entry) {\n  case LOG_ENTRY.GROUP:\n    console.log('');\n    console.log(`${id}`);\n    break;\n  case LOG_ENTRY.TEST:\n    console.log(`├─ ${id}: ${itersPerSecond} iterations/s`);\n    break;\n  case LOG_ENTRY.COMPLETE:\n    console.log('');\n    console.log(`Completed benchmark in ${time}s`);\n    break;\n  default:\n  }\n}\n\nexport function logResultsAsTreeWithElapsed({entry, id, itersPerSecond, time}) {\n  switch (entry) {\n  case LOG_ENTRY.TEST:\n    console.log(`├─ ${id}: ${itersPerSecond} iterations/s (${time.toFixed(2)}s elapsed)`);\n    break;\n  default:\n    logResultsAsTree({entry, id, itersPerSecond, time});\n  }\n}\n\n"],"file":"bench.js"}