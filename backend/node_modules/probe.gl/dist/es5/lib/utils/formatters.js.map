{"version":3,"sources":["../../../../src/lib/utils/formatters.js"],"names":["formatTime","ms","formatted","toFixed","leftPad","string","length","padLength","Math","max","repeat","rightPad","splitIntoBaseAndExponent","number","base","exponent","getSISuffix","multipleOf3","SI_SUFFIXES","key","String","formatSI","precision","floor","remaining","digits","pow","toPrecision","formatValue","v","opts","EPSILON","isInteger","Array","isArray","ArrayBuffer","isView","formatArrayValue","Number","isFinite","abs","decimal","indexOf","slice","maxElts","size","i","terminator","formatImage","image","message","scale","maxWidth","imageUrl","src","replace","width","min","height","style","join"],"mappings":"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","sourcesContent":["// TODO: Currently unused, keeping in case we want it later for log formatting\nexport function formatTime(ms) {\n  let formatted;\n  if (ms < 10) {\n    formatted = `${ms.toFixed(2)}ms`;\n  } else if (ms < 100) {\n    formatted = `${ms.toFixed(1)}ms`;\n  } else if (ms < 1000) {\n    formatted = `${ms.toFixed(0)}ms`;\n  } else {\n    formatted = `${(ms / 1000).toFixed(2)}s`;\n  }\n  return formatted;\n}\n\nexport function leftPad(string, length = 8) {\n  const padLength = Math.max(length - string.length, 0);\n  return `${' '.repeat(padLength)}${string}`;\n}\n\nexport function rightPad(string, length = 8) {\n  const padLength = Math.max(length - string.length, 0);\n  return `${string}${' '.repeat(padLength)}`;\n}\n\n// Breaks a number into a normalized base and an exponent\n// E.g. 5640 => {5.64, 1000}\nfunction splitIntoBaseAndExponent(number) {\n  let base = number;\n  let exponent = 0;\n  if (number !== 0) {\n    while (base >= 10 || base <= -10) {\n      base /= 10;\n      exponent++;\n    }\n    while (base < 1 && base > -1) {\n      base *= 10;\n      exponent--;\n    }\n  }\n  return {base, exponent};\n}\n\nexport function getSISuffix(multipleOf3) {\n  const SI_SUFFIXES = {0: '', 1: 'K', 2: 'M', 3: 'G', '-1': 'm', '-2': 'Âµ', '-3': 'n'};\n  const key = String(multipleOf3);\n  return key in SI_SUFFIXES ? SI_SUFFIXES[key] : `e${multipleOf3 * 3}`;\n}\n\nexport function formatSI(number, precision = 3) {\n  const {base, exponent} = splitIntoBaseAndExponent(number);\n  const multipleOf3 = Math.floor(exponent / 3);\n  const remaining = exponent - multipleOf3 * 3;\n  const digits = base * Math.pow(10, remaining);\n  return `${digits.toPrecision(precision)}${getSISuffix(multipleOf3)}`;\n}\n\nexport function formatValue(v, opts = {}) {\n  const EPSILON = 1e-16;\n  const {isInteger = false} = opts;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    return v.toFixed(0);\n  }\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    return v.toFixed(0);\n  }\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n\n// Helper to formatValue\nfunction formatArrayValue(v, opts) {\n  const {maxElts = 16, size = 1} = opts;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += `,${(i % size === 0) ? ' ' : ''}`;\n    }\n    string += formatValue(v[i], opts);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return `${string}${terminator}`;\n}\n\n// Inspired by https://github.com/hughsk/console-image (MIT license)\nexport function formatImage(image, message, scale, maxWidth = 600) {\n  const imageUrl = image.src.replace(/\\(/g, '%28').replace(/\\)/g, '%29');\n\n  if (image.width > maxWidth) {\n    scale = Math.min(scale, maxWidth / image.width);\n  }\n\n  const width = image.width * scale;\n  const height = image.height * scale;\n\n  const style = [\n    'font-size:1px;',\n    `padding:${Math.floor(height / 2)}px ${Math.floor(width / 2)}px;`,\n    `line-height:${height}px;`,\n    `background:url(${imageUrl});`,\n    `background-size:${width}px ${height}px;`,\n    'color:transparent;'\n  ].join('');\n\n  return [`${message} %c+`, style];\n}\n"],"file":"formatters.js"}