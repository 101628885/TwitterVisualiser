"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _browserDriver = _interopRequireDefault(require("./browser-driver"));

var _color = require("../../lib/utils/color");

var _log = _interopRequireDefault(require("../../lib/log"));

var log = new _log.default({
  id: 'render-test'
});
var webpackEnv = 'render';

if (process.argv.length >= 3) {
  webpackEnv = process.argv[2];
}

var DEFAULT_CONFIG = {
  title: 'BrowserTest',
  exposeFunction: 'taskComplete',
  parameters: ["--env.".concat(webpackEnv)]
};

var BrowserTestDriver = function (_BrowserDriver) {
  (0, _inherits2.default)(BrowserTestDriver, _BrowserDriver);

  function BrowserTestDriver() {
    (0, _classCallCheck2.default)(this, BrowserTestDriver);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BrowserTestDriver).apply(this, arguments));
  }

  (0, _createClass2.default)(BrowserTestDriver, [{
    key: "run",
    value: function run() {
      var _this = this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      config = Object.assign(DEFAULT_CONFIG, config);
      var _config = config,
          title = _config.title,
          exposeFunction = _config.exposeFunction;
      this.title = title;
      log.log({
        message: "".concat(title, " started. Launching Chromium instance, waiting for ").concat(exposeFunction, "..."),
        color: _color.COLOR.YELLOW
      })();
      this.time = Date.now();
      return Promise.resolve().then(function (_) {
        return _this.startServer(config);
      }).then(function (_) {
        return _this.startBrowser();
      }).then(function (_) {
        return _this.newPage();
      }).then(function (_) {
        return _this.exposeFunction(exposeFunction);
      }).then(function (resultString) {
        var result = JSON.parse(resultString);
        var ok = result.success === Boolean(result.success) && (!result.failedTest || typeof result.failedTest === 'string');

        if (!ok) {
          throw new Error("Illegal response \"".concat(resultString, "\" returned from Chrome test script"));
        }

        if (!result.success) {
          throw new Error(result.failedTest || 'Unknown failure');
        }

        _this._success();
      }).catch(function (error) {
        _this._failure(error);
      });
    }
  }, {
    key: "_success",
    value: function _success() {
      var elapsed = ((Date.now() - this.time) / 1000).toFixed(1);
      log.log({
        message: "".concat(this.title, " successfully completed in ").concat(elapsed, "s!"),
        color: _color.COLOR.BRIGHT_GREEN
      })();
      this.setShellStatus(true);
      this.exit();
    }
  }, {
    key: "_failure",
    value: function _failure(error) {
      log.log({
        message: "".concat(this.title, " failed: ").concat(error.message, ". Keeping browser open to allow debugging."),
        color: _color.COLOR.BRIGHT_RED
      })();
      this.setShellStatus(false);
    }
  }]);
  return BrowserTestDriver;
}(_browserDriver.default);

exports.default = BrowserTestDriver;
//# sourceMappingURL=browser-test-driver.js.map