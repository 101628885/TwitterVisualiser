{"version":3,"sources":["../../../../src/test-utils/image-utils/diff-images.js"],"names":["DEFAULT_THRESHOLD","getY","r","g","b","getI","getQ","getESq","dY","dI","dQ","applyAlpha","c","a","colorDelta","img1","img2","index","Math","sqrt","colorDeltaSq","i","a1","a2","r1","g1","b1","r2","g2","b2","diffImagePixels","data1","data2","colorDeltaThreshold","pixelCount","data","length","maxDeltaSq","badPixels","delta","percentage"],"mappings":"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","sourcesContent":["/*\n * Calculate perceived color difference using YIQ NTSC transmission color space\n * Based on 2010 paper by Yuriy Kotsarenko and Fernando Ramos\n * http://www.progmat.uaem.mx:8080/artVol2Num2/Articulo3Vol2Num2.pdf\n */\nconst DEFAULT_THRESHOLD = 255 * 0.05;\n\nconst getY = (r, g, b) => r * 0.29889531 + g * 0.58662247 + b * 0.11448223;\nconst getI = (r, g, b) => r * 0.59597799 - g * 0.2741761 - b * 0.32180189;\nconst getQ = (r, g, b) => r * 0.21147017 - g * 0.52261711 + b * 0.31114694;\nconst getESq = (dY, dI, dQ) => 0.5053 * dY * dY + 0.299 * dI * dI + 0.1957 * dQ * dQ;\n\n// Get blended r/g/b value after applying alpha\nconst applyAlpha = (c, a) => 255 + (c - 255) * a / 255;\n\n/**\n * Get dE square at given index from two pixel arrays\n * @param {Uint8ClampedArray} img1 - pixel data of first image\n * @param {Uint8ClampedArray} img2 - pixel data of second image\n * @param {Number} i - pixel index\n */\nfunction colorDelta(img1, img2, index) {\n  return Math.sqrt(colorDeltaSq(img1, img2, index));\n}\n\nfunction colorDeltaSq(img1, img2, index) {\n  const i = index * 4;\n  const a1 = img1[i + 3];\n  const a2 = img2[i + 3];\n\n  const r1 = applyAlpha(img1[i + 0], a1);\n  const g1 = applyAlpha(img1[i + 1], a1);\n  const b1 = applyAlpha(img1[i + 2], a1);\n\n  const r2 = applyAlpha(img2[i + 0], a2);\n  const g2 = applyAlpha(img2[i + 1], a2);\n  const b2 = applyAlpha(img2[i + 2], a2);\n\n  return getESq(\n    getY(r1, g1, b1) - getY(r2, g2, b2),\n    getI(r1, g1, b1) - getI(r2, g2, b2),\n    getQ(r1, g1, b1) - getQ(r2, g2, b2)\n  );\n}\n\n// TODO - expects imagedata structs\n// may need a helper func to accept different arguments types\nexport function diffImagePixels(data1, data2, colorDeltaThreshold = DEFAULT_THRESHOLD) {\n  const pixelCount = data1.data.length / 4;\n  const maxDeltaSq = colorDeltaThreshold * colorDeltaThreshold;\n  let badPixels = 0;\n  for (let i = 0; i < pixelCount; i++) {\n    const delta = colorDeltaSq(data1.data, data2.data, i);\n    if (delta > maxDeltaSq) {\n      badPixels++;\n    }\n  }\n  const percentage = 1 - badPixels / pixelCount;\n  return percentage;\n}\n"],"file":"diff-images.js"}