{"version":3,"sources":["../../../src/test-utils/make-spy.js"],"names":["makeSpy","obj","func","methodName","mock","name","wrapFunction","undefined","spy","callCount","called","args","returnValue","apply","Object","assign","reset","restore","returns","method"],"mappings":";;;;;;;AAMO,SAASA,OAAT,CAAiBC,GAAjB,EAAsBC,IAAtB,EAA4B;AACjC,MAAIC,UAAJ;;AAEA,MAAI,CAACF,GAAD,IAAQ,CAACC,IAAb,EAAmB;AACjBA,IAAAA,IAAI,GAAG,SAASE,IAAT,GAAgB,CAAE,CAAzB;;AACAH,IAAAA,GAAG,GAAG,EAAN;AACAE,IAAAA,UAAU,GAAG,KAAb;AACD,GAJD,MAIO,IAAI,OAAOF,GAAP,KAAe,UAAf,IAA6B,CAACC,IAAlC,EAAwC;AAC7CA,IAAAA,IAAI,GAAGD,GAAP;AACAA,IAAAA,GAAG,GAAG,EAAN;AACAE,IAAAA,UAAU,aAAMD,IAAI,CAACG,IAAX,SAAV;AACD,GAJM,MAIA;AACLF,IAAAA,UAAU,GAAGD,IAAb;AACAA,IAAAA,IAAI,GAAGD,GAAG,CAACE,UAAD,CAAV;AACD;;AAED,SAAOG,YAAY,CAACL,GAAD,EAAMC,IAAN,EAAYC,UAAZ,CAAnB;AACD;;AAED,SAASG,YAAT,CAAsBL,GAAtB,EAA2BC,IAA3B,EAAiCC,UAAjC,EAA6C;AAE3C,MAAID,IAAI,CAACA,IAAL,KAAcK,SAAlB,EAA6B;AAC3B,WAAOL,IAAP;AACD;;AAGD,WAASM,GAAT,GAAsB;AACpBA,IAAAA,GAAG,CAACC,SAAJ;AACAD,IAAAA,GAAG,CAACE,MAAJ,GAAa,IAAb;;AAFoB,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAIpB,WAAO,iBAAiBH,GAAjB,GAAuBA,GAAG,CAACI,WAA3B,GAAyCV,IAAI,CAACW,KAAL,CAAW,IAAX,EAAiBF,IAAjB,CAAhD;AACD;;AAGDG,EAAAA,MAAM,CAACC,MAAP,CAAcP,GAAd,EAAmB;AACjBQ,IAAAA,KADiB,mBACT;AACNR,MAAAA,GAAG,CAACC,SAAJ,GAAgB,CAAhB;AACAD,MAAAA,GAAG,CAACE,MAAJ,GAAa,KAAb;AACD,KAJgB;AAMjBO,IAAAA,OANiB,qBAMP;AACRhB,MAAAA,GAAG,CAACE,UAAD,CAAH,GAAkBD,IAAlB;AACD,KARgB;AAUjBgB,IAAAA,OAViB,mBAUTN,WAVS,EAUI;AACnBJ,MAAAA,GAAG,CAACI,WAAJ,GAAkBA,WAAlB;AACD,KAZgB;AAcjBX,IAAAA,GAAG,EAAHA,GAdiB;AAejBE,IAAAA,UAAU,EAAVA,UAfiB;AAgBjBD,IAAAA,IAAI,EAAJA,IAhBiB;AAiBjBiB,IAAAA,MAAM,EAAEjB;AAjBS,GAAnB;AAoBAM,EAAAA,GAAG,CAACQ,KAAJ;AAGAf,EAAAA,GAAG,CAACE,UAAD,CAAH,GAAkBK,GAAlB;AACA,SAAOA,GAAP;AACD","sourcesContent":["// Inspired by https://github.com/popomore/spy\n// Attach a spy to the function. The spy has the following methods and fields\n//  * restore() - remove spy completely\n//  * reset() - reset call count\n//  * callCount - number of calls\n//  * called - whether spy was called\nexport function makeSpy(obj, func) {\n  let methodName;\n\n  if (!obj && !func) {\n    func = function mock() {};\n    obj = {};\n    methodName = 'spy';\n  } else if (typeof obj === 'function' && !func) {\n    func = obj;\n    obj = {};\n    methodName = `${func.name}-spy`;\n  } else {\n    methodName = func;\n    func = obj[methodName];\n  }\n\n  return wrapFunction(obj, func, methodName);\n}\n\nfunction wrapFunction(obj, func, methodName) {\n  // will not wrap more than once\n  if (func.func !== undefined) {\n    return func;\n  }\n\n  // create a local function\n  function spy(...args) {\n    spy.callCount++;\n    spy.called = true;\n    /* eslint-disable no-invalid-this */\n    return 'returnValue' in spy ? spy.returnValue : func.apply(this, args);\n  }\n\n  // Add functions and members\n  Object.assign(spy, {\n    reset() {\n      spy.callCount = 0;\n      spy.called = false;\n    },\n\n    restore() {\n      obj[methodName] = func;\n    },\n\n    returns(returnValue) {\n      spy.returnValue = returnValue;\n    },\n\n    obj,\n    methodName,\n    func,\n    method: func\n  });\n\n  spy.reset();\n\n  // Overwrite the spy on the object\n  obj[methodName] = spy;\n  return spy;\n}\n"],"file":"make-spy.js"}