{"version":3,"sources":["../../../src/bench/bench.js"],"names":["formatSI","rightPad","global","autobind","LocalStorage","assert","noop","TIME_THRESHOLD_MS","TIME_COOLDOWN_MS","MIN_ITERATIONS","LOG_ENTRY","GROUP","TEST","COMPLETE","CALIBRATION_TESTS","id","initFunc","testFunc","opts","Bench","constructor","log","time","delay","minIterations","markdown","probe","logResultsAsMarkdownTable","logResultsAsTree","tests","results","table","Object","seal","calibrate","func1","func2","run","timer","Date","onBenchmarkComplete","promise","runAsyncTests","then","elapsed","logEntry","entry","message","onSuiteComplete","group","add","priority","iterations","itersPerSecond","current","Math","round","percent","max","localStorage","saved","getConfiguration","updateTable","updateConfiguration","console","undefined","delta","runCalibrationTests","Promise","resolve","test","runAsyncTest","silent","setTimeout","runBenchTest","iterationsPerSecond","elapsedMillis","multiplier","runBenchTestIterations","testArgs","context","i","call","COL1","COL2","logResultsAsTreeWithElapsed","toFixed"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\n/* global setTimeout, console */\nimport {formatSI, rightPad} from '../lib/utils/formatters';\nimport {global} from '../lib/utils/globals';\nimport {autobind} from '../lib/utils/autobind';\nimport LocalStorage from '../lib/utils/local-storage';\nimport assert from 'assert';\n\nconst noop = () => {};\n\nconst TIME_THRESHOLD_MS = 80; // Minimum number of milliseconds to iterate each bench test\nconst TIME_COOLDOWN_MS = 5; // milliseconds of \"cooldown\" between tests\nconst MIN_ITERATIONS = 1; // Increase if OK to let slow benchmarks take long time\n\nexport const LOG_ENTRY = {\n  GROUP: 'group',\n  TEST: 'test',\n  COMPLETE: 'complete'\n};\n\nconst CALIBRATION_TESTS = [\n  {\n    id: 'warmup',\n    initFunc: noop,\n    testFunc: () => 100,\n    opts: {}\n  }\n];\n\nexport default class Bench {\n  constructor({\n    id, // Name is needed for regression (storing/loading)\n    log,\n    time = TIME_THRESHOLD_MS,\n    delay = TIME_COOLDOWN_MS,\n    minIterations = MIN_ITERATIONS\n  } = {}) {\n    if (!log) {\n      const markdown = global.probe && global.probe.markdown;\n      log = markdown ? logResultsAsMarkdownTable : logResultsAsTree;\n    }\n\n    this.id = id;\n    this.opts = {log, time, delay, minIterations};\n    this.tests = {};\n    this.results = {};\n    this.table = {};\n    autobind(this);\n    Object.seal(this);\n  }\n\n  calibrate(id, func1, func2, opts) {\n    return this;\n  }\n\n  run() {\n    const timer = new Date();\n\n    const {tests, onBenchmarkComplete} = this;\n    const promise = runAsyncTests({tests, onBenchmarkComplete});\n\n    promise.then(() => {\n      const elapsed = (new Date() - timer) / 1000;\n      logEntry(this, {entry: LOG_ENTRY.COMPLETE, time: elapsed, message: 'Complete'});\n      this.onSuiteComplete();\n    });\n\n    return promise;\n  }\n\n  group(id) {\n    assert(!this.tests[id], 'tests need unique id strings');\n    this.tests[id] = {id, group: true, opts: this.opts};\n    return this;\n  }\n\n  // Signatures:\n  // add(priority, id, initFunc, testFunc)\n  // add(priority, id, testFunc)\n  // add(id, initFunc, testFunc)\n  // add(id, testFunc)\n  add(priority, id, func1, func2) {\n    if (typeof priority === 'string') {\n      func2 = func1;\n      func1 = id;\n      id = priority;\n      priority = 0;\n    }\n\n    assert(id);\n    assert(typeof func1 === 'function');\n\n    let initFunc = null;\n    let testFunc = func1;\n    if (typeof func2 === 'function') {\n      initFunc = func1;\n      testFunc = func2;\n    }\n\n    assert(!this.tests[id], 'tests need unique id strings');\n    this.tests[id] = {id, priority, initFunc, testFunc, opts: this.opts};\n    return this;\n  }\n\n  onBenchmarkComplete({id, time, iterations, itersPerSecond}) {\n    // calculate iterations per second, save as numeric value\n    const current = Math.round(iterations / time);\n    // Format as human readable strings\n    this.table[id] = {\n      percent: '',\n      iterations: `${itersPerSecond}/s`,\n      current,\n      max: ''\n    };\n  }\n\n  onSuiteComplete() {\n    const localStorage = new LocalStorage({id: this.id});\n    const saved = localStorage.getConfiguration();\n    const current = this.updateTable(this.table, saved);\n    localStorage.updateConfiguration(current);\n    console.table(current);\n  }\n\n  updateTable(current, saved) {\n    for (const id in this.table) {\n      if (saved[id] && saved[id].max !== undefined) {\n        current[id].max = Math.max(current[id].current, saved[id].max);\n        const delta = current[id].current / saved[id].max;\n        current[id].percent = `${Math.round(delta * 100 - 100)}%`;\n      } else {\n        current[id].max = current[id].current;\n      }\n    }\n    return current;\n  }\n}\n\n// Helper methods\n\nfunction runCalibrationTests({tests}) {\n  let promise = Promise.resolve(true);\n\n  // Run default warm up and calibration tests\n  for (const test of CALIBRATION_TESTS) {\n    promise = promise.then(() => runAsyncTest({test, silent: true}));\n  }\n\n  return promise;\n}\n\n// Run a list of bench test case async\nfunction runAsyncTests({tests, onBenchmarkComplete = noop}) {\n  // Run default warm up and calibration tests\n  let promise = runCalibrationTests({tests, onBenchmarkComplete});\n\n  // Run the suite tests\n  for (const id in tests) {\n    const test = tests[id];\n    promise = promise.then(() => runAsyncTest({test, onBenchmarkComplete}));\n  }\n  return promise;\n}\n\nfunction runAsyncTest({test, onBenchmarkComplete, silent = false}) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      try {\n        if (test.group) {\n          logEntry(test, {entry: LOG_ENTRY.GROUP, id: test.id, message: test.id});\n        } else {\n          const {time, iterations} = runBenchTest(test);\n\n          const iterationsPerSecond = iterations / time;\n          const itersPerSecond = formatSI(iterationsPerSecond);\n          if (!silent) {\n            logEntry(test, {\n              entry: LOG_ENTRY.TEST, id: test.id, priority: test.priority, itersPerSecond, time,\n              message: `${test.id} ${itersPerSecond}/s`\n            });\n          }\n\n          if (onBenchmarkComplete) {\n            onBenchmarkComplete({\n              id: test.id,\n              time,\n              iterations,\n              iterationsPerSecond,\n              itersPerSecond\n            });\n          }\n        }\n      } finally {\n        resolve(true);\n      }\n    }, test.opts.delay); // small delay between each test. System cools and DOM console updates...\n  });\n}\n\n// Run a test func for an increasing amount of iterations until time threshold exceeded\nfunction runBenchTest(test) {\n  let iterations = test.opts.minIterations / 10;\n  let elapsedMillis = 0;\n\n  // Run increasing amount of interations until we reach time threshold, default at least 100ms\n  while (elapsedMillis < test.opts.time) {\n    let multiplier = 10;\n    if (elapsedMillis > 10) {\n      multiplier = (test.opts.time / elapsedMillis) * 1.25;\n    }\n    iterations *= multiplier;\n    const timer = new Date();\n    runBenchTestIterations(test, iterations);\n    elapsedMillis = new Date() - timer;\n  }\n\n  const time = elapsedMillis / 1000;\n\n  return {time, iterations};\n}\n\n// Run a test func for a specific amount of iterations\nfunction runBenchTestIterations(test, iterations) {\n  const testArgs = test.initFunc && test.initFunc();\n\n  const {context, testFunc} = test;\n  if (context && testArgs) {\n    for (let i = 0; i < iterations; i++) {\n      testFunc.call(context, testArgs);\n    }\n  } else {\n    for (let i = 0; i < iterations; i++) {\n      testFunc.call(context);\n    }\n  }\n}\n\nfunction logEntry(test, opts) {\n  const priority = (global.probe && global.probe.priority) | 10;\n  if ((opts.priority | 0) <= priority) {\n    test.opts.log(opts);\n  }\n}\n\nexport function logResultsAsMarkdownTable({entry, id, itersPerSecond, time}) {\n  const COL1 = 50;\n  const COL2 = 12;\n  switch (entry) {\n  case LOG_ENTRY.GROUP:\n    console.log('');\n    console.log(`| ${rightPad(id, COL1)} | iterations/s |`);\n    console.log(`| ${rightPad('---', COL1)} | ---          |`);\n    break;\n  case LOG_ENTRY.TEST:\n    console.log(`| ${rightPad(id, COL1)} | ${rightPad(itersPerSecond, COL2)} |`);\n    break;\n  case LOG_ENTRY.COMPLETE:\n    console.log('');\n    console.log(`Completed benchmark in ${time}s`);\n    break;\n  default:\n  }\n}\n\nexport function logResultsAsTree({entry, id, itersPerSecond, time}) {\n  switch (entry) {\n  case LOG_ENTRY.GROUP:\n    console.log('');\n    console.log(`${id}`);\n    break;\n  case LOG_ENTRY.TEST:\n    console.log(`├─ ${id}: ${itersPerSecond} iterations/s`);\n    break;\n  case LOG_ENTRY.COMPLETE:\n    console.log('');\n    console.log(`Completed benchmark in ${time}s`);\n    break;\n  default:\n  }\n}\n\nexport function logResultsAsTreeWithElapsed({entry, id, itersPerSecond, time}) {\n  switch (entry) {\n  case LOG_ENTRY.TEST:\n    console.log(`├─ ${id}: ${itersPerSecond} iterations/s (${time.toFixed(2)}s elapsed)`);\n    break;\n  default:\n    logResultsAsTree({entry, id, itersPerSecond, time});\n  }\n}\n\n"],"file":"bench.js"}