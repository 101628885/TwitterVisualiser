import { VERSION } from './utils/globals';
import LocalStorage from './utils/local-storage';
import { getTimestamp } from './utils/timestamp';
import { formatImage, formatTime, leftPad } from './utils/formatters';
import { addColor } from './utils/color';
import { autobind } from './utils/autobind';
import { isBrowser } from './utils/globals';
import assert from '../lib/utils/assert';
const originalConsole = {
  debug: isBrowser ? console.debug || console.log : console.log,
  log: console.log,
  info: console.info,
  warn: console.warn,
  error: console.error
};
const DEFAULT_SETTINGS = {
  enabled: false,
  priority: 0
};

function noop() {}

const cache = {};

function getTableHeader(table) {
  for (const key in table) {
    for (const title in table[key]) {
      return title || 'untitled';
    }
  }

  return 'empty';
}

export default class Log {
  constructor({
    id
  } = {}) {
    this.id = id;
    this.VERSION = VERSION;
    this._startTs = getTimestamp();
    this._deltaTs = getTimestamp();
    this.LOG_THROTTLE_TIMEOUT = 0;
    this._storage = new LocalStorage(`__probe-${this.id}__`, DEFAULT_SETTINGS);
    this.userData = {};
    this.timeStamp(`${this.id} started`);
    autobind(this);
    Object.seal(this);
  }

  set priority(newPriority) {
    this._storage.updateConfiguration({
      priority: newPriority
    });

    return this;
  }

  get priority() {
    return this._storage.config.priority;
  }

  isEnabled() {
    return this._storage.config.enabled;
  }

  getPriority() {
    return this._storage.config.priority;
  }

  getLevel() {
    return this._storage.config.priority;
  }

  getTotal() {
    return Number((getTimestamp() - this._startTs).toPrecision(10));
  }

  getDelta() {
    return Number((getTimestamp() - this._deltaTs).toPrecision(10));
  }

  enable(enabled = true) {
    this._storage.updateConfiguration({
      enabled
    });

    return this;
  }

  setLevel(level) {
    this._storage.updateConfiguration({
      priority: level
    });

    return this;
  }

  warn(message, ...args) {
    return this._getLogFunction({
      message,
      args,
      method: originalConsole.warn,
      once: true
    });
  }

  error(message, ...args) {
    return this._getLogFunction({
      message,
      args,
      method: originalConsole.error
    });
  }

  deprecated(oldUsage, newUsage) {
    return this.warn(`\`${oldUsage}\` is deprecated and will be removed \
in a later version. Use \`${newUsage}\` instead`);
  }

  removed(oldUsage, newUsage) {
    return this.error(`\`${oldUsage}\` has been removed. Use \`${newUsage}\` instead`);
  }

  probe(priority, message, ...args) {
    return this._getLogFunction({
      priority,
      message,
      args,
      method: originalConsole.log,
      time: true,
      once: true
    });
  }

  log(priority, message, ...args) {
    return this._getLogFunction({
      priority,
      message,
      args,
      method: originalConsole.debug
    });
  }

  info(priority, message, ...args) {
    return this._getLogFunction({
      priority,
      message,
      args,
      method: console.info
    });
  }

  once(priority, message, ...args) {
    return this._getLogFunction({
      priority,
      message,
      args,
      method: originalConsole.debug || originalConsole.info,
      once: true
    });
  }

  table(priority, table, columns) {
    if (table) {
      const tag = getTableHeader(table);
      return this._getLogFunction({
        priority,
        message: table,
        args: columns && [columns],
        tag,
        method: console.table || noop
      });
    }

    return noop;
  }

  image({
    priority,
    image,
    message = '',
    scale = 1
  }) {
    if (priority > this.getPriority()) {
      return noop;
    }

    return isBrowser ? this._logImageInBrowser({
      image,
      message,
      scale
    }) : this._logImageInNode({
      image,
      message,
      scale
    });
  }

  _logImageInNode({
    image,
    message = '',
    scale = 1
  }) {
    let asciify = null;

    try {
      asciify = module.require('asciify-image');
    } catch (error) {}

    if (asciify) {
      return () => asciify(image, {
        fit: 'box',
        width: `${Math.round(80 * scale)}%`
      }).then(data => console.log(data));
    }

    return noop;
  }

  _logImageInBrowser({
    image,
    message = '',
    scale = 1
  }) {
    if (typeof image === 'string') {
      const img = new Image();

      img.onload = () => {
        const args = formatImage(img, message, scale);
        console.log(...args);
      };

      img.src = image;
      return noop;
    }

    const element = image.nodeName || '';

    if (element.toLowerCase() === 'img') {
      console.log(...formatImage(image, message, scale));
      return noop;
    }

    if (element.toLowerCase() === 'canvas') {
      const img = new Image();

      img.onload = () => console.log(...formatImage(img, message, scale));

      img.src = image.toDataURL();
      return noop;
    }

    return noop;
  }

  time(priority, message) {
    return this._getLogFunction({
      priority,
      message,
      method: console.time ? console.time : console.info
    });
  }

  timeEnd(priority, message) {
    return this._getLogFunction({
      priority,
      message,
      method: console.timeEnd ? console.timeEnd : console.info
    });
  }

  timeStamp(priority, message) {
    return this._getLogFunction({
      priority,
      message,
      method: console.timeStamp || noop
    });
  }

  group(priority, message, opts = {
    collapsed: false
  }) {
    opts = this._normalizeArguments({
      priority,
      message,
      opts
    });
    const _opts = opts,
          collapsed = _opts.collapsed;
    return this._getLogFunction({
      priority,
      message,
      opts,
      method: (collapsed ? console.groupCollapsed : console.group) || console.info
    });
  }

  groupCollapsed(priority, message, opts = {}) {
    return this.group(priority, message, Object.assign({}, opts, {
      collapsed: true
    }));
  }

  groupEnd(priority) {
    return this._getLogFunction({
      priority,
      message: '',
      method: console.groupEnd || noop
    });
  }

  withGroup(priority, message, func) {
    const opts = this._normalizeArguments({
      priority,
      message
    });

    this.group(opts);

    try {
      func();
    } finally {
      this.groupEnd(opts.message);
    }
  }

  trace() {
    if (console.trace) {
      console.trace();
    }
  }

  _shouldLog(priority) {
    priority = this._normalizePriority(priority);
    return priority === 0 || this.isEnabled() && this.getPriority() >= priority;
  }

  _getElapsedTime() {
    const total = this.getTotal();
    const delta = this.getDelta();
    this._deltaTs = getTimestamp();
    return {
      total,
      delta
    };
  }

  _getLogFunction(opts) {
    if (this._shouldLog(opts.priority)) {
      const _opts2 = opts,
            method = _opts2.method;
      opts = this._parseArguments(opts);
      assert(method);
      let _opts3 = opts,
          message = _opts3.message;
      const tag = opts.tag || opts.message;

      if (opts.once) {
        if (!cache[tag]) {
          cache[tag] = getTimestamp();
        } else {
          return noop;
        }
      }

      message = this._decorateMessage(message, opts);
      return method.bind(console, message, ...opts.args);
    }

    return noop;
  }

  _parseArguments(options) {
    const normOpts = this._normalizeArguments(options);

    const _this$_getElapsedTime = this._getElapsedTime(),
          delta = _this$_getElapsedTime.delta,
          total = _this$_getElapsedTime.total;

    return Object.assign(options, normOpts, {
      delta,
      total
    });
  }

  _normalizePriority(priority) {
    let resolvedPriority;

    switch (typeof priority) {
      case 'number':
        resolvedPriority = priority;
        break;

      case 'object':
        resolvedPriority = priority.priority || 0;
        break;

      default:
        resolvedPriority = 0;
    }

    assert(Number.isFinite(resolvedPriority) && resolvedPriority >= 0);
    return resolvedPriority;
  }

  _normalizeArguments({
    priority,
    message,
    args = [],
    opts
  }) {
    const newOpts = {
      priority: this._normalizePriority(priority),
      message,
      args
    };

    switch (typeof priority) {
      case 'string':
      case 'function':
        if (message !== undefined) {
          args.unshift(message);
        }

        Object.assign(newOpts, {
          message: priority
        });
        break;

      case 'object':
        Object.assign(newOpts, priority);
        break;

      default:
    }

    if (typeof newOpts.message === 'function') {
      newOpts.message = this._shouldLog(newOpts.priority) ? newOpts.message() : '';
    }

    assert(typeof newOpts.message === 'string' || typeof newOpts.message === 'object');
    return Object.assign(newOpts, opts);
  }

  _decorateMessage(message, opts) {
    if (typeof message === 'string') {
      let time = '';

      if (opts.time) {
        const _this$_getElapsedTime2 = this._getElapsedTime(),
              total = _this$_getElapsedTime2.total;

        time = leftPad(formatTime(total));
      }

      message = opts.time ? `${this.id}: ${time}  ${message}` : `${this.id}: ${message}`;
      message = addColor(message, opts.color, opts.background);
    }

    return message;
  }

}
Log.VERSION = VERSION;
//# sourceMappingURL=log.js.map