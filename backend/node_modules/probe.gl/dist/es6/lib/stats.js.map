{"version":3,"sources":["../../../src/lib/stats.js"],"names":["getTimestamp","formatTime","Stats","constructor","id","time","counters","Object","seal","addCounter","name","_getCounter","bump","counter","call","count","increment","addTimer","timer","addTime","timeStart","subname","_startTime","timeEnd","reset","key","hasTimeElapsed","deltaTime","getStats","stats","title","total","fps","Math","round","totalTime","avgTime","getStatsTable","getStatNames","keys","get","getCount","getFPS","getTimeString","oneSecondPassed","unit","averageTime","_incrementTimer"],"mappings":"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","sourcesContent":["import {getTimestamp} from './utils/timestamp';\nimport {formatTime} from './utils/formatters';\n\n// const MAX_FPS = 70;\n\nexport default class Stats {\n\n  constructor({id}) {\n    this.id = id;\n    this.time = getTimestamp();\n    this.counters = {};\n    Object.seal(this);\n  }\n\n  // Initialize a new counter\n  addCounter(name) {\n    this._getCounter(name);\n    return this;\n  }\n\n  // Call to bump a counter (+1)\n  bump(name) {\n    const counter = this._getCounter(name);\n    counter.call++;\n    counter.count++;\n    return this;\n  }\n\n  // Call to bump a counter\n  increment(name, count) {\n    const counter = this._getCounter(name);\n    counter.call++;\n    counter.count += count;\n    return this;\n  }\n\n  addTimer(name) {\n    const timer = this._getCounter(name);\n    timer.time = 0;\n    return this;\n  }\n\n  addTime(name, time) {\n    const timer = this._getCounter(name);\n    timer.time += time;\n    timer.count++;\n    return this;\n  }\n\n  timeStart(name, subname) {\n    const timer = this._getCounter(name);\n    timer._startTime = getTimestamp();\n  }\n\n  timeEnd(name, subname) {\n    const timer = this._getCounter(name);\n    this.addTime(name, getTimestamp() - timer._startTime);\n  }\n\n  // Reset all timers\n  reset() {\n    this.time = getTimestamp();\n    for (const key in this.counters) {\n      const counter = this.counters[key];\n      counter.count = 0;\n      counter.time = 0;\n    }\n    return this;\n  }\n\n  // ACCESSORS\n\n  hasTimeElapsed(deltaTime = 1000) {\n    return (getTimestamp() - this.time) > 1000;\n  }\n\n  getStats() {\n    const deltaTime = (getTimestamp() - this.time) / 1000;\n    const stats = {};\n    for (const key in this.counters) {\n      const counter = this.counters[key];\n      stats[counter.title] = {\n        total: counter.count,\n        fps: Math.round(counter.count / deltaTime)\n      };\n      if (counter.time) {\n        stats[counter.title].totalTime = formatTime(counter.time);\n        stats[counter.title].avgTime = formatTime(counter.time / counter.count);\n      }\n    }\n    return stats;\n  }\n\n  // Return stats in a \"table format\" suitable for console.table() or Log.table()\n  getStatsTable() {\n    const stats = this.getStats();\n    for (const key in stats) {\n      if (stats[key].total === 0) {\n        delete stats[key];\n      }\n    }\n    return stats;\n  }\n\n  // Returns the names of all registered stats, enables iteration\n  getStatNames() {\n    return Object.keys(this.counters);\n  }\n\n  get(name) {\n    const counter = this._getCounter(name);\n    return counter.count;\n  }\n\n  getCount(name) {\n    const counter = this._getCounter(name);\n    return counter.count;\n  }\n\n  getFPS(name) {\n    const counter = this._getCounter(name);\n    const deltaTime = (getTimestamp() - this.time) / 1000;\n    return Math.round(counter.count / deltaTime);\n  }\n\n  // DEPRECATED METHODS\n\n  getTimeString() {\n    return `${this.id}:${formatTime(this.time)}(${this.count})`;\n  }\n\n  oneSecondPassed(deltaTime = 1000) {\n    return this.hasTimeElapsed(deltaTime);\n  }\n\n  // PRIVATE METHODS\n\n  _getCounter(name) {\n    let counter = this.counters[name];\n    if (!counter) {\n      counter = {\n        title: name,\n        unit: '',\n        timer: false,\n        count: 0,\n        time: 0,\n        totalTime: 0,\n        averageTime: 0\n      };\n      this.counters[name] = counter;\n    }\n    return counter;\n  }\n\n  _incrementTimer(counter, time, count) {\n    counter.count += count;\n    counter.totalTime += time;\n    counter.averageTime = counter.totalTime / count;\n  }\n}\n"],"file":"stats.js"}