{"version":3,"sources":["../../../src/stats-widgets/stats-widget.js"],"names":["TEXT_SIZE","TEXT_START","TEXT_SPACING","HEADER_SIZE","BOTTOM_SPACING","HEADER_POS","BG","FG","WIDTH","HEIGHT","items","length","StatsWidget","constructor","prevGpuTimes","i","totalTime","N","totalFrameTime","frameTimeCount","avgFrameTime","update","deltaTime","_clearTextArea","drawCalls","drawCall","frameTime","stats","gpuTime","_createDOM","pr","Math","round","window","devicePixelRatio","container","document","createElement","style","cssText","canvas","context","getContext","width","height","fillStyle","fillRect","appendChild","body","_drawHeader","font","textBaseline","fillText","_drawTextItem","title","value","textCursor","str"],"mappings":"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","sourcesContent":["// Built on https://github.com/Erkaman/regl-stats-widget (MIT license)\n\n// widget styling constants.\nconst TEXT_SIZE = 10;\nconst TEXT_START = [7, 37];\nconst TEXT_SPACING = 6;\nconst HEADER_SIZE = 20;\nconst BOTTOM_SPACING = 20\nconst HEADER_POS = [3, 3];\nconst BG = '#000';\nconst FG = '#ccc';\n\nconst WIDTH = 160;\nconst HEIGHT = items =>\n  items.length * TEXT_SIZE +\n  (items.length - 1) * TEXT_SPACING +\n  TEXT_START[1] +\n  BOTTOM_SPACING;\n\n\nclass StatsWidget {\n\n  constructor(items) {\n    // the widget keeps track of the previous values of gpuTime,\n    // in order to compute the frame time.\n    const prevGpuTimes = []\n    for (let i = 0; i < items.length; i++) {\n      prevGpuTimes[i] = 0\n    }\n\n    // we update the widget every second, we need to keep track of the time:\n    const totalTime = 1.1\n\n    // we show the average frametime to the user.\n    const N = 50\n    const totalFrameTime = []\n    const frameTimeCount = 0\n    const avgFrameTime = []\n    for (i = 0; i < items.length; ++i) {\n      totalFrameTime[i] = 0.0\n      avgFrameTime[i] = 0.0\n    }\n  }\n\n  update(deltaTime) {\n    totalTime += deltaTime\n    if (totalTime > 1.0) {\n      totalTime = 0\n\n\n      // make sure that we clear the old text before drawing new text.\n      _clearTextArea();\n\n      // const frameTime;\n      // for (let i = 0; i < drawCalls.length; i++) {\n      //   const drawCall = drawCalls[i];\n\n      //   this._drawTextItem(context, i, drawCalls[i], avgFrameTime[i]);\n    }\n\n    frameTimeCount++\n    // make sure to update the previous gpuTime, and to compute the average.\n    for (i = 0; i < drawCalls.length; i++) {\n      drawCall = drawCalls[i];\n\n      frameTime = drawCall[0].stats.gpuTime - prevGpuTimes[i];\n      totalFrameTime[i] += frameTime;\n\n      if (frameTimeCount === N) {\n        avgFrameTime[i] = totalFrameTime[i] / N;\n        totalFrameTime[i] = 0.0;\n      }\n\n      prevGpuTimes[i] = drawCall[0].stats.gpuTime;\n    }\n\n    // reset avg calculation.\n    if (frameTimeCount === N) {\n      frameTimeCount = 0;\n    }\n  }\n\n  _createDOM() {\n    const pr = Math.round(window.devicePixelRatio || 1);\n\n    // the widget is contained in a <div>\n    const container = document.createElement('div');\n    container.style.cssText = 'position:fixed;top:20px;left:20px;opacity:0.8;z-index:10000;';\n\n    // we draw the widget on a canvas.\n    const canvas = document.createElement('canvas');\n\n    const context = canvas.getContext('2d');\n\n    // set canvas size\n    canvas.width = WIDTH * pr;\n    canvas.height = HEIGHT * pr;\n    canvas.style.cssText = `width: ${WIDTH}px;height: ${HEIGHT}px`;\n\n    // draw background.\n    context.fillStyle = BG;\n    context.fillRect(0, 0, WIDTH * pr, HEIGHT * pr);\n\n    container.appendChild(canvas);\n    document.body.appendChild(container);\n\n    this.context = context;\n  }\n\n  _drawHeader(context) {\n    const pr = Math.round(window.devicePixelRatio || 1);\n    context.font = `bold ${HEADER_SIZE * pr}px Helvetica,Arial,sans-serif`;\n    context.textBaseline = 'top';\n    context.fillStyle = FG;\n    context.fillText('Stats', HEADER_POS[0] * pr, HEADER_POS[1] * pr);\n  }\n\n  _clearTextArea(context) {\n    const pr = Math.round(window.devicePixelRatio || 1);\n    context.fillStyle = BG;\n    context.fillRect(\n      TEXT_START[0] * pr,\n      TEXT_START[1] * pr,\n      (WIDTH - TEXT_START[0]) * pr,\n      (HEIGHT - TEXT_START[1]) * pr\n    );\n    context.font = `bold ${TEXT_SIZE * pr}px Helvetica,Arial,sans-serif`;\n    context.fillStyle = FG;\n  }\n\n  _drawTextItem(context, i, title, value) {\n    const pr = Math.round(window.devicePixelRatio || 1);\n    // context, i, drawCalls[i], avgFrameTime[i]);\n    const textCursor = [TEXT_START[0], TEXT_START[1]];\n    const str = `${drawCall[1]} : ${Math.round(100.0 * avgFrameTime[i]) / 100.0}ms`\n    context.fillText(str, textCursor[0] * pr, textCursor[1] * pr)\n\n    // next line\n    textCursor[1] += TEXT_SIZE + TEXT_SPACING\n  }\n}\n"],"file":"stats-widget.js"}