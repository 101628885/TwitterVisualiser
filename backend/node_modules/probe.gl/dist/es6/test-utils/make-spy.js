export function makeSpy(obj, func) {
  let methodName;

  if (!obj && !func) {
    func = function mock() {};

    obj = {};
    methodName = 'spy';
  } else if (typeof obj === 'function' && !func) {
    func = obj;
    obj = {};
    methodName = `${func.name}-spy`;
  } else {
    methodName = func;
    func = obj[methodName];
  }

  return wrapFunction(obj, func, methodName);
}

function wrapFunction(obj, func, methodName) {
  if (func.func !== undefined) {
    return func;
  }

  function spy(...args) {
    spy.callCount++;
    spy.called = true;
    return 'returnValue' in spy ? spy.returnValue : func.apply(this, args);
  }

  Object.assign(spy, {
    reset() {
      spy.callCount = 0;
      spy.called = false;
    },

    restore() {
      obj[methodName] = func;
    },

    returns(returnValue) {
      spy.returnValue = returnValue;
    },

    obj,
    methodName,
    func,
    method: func
  });
  spy.reset();
  obj[methodName] = spy;
  return spy;
}
//# sourceMappingURL=make-spy.js.map