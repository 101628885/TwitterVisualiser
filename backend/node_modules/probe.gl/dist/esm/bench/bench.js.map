{"version":3,"sources":["../../../src/bench/bench.js"],"names":["formatSI","rightPad","global","autobind","LocalStorage","assert","noop","TIME_THRESHOLD_MS","TIME_COOLDOWN_MS","MIN_ITERATIONS","LOG_ENTRY","GROUP","TEST","COMPLETE","CALIBRATION_TESTS","id","initFunc","testFunc","opts","Bench","log","time","delay","minIterations","markdown","probe","logResultsAsMarkdownTable","logResultsAsTree","tests","results","table","Object","seal","func1","func2","timer","Date","onBenchmarkComplete","promise","runAsyncTests","then","elapsed","logEntry","entry","message","onSuiteComplete","group","priority","iterations","itersPerSecond","current","Math","round","percent","max","localStorage","saved","getConfiguration","updateTable","updateConfiguration","console","undefined","delta","runCalibrationTests","Promise","resolve","test","runAsyncTest","silent","setTimeout","runBenchTest","iterationsPerSecond","elapsedMillis","multiplier","runBenchTestIterations","testArgs","context","i","call","COL1","COL2","logResultsAsTreeWithElapsed","toFixed"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\n/* global setTimeout, console */\nimport {formatSI, rightPad} from '../lib/utils/formatters';\nimport {global} from '../lib/utils/globals';\nimport {autobind} from '../lib/utils/autobind';\nimport LocalStorage from '../lib/utils/local-storage';\nimport assert from 'assert';\n\nconst noop = () => {};\n\nconst TIME_THRESHOLD_MS = 80; // Minimum number of milliseconds to iterate each bench test\nconst TIME_COOLDOWN_MS = 5; // milliseconds of \"cooldown\" between tests\nconst MIN_ITERATIONS = 1; // Increase if OK to let slow benchmarks take long time\n\nexport const LOG_ENTRY = {\n  GROUP: 'group',\n  TEST: 'test',\n  COMPLETE: 'complete'\n};\n\nconst CALIBRATION_TESTS = [\n  {\n    id: 'warmup',\n    initFunc: noop,\n    testFunc: () => 100,\n    opts: {}\n  }\n];\n\nexport default class Bench {\n  constructor({\n    id, // Name is needed for regression (storing/loading)\n    log,\n    time = TIME_THRESHOLD_MS,\n    delay = TIME_COOLDOWN_MS,\n    minIterations = MIN_ITERATIONS\n  } = {}) {\n    if (!log) {\n      const markdown = global.probe && global.probe.markdown;\n      log = markdown ? logResultsAsMarkdownTable : logResultsAsTree;\n    }\n\n    this.id = id;\n    this.opts = {log, time, delay, minIterations};\n    this.tests = {};\n    this.results = {};\n    this.table = {};\n    autobind(this);\n    Object.seal(this);\n  }\n\n  calibrate(id, func1, func2, opts) {\n    return this;\n  }\n\n  run() {\n    const timer = new Date();\n\n    const {tests, onBenchmarkComplete} = this;\n    const promise = runAsyncTests({tests, onBenchmarkComplete});\n\n    promise.then(() => {\n      const elapsed = (new Date() - timer) / 1000;\n      logEntry(this, {entry: LOG_ENTRY.COMPLETE, time: elapsed, message: 'Complete'});\n      this.onSuiteComplete();\n    });\n\n    return promise;\n  }\n\n  group(id) {\n    assert(!this.tests[id], 'tests need unique id strings');\n    this.tests[id] = {id, group: true, opts: this.opts};\n    return this;\n  }\n\n  // Signatures:\n  // add(priority, id, initFunc, testFunc)\n  // add(priority, id, testFunc)\n  // add(id, initFunc, testFunc)\n  // add(id, testFunc)\n  add(priority, id, func1, func2) {\n    if (typeof priority === 'string') {\n      func2 = func1;\n      func1 = id;\n      id = priority;\n      priority = 0;\n    }\n\n    assert(id);\n    assert(typeof func1 === 'function');\n\n    let initFunc = null;\n    let testFunc = func1;\n    if (typeof func2 === 'function') {\n      initFunc = func1;\n      testFunc = func2;\n    }\n\n    assert(!this.tests[id], 'tests need unique id strings');\n    this.tests[id] = {id, priority, initFunc, testFunc, opts: this.opts};\n    return this;\n  }\n\n  onBenchmarkComplete({id, time, iterations, itersPerSecond}) {\n    // calculate iterations per second, save as numeric value\n    const current = Math.round(iterations / time);\n    // Format as human readable strings\n    this.table[id] = {\n      percent: '',\n      iterations: `${itersPerSecond}/s`,\n      current,\n      max: ''\n    };\n  }\n\n  onSuiteComplete() {\n    const localStorage = new LocalStorage({id: this.id});\n    const saved = localStorage.getConfiguration();\n    const current = this.updateTable(this.table, saved);\n    localStorage.updateConfiguration(current);\n    console.table(current);\n  }\n\n  updateTable(current, saved) {\n    for (const id in this.table) {\n      if (saved[id] && saved[id].max !== undefined) {\n        current[id].max = Math.max(current[id].current, saved[id].max);\n        const delta = current[id].current / saved[id].max;\n        current[id].percent = `${Math.round(delta * 100 - 100)}%`;\n      } else {\n        current[id].max = current[id].current;\n      }\n    }\n    return current;\n  }\n}\n\n// Helper methods\n\nfunction runCalibrationTests({tests}) {\n  let promise = Promise.resolve(true);\n\n  // Run default warm up and calibration tests\n  for (const test of CALIBRATION_TESTS) {\n    promise = promise.then(() => runAsyncTest({test, silent: true}));\n  }\n\n  return promise;\n}\n\n// Run a list of bench test case async\nfunction runAsyncTests({tests, onBenchmarkComplete = noop}) {\n  // Run default warm up and calibration tests\n  let promise = runCalibrationTests({tests, onBenchmarkComplete});\n\n  // Run the suite tests\n  for (const id in tests) {\n    const test = tests[id];\n    promise = promise.then(() => runAsyncTest({test, onBenchmarkComplete}));\n  }\n  return promise;\n}\n\nfunction runAsyncTest({test, onBenchmarkComplete, silent = false}) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      try {\n        if (test.group) {\n          logEntry(test, {entry: LOG_ENTRY.GROUP, id: test.id, message: test.id});\n        } else {\n          const {time, iterations} = runBenchTest(test);\n\n          const iterationsPerSecond = iterations / time;\n          const itersPerSecond = formatSI(iterationsPerSecond);\n          if (!silent) {\n            logEntry(test, {\n              entry: LOG_ENTRY.TEST, id: test.id, priority: test.priority, itersPerSecond, time,\n              message: `${test.id} ${itersPerSecond}/s`\n            });\n          }\n\n          if (onBenchmarkComplete) {\n            onBenchmarkComplete({\n              id: test.id,\n              time,\n              iterations,\n              iterationsPerSecond,\n              itersPerSecond\n            });\n          }\n        }\n      } finally {\n        resolve(true);\n      }\n    }, test.opts.delay); // small delay between each test. System cools and DOM console updates...\n  });\n}\n\n// Run a test func for an increasing amount of iterations until time threshold exceeded\nfunction runBenchTest(test) {\n  let iterations = test.opts.minIterations / 10;\n  let elapsedMillis = 0;\n\n  // Run increasing amount of interations until we reach time threshold, default at least 100ms\n  while (elapsedMillis < test.opts.time) {\n    let multiplier = 10;\n    if (elapsedMillis > 10) {\n      multiplier = (test.opts.time / elapsedMillis) * 1.25;\n    }\n    iterations *= multiplier;\n    const timer = new Date();\n    runBenchTestIterations(test, iterations);\n    elapsedMillis = new Date() - timer;\n  }\n\n  const time = elapsedMillis / 1000;\n\n  return {time, iterations};\n}\n\n// Run a test func for a specific amount of iterations\nfunction runBenchTestIterations(test, iterations) {\n  const testArgs = test.initFunc && test.initFunc();\n\n  const {context, testFunc} = test;\n  if (context && testArgs) {\n    for (let i = 0; i < iterations; i++) {\n      testFunc.call(context, testArgs);\n    }\n  } else {\n    for (let i = 0; i < iterations; i++) {\n      testFunc.call(context);\n    }\n  }\n}\n\nfunction logEntry(test, opts) {\n  const priority = (global.probe && global.probe.priority) | 10;\n  if ((opts.priority | 0) <= priority) {\n    test.opts.log(opts);\n  }\n}\n\nexport function logResultsAsMarkdownTable({entry, id, itersPerSecond, time}) {\n  const COL1 = 50;\n  const COL2 = 12;\n  switch (entry) {\n  case LOG_ENTRY.GROUP:\n    console.log('');\n    console.log(`| ${rightPad(id, COL1)} | iterations/s |`);\n    console.log(`| ${rightPad('---', COL1)} | ---          |`);\n    break;\n  case LOG_ENTRY.TEST:\n    console.log(`| ${rightPad(id, COL1)} | ${rightPad(itersPerSecond, COL2)} |`);\n    break;\n  case LOG_ENTRY.COMPLETE:\n    console.log('');\n    console.log(`Completed benchmark in ${time}s`);\n    break;\n  default:\n  }\n}\n\nexport function logResultsAsTree({entry, id, itersPerSecond, time}) {\n  switch (entry) {\n  case LOG_ENTRY.GROUP:\n    console.log('');\n    console.log(`${id}`);\n    break;\n  case LOG_ENTRY.TEST:\n    console.log(`├─ ${id}: ${itersPerSecond} iterations/s`);\n    break;\n  case LOG_ENTRY.COMPLETE:\n    console.log('');\n    console.log(`Completed benchmark in ${time}s`);\n    break;\n  default:\n  }\n}\n\nexport function logResultsAsTreeWithElapsed({entry, id, itersPerSecond, time}) {\n  switch (entry) {\n  case LOG_ENTRY.TEST:\n    console.log(`├─ ${id}: ${itersPerSecond} iterations/s (${time.toFixed(2)}s elapsed)`);\n    break;\n  default:\n    logResultsAsTree({entry, id, itersPerSecond, time});\n  }\n}\n\n"],"file":"bench.js"}