{"version":3,"sources":["../../../src/lib/stats.js"],"names":["getTimestamp","formatTime","Stats","id","time","counters","Object","seal","name","_getCounter","counter","call","count","timer","subname","_startTime","addTime","key","deltaTime","stats","title","total","fps","Math","round","totalTime","avgTime","getStats","keys","hasTimeElapsed","unit","averageTime"],"mappings":"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","sourcesContent":["import {getTimestamp} from './utils/timestamp';\nimport {formatTime} from './utils/formatters';\n\n// const MAX_FPS = 70;\n\nexport default class Stats {\n\n  constructor({id}) {\n    this.id = id;\n    this.time = getTimestamp();\n    this.counters = {};\n    Object.seal(this);\n  }\n\n  // Initialize a new counter\n  addCounter(name) {\n    this._getCounter(name);\n    return this;\n  }\n\n  // Call to bump a counter (+1)\n  bump(name) {\n    const counter = this._getCounter(name);\n    counter.call++;\n    counter.count++;\n    return this;\n  }\n\n  // Call to bump a counter\n  increment(name, count) {\n    const counter = this._getCounter(name);\n    counter.call++;\n    counter.count += count;\n    return this;\n  }\n\n  addTimer(name) {\n    const timer = this._getCounter(name);\n    timer.time = 0;\n    return this;\n  }\n\n  addTime(name, time) {\n    const timer = this._getCounter(name);\n    timer.time += time;\n    timer.count++;\n    return this;\n  }\n\n  timeStart(name, subname) {\n    const timer = this._getCounter(name);\n    timer._startTime = getTimestamp();\n  }\n\n  timeEnd(name, subname) {\n    const timer = this._getCounter(name);\n    this.addTime(name, getTimestamp() - timer._startTime);\n  }\n\n  // Reset all timers\n  reset() {\n    this.time = getTimestamp();\n    for (const key in this.counters) {\n      const counter = this.counters[key];\n      counter.count = 0;\n      counter.time = 0;\n    }\n    return this;\n  }\n\n  // ACCESSORS\n\n  hasTimeElapsed(deltaTime = 1000) {\n    return (getTimestamp() - this.time) > 1000;\n  }\n\n  getStats() {\n    const deltaTime = (getTimestamp() - this.time) / 1000;\n    const stats = {};\n    for (const key in this.counters) {\n      const counter = this.counters[key];\n      stats[counter.title] = {\n        total: counter.count,\n        fps: Math.round(counter.count / deltaTime)\n      };\n      if (counter.time) {\n        stats[counter.title].totalTime = formatTime(counter.time);\n        stats[counter.title].avgTime = formatTime(counter.time / counter.count);\n      }\n    }\n    return stats;\n  }\n\n  // Return stats in a \"table format\" suitable for console.table() or Log.table()\n  getStatsTable() {\n    const stats = this.getStats();\n    for (const key in stats) {\n      if (stats[key].total === 0) {\n        delete stats[key];\n      }\n    }\n    return stats;\n  }\n\n  // Returns the names of all registered stats, enables iteration\n  getStatNames() {\n    return Object.keys(this.counters);\n  }\n\n  get(name) {\n    const counter = this._getCounter(name);\n    return counter.count;\n  }\n\n  getCount(name) {\n    const counter = this._getCounter(name);\n    return counter.count;\n  }\n\n  getFPS(name) {\n    const counter = this._getCounter(name);\n    const deltaTime = (getTimestamp() - this.time) / 1000;\n    return Math.round(counter.count / deltaTime);\n  }\n\n  // DEPRECATED METHODS\n\n  getTimeString() {\n    return `${this.id}:${formatTime(this.time)}(${this.count})`;\n  }\n\n  oneSecondPassed(deltaTime = 1000) {\n    return this.hasTimeElapsed(deltaTime);\n  }\n\n  // PRIVATE METHODS\n\n  _getCounter(name) {\n    let counter = this.counters[name];\n    if (!counter) {\n      counter = {\n        title: name,\n        unit: '',\n        timer: false,\n        count: 0,\n        time: 0,\n        totalTime: 0,\n        averageTime: 0\n      };\n      this.counters[name] = counter;\n    }\n    return counter;\n  }\n\n  _incrementTimer(counter, time, count) {\n    counter.count += count;\n    counter.totalTime += time;\n    counter.averageTime = counter.totalTime / count;\n  }\n}\n"],"file":"stats.js"}