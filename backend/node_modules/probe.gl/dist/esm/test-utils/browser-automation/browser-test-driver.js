import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import BrowserDriver from './browser-driver';
import { COLOR } from '../../lib/utils/color';
import Log from '../../lib/log';
var log = new Log({
  id: 'render-test'
});
var webpackEnv = 'render';

if (process.argv.length >= 3) {
  webpackEnv = process.argv[2];
}

var DEFAULT_CONFIG = {
  title: 'BrowserTest',
  exposeFunction: 'taskComplete',
  parameters: ["--env.".concat(webpackEnv)]
};

var BrowserTestDriver = function (_BrowserDriver) {
  _inherits(BrowserTestDriver, _BrowserDriver);

  function BrowserTestDriver() {
    _classCallCheck(this, BrowserTestDriver);

    return _possibleConstructorReturn(this, _getPrototypeOf(BrowserTestDriver).apply(this, arguments));
  }

  _createClass(BrowserTestDriver, [{
    key: "run",
    value: function run() {
      var _this = this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      config = Object.assign(DEFAULT_CONFIG, config);
      var _config = config,
          title = _config.title,
          exposeFunction = _config.exposeFunction;
      this.title = title;
      log.log({
        message: "".concat(title, " started. Launching Chromium instance, waiting for ").concat(exposeFunction, "..."),
        color: COLOR.YELLOW
      })();
      this.time = Date.now();
      return Promise.resolve().then(function (_) {
        return _this.startServer(config);
      }).then(function (_) {
        return _this.startBrowser();
      }).then(function (_) {
        return _this.newPage();
      }).then(function (_) {
        return _this.exposeFunction(exposeFunction);
      }).then(function (resultString) {
        var result = JSON.parse(resultString);
        var ok = result.success === Boolean(result.success) && (!result.failedTest || typeof result.failedTest === 'string');

        if (!ok) {
          throw new Error("Illegal response \"".concat(resultString, "\" returned from Chrome test script"));
        }

        if (!result.success) {
          throw new Error(result.failedTest || 'Unknown failure');
        }

        _this._success();
      }).catch(function (error) {
        _this._failure(error);
      });
    }
  }, {
    key: "_success",
    value: function _success() {
      var elapsed = ((Date.now() - this.time) / 1000).toFixed(1);
      log.log({
        message: "".concat(this.title, " successfully completed in ").concat(elapsed, "s!"),
        color: COLOR.BRIGHT_GREEN
      })();
      this.setShellStatus(true);
      this.exit();
    }
  }, {
    key: "_failure",
    value: function _failure(error) {
      log.log({
        message: "".concat(this.title, " failed: ").concat(error.message, ". Keeping browser open to allow debugging."),
        color: COLOR.BRIGHT_RED
      })();
      this.setShellStatus(false);
    }
  }]);

  return BrowserTestDriver;
}(BrowserDriver);

export { BrowserTestDriver as default };
//# sourceMappingURL=browser-test-driver.js.map