{"version":3,"sources":["../../src/fly-to-viewport.js"],"names":["Vector2","lerp","scaleToZoom","zoomToScale","lngLatToWorld","worldToLngLat","EPSILON","VIEWPORT_TRANSITION_PROPS","flyToViewport","startProps","endProps","t","viewport","rho","startZoom","zoom","startCenter","longitude","latitude","startScale","endZoom","endCenter","scale","startCenterXY","endCenterXY","uDelta","subtract","w0","Math","max","width","height","w1","u1","sqrt","x","y","abs","key","startValue","endValue","rho2","b0","b1","r0","log","r1","S","s","w","cosh","u","tanh","sinh","scaleIncrement","newZoom","newCenter","add"],"mappings":"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","sourcesContent":["import {Vector2} from 'math.gl';\nimport {lerp} from './math-utils';\nimport {\n  scaleToZoom,\n  zoomToScale,\n  lngLatToWorld,\n  worldToLngLat\n} from './web-mercator-utils';\n\nconst EPSILON = 0.01;\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom'];\n\n/**\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n*/\n/* eslint-disable max-statements */\nexport default function flyToViewport(startProps, endProps, t) {\n  // Equations from above paper are referred where needed.\n\n  const viewport = {};\n\n  // TODO: add this as an option for applications.\n  const rho = 1.414;\n\n  const startZoom = startProps.zoom;\n  const startCenter = [startProps.longitude, startProps.latitude];\n  const startScale = zoomToScale(startZoom);\n  const endZoom = endProps.zoom;\n  const endCenter = [endProps.longitude, endProps.latitude];\n  const scale = zoomToScale(endZoom - startZoom);\n\n  const startCenterXY = new Vector2(lngLatToWorld(startCenter, startScale));\n  const endCenterXY = new Vector2(lngLatToWorld(endCenter, startScale));\n  const uDelta = endCenterXY.subtract(startCenterXY);\n\n  const w0 = Math.max(startProps.width, startProps.height);\n  const w1 = w0 / scale;\n  const u1 = Math.sqrt((uDelta.x * uDelta.x) + (uDelta.y * uDelta.y));\n  // u0 is treated as '0' in Eq (9).\n\n  // If change in center is too small, do linear interpolaiton.\n  if (Math.abs(u1) < EPSILON) {\n    for (const key of VIEWPORT_TRANSITION_PROPS) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      viewport[key] = lerp(startValue, endValue, t);\n    }\n    return viewport;\n  }\n\n  // Implement Equation (9) from above algorithm.\n  const rho2 = rho * rho;\n  const b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * u1 * u1) / (2 * w0 * rho2 * u1);\n  const b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * u1 * u1) / (2 * w1 * rho2 * u1);\n  const r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);\n  const r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n  const S = (r1 - r0) / rho;\n  const s = t * S;\n\n  const w = (Math.cosh(r0) / Math.cosh(r0 + rho * s));\n  const u = w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s) - Math.sinh(r0)) / rho2) / u1;\n\n  const scaleIncrement = 1 / w; // Using w method for scaling.\n  const newZoom = startZoom + scaleToZoom(scaleIncrement);\n\n  const newCenter = worldToLngLat(\n    (startCenterXY.add(uDelta.scale(u))).scale(scaleIncrement),\n    zoomToScale(newZoom));\n  viewport.longitude = newCenter[0];\n  viewport.latitude = newCenter[1];\n  viewport.zoom = newZoom;\n  return viewport;\n}\n/* eslint-enable max-statements */\n"],"file":"fly-to-viewport.js"}