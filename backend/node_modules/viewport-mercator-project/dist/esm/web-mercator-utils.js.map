{"version":3,"sources":["../../src/web-mercator-utils.js"],"names":["Vector3","createMat4","transformVector","mat4_perspective","mat4_scale","mat4_translate","mat4_rotateX","mat4_rotateZ","vec2_lerp","assert","PI","Math","PI_4","DEGREES_TO_RADIANS","RADIANS_TO_DEGREES","TILE_SIZE","EARTH_CIRCUMFERENCE","DEFAULT_ALTITUDE","zoomToScale","zoom","pow","scaleToZoom","scale","log2","lngLatToWorld","lng","lat","lambda2","phi2","x","y","log","tan","worldToLngLat","atan","exp","getMeterZoom","latitude","Number","isFinite","latCosine","cos","getDistanceScales","longitude","highPrecision","undefined","result","worldSize","pixelsPerDegreeX","pixelsPerDegreeY","altPixelsPerMeter","pixelsPerMeter","metersPerPixel","pixelsPerDegree","degreesPerPixel","latCosine2","pixelsPerDegreeY2","altPixelsPerDegree2","altPixelsPerMeter2","pixelsPerDegree2","pixelsPerMeter2","getWorldPosition","meterOffset","distanceScales","center2d","center","pixelPosition","add","getViewMatrix","height","pitch","bearing","altitude","flipY","vm","negate","getProjectionParameters","width","farZMultiplier","pitchRadians","halfFov","topHalfSurfaceDistance","sin","farZ","fov","aspect","focalDistance","near","far","getProjectionMatrix","projectionMatrix","worldToPixels","xyz","pixelProjectionMatrix","z","pixelsToWorld","pixelUnprojectionMatrix","targetZ","coord","coord0","coord1","z0","z1","t"],"mappings":"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","sourcesContent":["// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\n\nimport {Vector3} from 'math.gl';\nimport {createMat4, transformVector} from './math-utils';\n\nimport mat4_perspective from 'gl-mat4/perspective';\nimport mat4_scale from 'gl-mat4/scale';\nimport mat4_translate from 'gl-mat4/translate';\nimport mat4_rotateX from 'gl-mat4/rotateX';\nimport mat4_rotateZ from 'gl-mat4/rotateZ';\nimport vec2_lerp from 'gl-vec2/lerp';\nimport assert from './assert';\n\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n\n// Mapbox default altitude\nconst DEFAULT_ALTITUDE = 1.5;\n\n/** Util functions **/\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\n\nexport function scaleToZoom(scale) {\n  return Math.log2(scale);\n}\n\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param {Array} lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return {Array} [x,y] coordinates.\n */\nexport function lngLatToWorld([lng, lat], scale) {\n  scale *= TILE_SIZE;\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = scale * (lambda2 + PI) / (2 * PI);\n  const y = scale * (PI - Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);\n  return [x, y];\n}\n\n/**\n * Unproject world point [x,y] on map onto {lat, lon} on sphere\n *\n * @param {object|Vector} xy - object with {x,y} members\n *  representing point on projected map plane\n * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n *   Has toArray method if you need a GeoJSON Array.\n *   Per cartographic tradition, lat and lon are specified as degrees.\n */\nexport function worldToLngLat([x, y], scale) {\n  scale *= TILE_SIZE;\n  const lambda2 = (x / scale) * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp(PI - (y / scale) * (2 * PI))) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n\n// Returns the zoom level that gives a 1 meter pixel at a certain latitude\n// 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\nexport function getMeterZoom({latitude}) {\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\nexport function getDistanceScales({latitude, longitude, zoom, scale, highPrecision = false}) {\n  // Calculate scale from zoom if not provided\n  scale = scale !== undefined ? scale : zoomToScale(zoom);\n\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude) && Number.isFinite(scale));\n\n  const result = {};\n  const worldSize = TILE_SIZE * scale;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n\n  /**\n   * Number of pixels occupied by one degree longitude around current lat/lon:\n     pixelsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n       = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n     pixelsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n       = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n   */\n  const pixelsPerDegreeX = worldSize / 360;\n  const pixelsPerDegreeY = pixelsPerDegreeX / latCosine;\n\n  /**\n   * Number of pixels occupied by one meter around current lat/lon:\n   */\n  const altPixelsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n\n  result.pixelsPerMeter = [altPixelsPerMeter, altPixelsPerMeter, altPixelsPerMeter];\n  result.metersPerPixel = [1 / altPixelsPerMeter, 1 / altPixelsPerMeter, 1 / altPixelsPerMeter];\n\n  result.pixelsPerDegree = [pixelsPerDegreeX, pixelsPerDegreeY, altPixelsPerMeter];\n  result.degreesPerPixel = [1 / pixelsPerDegreeX, 1 / pixelsPerDegreeY, 1 / altPixelsPerMeter];\n\n  /**\n   * Taylor series 2nd order for 1/latCosine\n     f'(a) * (x - a)\n       = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n       = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n   */\n  if (highPrecision) {\n    const latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;\n    const pixelsPerDegreeY2 = pixelsPerDegreeX * latCosine2 / 2;\n    const altPixelsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;\n    const altPixelsPerMeter2 = altPixelsPerDegree2 / pixelsPerDegreeY * altPixelsPerMeter;\n\n    result.pixelsPerDegree2 = [0, pixelsPerDegreeY2, altPixelsPerDegree2];\n    result.pixelsPerMeter2 = [altPixelsPerMeter2, 0, altPixelsPerMeter2];\n  }\n\n  // Main results, used for converting meters to latlng deltas and scaling offsets\n  return result;\n}\n\n/**\n * Calculates a mercator world position (\"pixels\" in given zoom level)\n * from a lng/lat and meterOffset\n */\nexport function getWorldPosition({\n  longitude,\n  latitude,\n  zoom,\n  scale,\n  meterOffset,\n  distanceScales = null\n}) {\n  // Calculate scale from zoom if not provided\n  scale = scale !== undefined ? scale : zoomToScale(zoom);\n\n  // Make a centered version of the matrix for projection modes without an offset\n  const center2d = lngLatToWorld([longitude, latitude], scale);\n  const center = new Vector3(center2d[0], center2d[1], 0);\n\n  if (meterOffset) {\n    // Calculate distance scales if lng/lat/zoom are provided\n    distanceScales = distanceScales || getDistanceScales({latitude, longitude, scale});\n\n    const pixelPosition = new Vector3(meterOffset)\n      // Convert to pixels in current zoom\n      .scale(distanceScales.pixelsPerMeter)\n      // We want positive Y to represent an offset towards north,\n      // but web mercator world coordinates is top-left\n      .scale([1, -1, 1]);\n    center.add(pixelPosition);\n  }\n\n  return center;\n}\n\n// ATTRIBUTION:\n// view and projection matrix creation is intentionally kept compatible with\n// mapbox-gl's implementation to ensure that seamless interoperation\n// with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n\nexport function getViewMatrix({\n  // Viewport props\n  height,\n  pitch,\n  bearing,\n  altitude,\n  // Pre-calculated parameters\n  center = null,\n  // Options\n  flipY = false\n}) {\n\n  // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n  // Note that mercator world coordinates typically need to be flipped\n  //\n  // Note: As usual, matrix operation orders should be read in reverse\n  // since vectors will be multiplied from the right during transformation\n  const vm = createMat4();\n\n  // Move camera to altitude (along the pitch & bearing direction)\n  mat4_translate(vm, vm, [0, 0, -altitude]);\n\n  // After the rotateX, z values are in pixel units. Convert them to\n  // altitude units. 1 altitude unit = the screen height.\n  mat4_scale(vm, vm, [1, 1, 1 / height]);\n\n  // Rotate by bearing, and then by pitch (which tilts the view)\n  mat4_rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4_rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  if (flipY) {\n    mat4_scale(vm, vm, [1, -1, 1]);\n  }\n\n  if (center) {\n    mat4_translate(vm, vm, new Vector3(center).negate());\n  }\n\n  return vm;\n}\n\n// PROJECTION MATRIX PARAMETERS\n// This is a \"Mapbox\" projection matrix - matches mapbox exactly if farZMultiplier === 1\n// Variable fov (in radians)\nexport function getProjectionParameters({\n  width,\n  height,\n  altitude = DEFAULT_ALTITUDE,\n  pitch = 0,\n  farZMultiplier = 1\n}) {\n  // Find the distance from the center point to the center top\n  // in altitude units using law of sines.\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n  const halfFov = Math.atan(0.5 / altitude);\n  const topHalfSurfaceDistance =\n    Math.sin(halfFov) * altitude / Math.sin(Math.PI / 2 - pitchRadians - halfFov);\n\n  // Calculate z value of the farthest fragment that should be rendered.\n  const farZ = Math.cos(Math.PI / 2 - pitchRadians) * topHalfSurfaceDistance + altitude;\n\n  return {\n    fov: 2 * Math.atan((height / 2) / altitude),\n    aspect: width / height,\n    focalDistance: altitude,\n    near: 0.1,\n    far: farZ * farZMultiplier\n  };\n}\n\n// PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n// This is a \"Mapbox\" projection matrix - matches mapbox exactly if farZMultiplier === 1\n// Variable fov (in radians)\nexport function getProjectionMatrix({\n  width,\n  height,\n  pitch,\n  altitude,\n  farZMultiplier = 10\n}) {\n  const {fov, aspect, near, far} =\n    getProjectionParameters({width, height, altitude, pitch, farZMultiplier});\n\n  const projectionMatrix = mat4_perspective(\n    [],\n    fov,      // fov in radians\n    aspect,   // aspect ratio\n    near,     // near plane\n    far       // far plane\n  );\n\n  return projectionMatrix;\n}\n\n/**\n * Project flat coordinates to pixels on screen.\n *\n * @param {Array} xyz - flat coordinate on 512*512 Mercator Zoom 0 tile\n * @param {Matrix4} pixelProjectionMatrix - projection matrix\n * @return {Array} [x, y, depth] pixel coordinate on screen.\n */\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n\n/**\n * Unproject pixels on screen to flat coordinates.\n *\n * @param {Array} xyz - pixel coordinate on screen.\n * @param {Matrix4} pixelUnprojectionMatrix - unprojection matrix\n * @param {Number} targetZ - if pixel coordinate does not have a 3rd component (depth),\n *    targetZ is used as the elevation plane to unproject onto\n * @return {Array} [x, y, Z] flat coordinates on 512*512 Mercator Zoom 0 tile.\n */\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix, targetZ = 0) {\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y));\n\n  if (Number.isFinite(z)) {\n    // Has depth component\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  // since we don't know the correct projected z value for the point,\n  // unproject two points to get a line and then find the point on that line with z=0\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2_lerp([], coord0, coord1, t);\n}\n"],"file":"web-mercator-utils.js"}