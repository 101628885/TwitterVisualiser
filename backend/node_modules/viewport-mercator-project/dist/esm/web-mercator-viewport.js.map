{"version":3,"sources":["../../src/web-mercator-viewport.js"],"names":["Viewport","zoomToScale","getWorldPosition","pixelsToWorld","lngLatToWorld","worldToLngLat","getProjectionMatrix","getViewMatrix","fitBounds","vec2_add","vec2_negate","WebMercatorViewport","width","height","latitude","longitude","zoom","pitch","bearing","altitude","farZMultiplier","scale","Math","max","center","projectionMatrix","viewMatrix","flipY","Object","freeze","lngLat","xy","pos","fromLocation","pixelUnprojectionMatrix","toLocation","translate","newCenter","getMapCenterByLngLatPosition","bounds","options","assign"],"mappings":"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","sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport Viewport from './viewport';\n\nimport {\n  zoomToScale,\n  getWorldPosition,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  getProjectionMatrix,\n  getViewMatrix\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\n\nimport vec2_add from 'gl-vec2/add';\nimport vec2_negate from 'gl-vec2/negate';\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   *\n   * @class\n   * @param {Object} opt - options\n   *\n   * @param {Number} opt.width=1 - Width of \"viewport\" or window\n   * @param {Number} opt.height=1 - Height of \"viewport\" or window\n   * @param {Number} opt.scale=1 - Either use scale or zoom\n   * @param {Number} opt.pitch=0 - Camera angle in degrees (0 is straight down)\n   * @param {Number} opt.bearing=0 - Map rotation in degrees (0 means north is up)\n   * @param {Number} opt.altitude= - Altitude of camera in screen units\n   *\n   * Web mercator projection short-hand parameters\n   * @param {Number} opt.latitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.longitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.zoom - Scale = Math.pow(2,zoom) on map (alternative to opt.scale)\n\n   * Notes:\n   *  - Only one of center or [latitude, longitude] can be specified\n   *  - [latitude, longitude] can only be specified when \"mercator\" is true\n   *  - Altitude has a default value that matches assumptions in mapbox-gl\n   *  - width and height are forced to 1 if supplied as 0, to avoid\n   *    division by zero. This is intended to reduce the burden of apps to\n   *    to check values before instantiating a Viewport.\n   */\n  /* eslint-disable complexity */\n  constructor({\n    // Map state\n    width,\n    height,\n    latitude = 0,\n    longitude = 0,\n    zoom = 0,\n    pitch = 0,\n    bearing = 0,\n    altitude = 1.5,\n    farZMultiplier = 10\n  } = {}) {\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const center = getWorldPosition({longitude, latitude, scale});\n\n    const projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      pitch,\n      bearing,\n      altitude,\n      farZMultiplier\n    });\n\n    const viewMatrix = getViewMatrix({\n      height,\n      center,\n      pitch,\n      bearing,\n      altitude,\n      flipY: true\n    });\n\n    super({width, height, viewMatrix, projectionMatrix});\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n\n    this.scale = scale;\n    this.center = center;\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity */\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   *\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(lngLat, scale = this.scale) {\n    return lngLatToWorld(lngLat, scale);\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   *\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xy, scale = this.scale) {\n    return worldToLngLat(xy, scale);\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen\n   * point [x, y]\n   *\n   * @param {Array} lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param {Array} pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return {Array} [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat, this.scale);\n\n    const translate = vec2_add([], toLocation, vec2_negate([], fromLocation));\n    const newCenter = vec2_add([], this.center, translate);\n\n    return worldToLngLat(newCenter, this.scale);\n  }\n\n  // Legacy method name\n  getLocationAtPoint({lngLat, pos}) {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n}\n"],"file":"web-mercator-viewport.js"}