{"version":3,"sources":["../../../src/basic/Card.js"],"names":["Card","props","dataArray","renderRow","ds","DataSource","rowHasChanged","r1","r2","dataSource","cloneWithRows","_root","c","children","propTypes","style","oneOfType","object","number","array","func","StyledCard"],"mappings":"m1BAAA,4B;AACA,qC;AACA;;AAEA;AACA,mE;;AAEMA,I;AACK;AACP,GAAI,KAAKC,KAAL,CAAWC,SAAX,EAAwB,KAAKD,KAAL,CAAWE,SAAvC,CAAkD;AAChD,GAAMC,IAAK,GAAI,uBAASC,UAAb,CAAwB;AACjCC,cAAe,uBAACC,EAAD,CAAKC,EAAL,QAAYD,MAAOC,EAAnB,EADkB,CAAxB,CAAX;;AAGA,GAAMC,YAAaL,GAAGM,aAAH,CAAiB,KAAKT,KAAL,CAAWC,SAA5B,CAAnB;AACA;AACE;AACM,KAAKD,KADX;AAEE,wBAFF;AAGE,WAAYQ,UAHd;AAIE,UAAW,KAAKR,KAAL,CAAWE,SAJxB,kDADF;;;AAQD;AACD;AACE,0DAAM,IAAK,sBAAM,QAAKQ,KAAL,CAAaC,CAAnB,EAAX,EAAsC,KAAKX,KAA3C;AACG,KAAKA,KAAL,CAAWY,QADd,CADF;;;AAKD,C;;;AAGHb,KAAKc,SAAL;;AAEEC,MAAO,oBAAUC,SAAV,CAAoB;AACzB,oBAAUC,MADe;AAEzB,oBAAUC,MAFe;AAGzB,oBAAUC,KAHe,CAApB,CAFT;;AAOEjB,UAAW,oBAAUiB,KAPvB;AAQEhB,UAAW,oBAAUiB,IARvB;;;AAWA,GAAMC,YAAa,yCAAa,iBAAb,CAAgC,EAAhC;AACjBrB,IADiB,CAAnB,C;;;AAIuBA,I,CAAdqB,U","file":"Card.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { View, ListView, ViewPropTypes } from \"react-native\";\n\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport mapPropsToStyleNames from \"../Utils/mapPropsToStyleNames\";\n\nclass Card extends Component {\n  render() {\n    if (this.props.dataArray && this.props.renderRow) {\n      const ds = new ListView.DataSource({\n        rowHasChanged: (r1, r2) => r1 !== r2\n      });\n      const dataSource = ds.cloneWithRows(this.props.dataArray);\n      return (\n        <ListView\n          {...this.props}\n          enableEmptySections\n          dataSource={dataSource}\n          renderRow={this.props.renderRow}\n        />\n      );\n    }\n    return (\n      <View ref={c => (this._root = c)} {...this.props}>\n        {this.props.children}\n      </View>\n    );\n  }\n}\n\nCard.propTypes = {\n  ...ViewPropTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  dataArray: PropTypes.array,\n  renderRow: PropTypes.func\n};\n\nconst StyledCard = connectStyle(\"NativeBase.Card\", {}, mapPropsToStyleNames)(\n  Card\n);\n\nexport { StyledCard as Card };\n"]}