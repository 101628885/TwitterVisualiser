'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

exports.getFileHandler = getFileHandler;
exports.getFileType = getFileType;
exports.loadCsv = loadCsv;
exports.isKeplerGlMap = isKeplerGlMap;
exports.determineJsonProcess = determineJsonProcess;
exports.loadJSON = loadJSON;
exports.processKeplerglJSON = processKeplerglJSON;

var _window = require('global/window');

var _dataProcessor = require('./data-processor');

var _schemas = require('../schemas');

var _schemas2 = _interopRequireDefault(_schemas);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FILE_HANDLERS = {
  csv: loadCsv,
  json: loadJSON
}; // Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

function getFileHandler(fileBlob) {
  var type = getFileType(fileBlob.name);
  return FILE_HANDLERS[type];
}

function getFileType(filename) {
  if (filename.endsWith('csv')) {
    return 'csv';
  } else if (filename.endsWith('json') || filename.endsWith('geojson')) {
    // Read GeoJson from browser
    return 'json';
  }

  // Wait to add other file type handler
  return 'other';
}

function readCSVFile(fileBlob) {
  return new Promise(function (resolve, reject) {
    var fileReader = new _window.FileReader();
    fileReader.onload = function (_ref) {
      var result = _ref.target.result;

      resolve(result);
    };

    fileReader.readAsText(fileBlob);
  });
}

function loadCsv(fileBlob) {
  var processor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _dataProcessor.processCsvData;

  return readCSVFile(fileBlob).then(function (rawData) {
    return rawData ? processor(rawData) : null;
  });
}

function readJSONFile(fileBlob) {
  return new Promise(function (resolve, reject) {
    var fileReader = new _window.FileReader();
    fileReader.onload = function (_ref2) {
      var result = _ref2.target.result;

      try {
        var json = JSON.parse(result);
        resolve(json);
      } catch (err) {
        resolve(null);
      }
    };

    fileReader.readAsText(fileBlob);
  });
}

function isKeplerGlMap(json) {
  return (typeof json === 'undefined' ? 'undefined' : (0, _typeof3.default)(json)) === 'object' && json.datasets && json.config && json.info && json.info.app === 'kepler.gl';
}

function determineJsonProcess(jsonData, defaultProcessor) {
  if (isKeplerGlMap(jsonData)) {
    return processKeplerglJSON;
  }

  return defaultProcessor;
}

function loadJSON(fileBlob) {
  var processor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _dataProcessor.processGeojson;

  return readJSONFile(fileBlob).then(function (rawData) {
    return rawData ? determineJsonProcess(rawData, processor)(rawData) : null;
  });
}

function processKeplerglJSON(rawData) {
  var data = rawData ? _schemas2.default.load(rawData.datasets, rawData.config) : null;
  return (0, _extends3.default)({}, data, {
    reset: true // this will reset the state
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,