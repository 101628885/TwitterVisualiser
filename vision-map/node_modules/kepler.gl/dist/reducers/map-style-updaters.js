'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addCustomMapStyleUpdater = exports.inputMapStyleUpdater = exports.loadCustomMapStyleUpdater = exports.resetMapConfigMapStyleUpdater = exports.receiveMapConfigUpdater = exports.loadMapStyleErrUpdater = exports.loadMapStylesUpdater = exports.mapStyleChangeUpdater = exports.mapConfigChangeUpdater = exports.initMapStyleUpdater = exports.INITIAL_MAP_STYLE = undefined;

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends6 = require('babel-runtime/helpers/extends');

var _extends7 = _interopRequireDefault(_extends6);

exports.getInitialInputStyle = getInitialInputStyle;

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _reactPalm = require('react-palm');

var _mapboxGlStyleEditor = require('../utils/map-style-utils/mapbox-gl-style-editor');

var _defaultSettings = require('../constants/default-settings');

var _utils = require('../utils/utils');

var _tasks = require('../tasks/tasks');

var _mapStyleActions = require('../actions/map-style-actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getDefaultState = function getDefaultState() {
  var visibleLayerGroups = {};
  var styleType = 'dark';
  var topLayerGroups = {};

  return {
    styleType: styleType,
    visibleLayerGroups: visibleLayerGroups,
    topLayerGroups: topLayerGroups,
    mapStyles: _defaultSettings.DEFAULT_MAP_STYLES.reduce(function (accu, curr) {
      return (0, _extends7.default)({}, accu, (0, _defineProperty3.default)({}, curr.id, curr));
    }, {}),
    // save mapbox access token
    mapboxApiAccessToken: null,
    inputStyle: getInitialInputStyle()
  };
};

// Utils
// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

var INITIAL_MAP_STYLE = exports.INITIAL_MAP_STYLE = getDefaultState();

/**
 * Create two map styles from preset map style, one for top map one for bottom
 *
 * @param {string} styleType - current map style
 * @param {object} visibleLayerGroups - visible layers of bottom map
 * @param {object} topLayerGroups - visible layers of top map
 * @param {object} mapStyles - a dictionary of all map styles
 * @returns {object} bottomMapStyle | topMapStyle | isRaster
 */
function getMapStyles(_ref) {
  var styleType = _ref.styleType,
      visibleLayerGroups = _ref.visibleLayerGroups,
      topLayerGroups = _ref.topLayerGroups,
      mapStyles = _ref.mapStyles;

  var mapStyle = mapStyles[styleType];

  // style might not be loaded yet
  if (!mapStyle || !mapStyle.style) {
    return {};
  }

  var editable = Object.keys(visibleLayerGroups).length;

  var bottomMapStyle = !editable ? _immutable2.default.fromJS(mapStyle.style) : (0, _mapboxGlStyleEditor.editBottomMapStyle)({
    id: styleType,
    mapStyle: mapStyle,
    visibleLayerGroups: visibleLayerGroups
  });

  var hasTopLayer = editable && Object.values(topLayerGroups).some(function (v) {
    return v;
  });

  // mute top layer if not visible in bottom layer
  var topLayers = hasTopLayer && Object.keys(topLayerGroups).reduce(function (accu, key) {
    return (0, _extends7.default)({}, accu, (0, _defineProperty3.default)({}, key, topLayerGroups[key] && visibleLayerGroups[key]));
  }, {});

  var topMapStyle = hasTopLayer ? (0, _mapboxGlStyleEditor.editTopMapStyle)({
    id: styleType,
    mapStyle: mapStyle,
    visibleLayerGroups: topLayers
  }) : null;

  return { bottomMapStyle: bottomMapStyle, topMapStyle: topMapStyle, editable: editable };
}

function getLayerGroupsFromStyle(style) {
  return _defaultSettings.DEFAULT_LAYER_GROUPS.filter(function (lg) {
    return style.layers.filter(lg.filter).length;
  });
}

// Updaters
var initMapStyleUpdater = exports.initMapStyleUpdater = function initMapStyleUpdater(state, action) {
  return (0, _extends7.default)({}, state, {
    // save mapbox access token to map style state
    mapboxApiAccessToken: (action.payload || {}).mapboxApiAccessToken
  });
};

var mapConfigChangeUpdater = exports.mapConfigChangeUpdater = function mapConfigChangeUpdater(state, action) {
  return (0, _extends7.default)({}, state, action.payload, getMapStyles((0, _extends7.default)({}, state, action.payload)));
};

var mapStyleChangeUpdater = exports.mapStyleChangeUpdater = function mapStyleChangeUpdater(state, _ref2) {
  var styleType = _ref2.payload;

  if (!state.mapStyles[styleType]) {
    // we might not have received the style yet
    return state;
  }
  var defaultLGVisibility = (0, _mapboxGlStyleEditor.getDefaultLayerGroupVisibility)(state.mapStyles[styleType]);

  var visibleLayerGroups = (0, _mapboxGlStyleEditor.mergeLayerGroupVisibility)(defaultLGVisibility, state.visibleLayerGroups);

  return (0, _extends7.default)({}, state, {
    styleType: styleType,
    visibleLayerGroups: visibleLayerGroups
  }, getMapStyles((0, _extends7.default)({}, state, {
    visibleLayerGroups: visibleLayerGroups,
    styleType: styleType
  })));
};

var loadMapStylesUpdater = exports.loadMapStylesUpdater = function loadMapStylesUpdater(state, action) {
  var newStyles = action.payload;

  // add new styles to state
  var newState = (0, _extends7.default)({}, state, {
    mapStyles: (0, _extends7.default)({}, state.mapStyles, newStyles)
  });

  return newStyles[state.styleType] ? mapStyleChangeUpdater(newState, { payload: state.styleType }) : newState;
};

// do nothing for now, if didn't load, skip it
var loadMapStyleErrUpdater = exports.loadMapStyleErrUpdater = function loadMapStyleErrUpdater(state, action) {
  return state;
};
var receiveMapConfigUpdater = exports.receiveMapConfigUpdater = function receiveMapConfigUpdater(state, _ref3) {
  var mapStyle = _ref3.payload.mapStyle;

  if (!mapStyle) {
    return state;
  }

  // if saved custom mapStyles load the style object
  var loadMapStyleTasks = mapStyle.mapStyles ? [_reactPalm.Task.all(Object.values(mapStyle.mapStyles).map(function (_ref4) {
    var id = _ref4.id,
        url = _ref4.url,
        accessToken = _ref4.accessToken;
    return {
      id: id, url: (0, _mapboxGlStyleEditor.getStyleDownloadUrl)(url, accessToken || state.mapboxApiAccessToken)
    };
  }).map(_tasks.LOAD_MAP_STYLE_TASK)).bimap(
  // success
  function (results) {
    return (0, _mapStyleActions.loadMapStyles)(results.reduce(function (accu, _ref5) {
      var id = _ref5.id,
          style = _ref5.style;
      return (0, _extends7.default)({}, accu, (0, _defineProperty3.default)({}, id, (0, _extends7.default)({}, mapStyle.mapStyles[id], {
        layerGroups: getLayerGroupsFromStyle(style),
        style: style
      })));
    }, {}));
  },
  // error
  function (error) {
    return (0, _mapStyleActions.loadMapStyleErr)(error);
  })] : null;

  var newState = mapConfigChangeUpdater(state, { payload: mapStyle });

  return loadMapStyleTasks ? (0, _reactPalm.withTask)(newState, loadMapStyleTasks) : newState;
};

var resetMapConfigMapStyleUpdater = exports.resetMapConfigMapStyleUpdater = function resetMapConfigMapStyleUpdater(state) {
  var emptyConfig = (0, _extends7.default)({}, INITIAL_MAP_STYLE, {
    mapboxApiAccessToken: state.mapboxApiAccessToken
  }, state.initialState, {
    mapStyles: state.mapStyles,
    initialState: state.initialState
  });

  return mapStyleChangeUpdater(emptyConfig, { payload: emptyConfig.styleType });
};

var loadCustomMapStyleUpdater = exports.loadCustomMapStyleUpdater = function loadCustomMapStyleUpdater(state, _ref6) {
  var _ref6$payload = _ref6.payload,
      icon = _ref6$payload.icon,
      style = _ref6$payload.style,
      error = _ref6$payload.error;
  return (0, _extends7.default)({}, state, {
    inputStyle: (0, _extends7.default)({}, state.inputStyle, style ? {
      id: style.id || (0, _utils.generateHashId)(),
      // make a copy of the style object
      style: JSON.parse(JSON.stringify(style)),
      label: style.name,
      // gathering layer group info from style json
      layerGroups: getLayerGroupsFromStyle(style)
    } : {}, icon ? { icon: icon } : {}, error !== undefined ? { error: error } : {})
  });
};

var inputMapStyleUpdater = exports.inputMapStyleUpdater = function inputMapStyleUpdater(state, _ref7) {
  var inputStyle = _ref7.payload;
  return (0, _extends7.default)({}, state, {
    inputStyle: (0, _extends7.default)({}, inputStyle, {
      isValid: (0, _mapboxGlStyleEditor.isValidStyleUrl)(inputStyle.url)
    })
  });
};

var addCustomMapStyleUpdater = exports.addCustomMapStyleUpdater = function addCustomMapStyleUpdater(state, action) {
  var styleId = state.inputStyle.id;
  var newState = (0, _extends7.default)({}, state, {
    mapStyles: (0, _extends7.default)({}, state.mapStyles, (0, _defineProperty3.default)({}, styleId, state.inputStyle)),
    // set to default
    inputStyle: getInitialInputStyle()
  });
  // set new style
  return mapStyleChangeUpdater(newState, { payload: styleId });
};

function getInitialInputStyle() {
  return {
    accessToken: null,
    error: false,
    isValid: false,
    label: null,
    style: null,
    url: null,
    custom: true
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,