'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.visStateReducerFactory = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _actionHandler; // Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// updater functions


var _actionTypes = require('../constants/action-types');

var _actionTypes2 = _interopRequireDefault(_actionTypes);

var _reduxActions = require('redux-actions');

var _visStateUpdaters = require('./vis-state-updaters');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var actionHandler = (_actionHandler = {}, (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.ADD_FILTER, _visStateUpdaters.addFilterUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.ADD_LAYER, _visStateUpdaters.addLayerUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.ENLARGE_FILTER, _visStateUpdaters.enlargeFilterUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.INTERACTION_CONFIG_CHANGE, _visStateUpdaters.interactionConfigChangeUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.LAYER_CLICK, _visStateUpdaters.layerClickUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.LAYER_CONFIG_CHANGE, _visStateUpdaters.layerConfigChangeUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.LAYER_HOVER, _visStateUpdaters.layerHoverUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.LAYER_TYPE_CHANGE, _visStateUpdaters.layerTypeChangeUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.LAYER_VIS_CONFIG_CHANGE, _visStateUpdaters.layerVisConfigChangeUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.LAYER_VISUAL_CHANNEL_CHANGE, _visStateUpdaters.layerVisualChannelChangeUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.LOAD_FILES, _visStateUpdaters.loadFilesUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.LOAD_FILES_ERR, _visStateUpdaters.loadFilesErrUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.MAP_CLICK, _visStateUpdaters.mapClickUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.RECEIVE_MAP_CONFIG, _visStateUpdaters.receiveMapConfigUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.REMOVE_DATASET, _visStateUpdaters.removeDatasetUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.REMOVE_FILTER, _visStateUpdaters.removeFilterUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.REMOVE_LAYER, _visStateUpdaters.removeLayerUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.REORDER_LAYER, _visStateUpdaters.reorderLayerUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.RESET_MAP_CONFIG, _visStateUpdaters.resetMapConfigVisStateUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.SET_FILTER, _visStateUpdaters.setFilterUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.SET_FILTER_PLOT, _visStateUpdaters.setFilterPlotUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.SET_VISIBLE_LAYERS_FOR_MAP, _visStateUpdaters.setVisibleLayersForMapUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.SHOW_DATASET_TABLE, _visStateUpdaters.showDatasetTableUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.TOGGLE_FILTER_ANIMATION, _visStateUpdaters.toggleFilterAnimationUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.UPDATE_FILTER_ANIMATION_SPEED, _visStateUpdaters.updateAnimationSpeedUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.TOGGLE_LAYER_FOR_MAP, _visStateUpdaters.toggleLayerForMapUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.TOGGLE_SPLIT_MAP, _visStateUpdaters.toggleSplitMapUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.UPDATE_LAYER_BLENDING, _visStateUpdaters.updateLayerBlendingUpdater), (0, _defineProperty3.default)(_actionHandler, _actionTypes2.default.UPDATE_VIS_DATA, _visStateUpdaters.updateVisDataUpdater), _actionHandler);

// construct vis-state reducer
var visStateReducerFactory = exports.visStateReducerFactory = function visStateReducerFactory() {
  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return (0, _reduxActions.handleActions)(actionHandler, (0, _extends3.default)({}, _visStateUpdaters.INITIAL_VIS_STATE, initialState, {
    initialState: initialState
  }));
};

exports.default = visStateReducerFactory();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,